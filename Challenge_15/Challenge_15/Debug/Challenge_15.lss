
Challenge_15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000840  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000840  000008d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  000008e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000914  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019fe  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a41  00000000  00000000  000024ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ba6  00000000  00000000  00002eef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  00003a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000608  00000000  00000000  00003db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001104  00000000  00000000  000043b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000054bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 86 03 	jmp	0x70c	; 0x70c <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 55 03 	call	0x6aa	; 0x6aa <main>
  8a:	0c 94 1e 04 	jmp	0x83c	; 0x83c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:
/* Return: return void		                                            */
/* Description: config the pin to be high or low		                */
/************************************************************************/
void DIO_WritePin(uint8 PinNum, uint8 PinValue)
{
	if((PinNum >= NUM_0) && (PinNum < NUM_8))/*check if Pins in PORTA*/
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	e8 f4       	brcc	.+58     	; 0xd0 <DIO_WritePin+0x3e>
	{
		if (PinValue == NUM_1) /* Check Pin Value if high to set bit or low to clear bit */
  96:	61 30       	cpi	r22, 0x01	; 1
  98:	69 f4       	brne	.+26     	; 0xb4 <DIO_WritePin+0x22>
		{
			SET_BIT(PORTA,PinNum);
  9a:	4b b3       	in	r20, 0x1b	; 27
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	b9 01       	movw	r22, r18
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_WritePin+0x16>
  a4:	66 0f       	add	r22, r22
  a6:	77 1f       	adc	r23, r23
  a8:	8a 95       	dec	r24
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_WritePin+0x12>
  ac:	cb 01       	movw	r24, r22
  ae:	84 2b       	or	r24, r20
  b0:	8b bb       	out	0x1b, r24	; 27
  b2:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,PinNum);
  b4:	4b b3       	in	r20, 0x1b	; 27
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	b9 01       	movw	r22, r18
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_WritePin+0x30>
  be:	66 0f       	add	r22, r22
  c0:	77 1f       	adc	r23, r23
  c2:	8a 95       	dec	r24
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_WritePin+0x2c>
  c6:	cb 01       	movw	r24, r22
  c8:	80 95       	com	r24
  ca:	84 23       	and	r24, r20
  cc:	8b bb       	out	0x1b, r24	; 27
  ce:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_8) && (PinNum < NUM_16)) /*check if Pins in PORTB*/
  d0:	98 ef       	ldi	r25, 0xF8	; 248
  d2:	98 0f       	add	r25, r24
  d4:	98 30       	cpi	r25, 0x08	; 8
  d6:	f0 f4       	brcc	.+60     	; 0x114 <DIO_WritePin+0x82>
	{
		if (PinValue == NUM_1) /* Check Pin Value if high to set bit or low to clear bit */
  d8:	61 30       	cpi	r22, 0x01	; 1
  da:	69 f4       	brne	.+26     	; 0xf6 <DIO_WritePin+0x64>
		{
			SET_BIT(PORTB,(PinNum - NUM_8));
  dc:	48 b3       	in	r20, 0x18	; 24
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_WritePin+0x58>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	9a 95       	dec	r25
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_WritePin+0x54>
  ee:	cb 01       	movw	r24, r22
  f0:	84 2b       	or	r24, r20
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,(PinNum - NUM_8));
  f6:	48 b3       	in	r20, 0x18	; 24
  f8:	88 50       	subi	r24, 0x08	; 8
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	b9 01       	movw	r22, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_WritePin+0x74>
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	8a 95       	dec	r24
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_WritePin+0x70>
 10a:	cb 01       	movw	r24, r22
 10c:	80 95       	com	r24
 10e:	84 23       	and	r24, r20
 110:	88 bb       	out	0x18, r24	; 24
 112:	08 95       	ret
		}
	}
	else if((PinNum >= NUM_16) && (PinNum < NUM_24)) /*check if Pins in PORTC*/
 114:	90 ef       	ldi	r25, 0xF0	; 240
 116:	98 0f       	add	r25, r24
 118:	98 30       	cpi	r25, 0x08	; 8
 11a:	f0 f4       	brcc	.+60     	; 0x158 <DIO_WritePin+0xc6>
	{
		if(PinValue == NUM_1) /* Check Pin Value if high to set bit or low to clear bit */
 11c:	61 30       	cpi	r22, 0x01	; 1
 11e:	69 f4       	brne	.+26     	; 0x13a <DIO_WritePin+0xa8>
		{
			SET_BIT(PORTC,(PinNum-NUM_16));
 120:	45 b3       	in	r20, 0x15	; 21
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	b9 01       	movw	r22, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_WritePin+0x9c>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	9a 95       	dec	r25
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_WritePin+0x98>
 132:	cb 01       	movw	r24, r22
 134:	84 2b       	or	r24, r20
 136:	85 bb       	out	0x15, r24	; 21
 138:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,(PinNum-NUM_16));
 13a:	45 b3       	in	r20, 0x15	; 21
 13c:	80 51       	subi	r24, 0x10	; 16
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	b9 01       	movw	r22, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_WritePin+0xb8>
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	8a 95       	dec	r24
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_WritePin+0xb4>
 14e:	cb 01       	movw	r24, r22
 150:	80 95       	com	r24
 152:	84 23       	and	r24, r20
 154:	85 bb       	out	0x15, r24	; 21
 156:	08 95       	ret
		}
	}
	else if((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
 158:	98 ee       	ldi	r25, 0xE8	; 232
 15a:	98 0f       	add	r25, r24
 15c:	98 30       	cpi	r25, 0x08	; 8
 15e:	e8 f4       	brcc	.+58     	; 0x19a <DIO_WritePin+0x108>
	{
		if (PinValue == NUM_1) /* Check Pin Value if high to set bit or low to clear bit */
 160:	61 30       	cpi	r22, 0x01	; 1
 162:	69 f4       	brne	.+26     	; 0x17e <DIO_WritePin+0xec>
		{
			SET_BIT(PORTD,(PinNum-NUM_24));
 164:	42 b3       	in	r20, 0x12	; 18
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	b9 01       	movw	r22, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_WritePin+0xe0>
 16e:	66 0f       	add	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	9a 95       	dec	r25
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_WritePin+0xdc>
 176:	cb 01       	movw	r24, r22
 178:	84 2b       	or	r24, r20
 17a:	82 bb       	out	0x12, r24	; 18
 17c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,(PinNum-NUM_24));
 17e:	42 b3       	in	r20, 0x12	; 18
 180:	88 51       	subi	r24, 0x18	; 24
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	b9 01       	movw	r22, r18
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_WritePin+0xfc>
 18a:	66 0f       	add	r22, r22
 18c:	77 1f       	adc	r23, r23
 18e:	8a 95       	dec	r24
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_WritePin+0xf8>
 192:	cb 01       	movw	r24, r22
 194:	80 95       	com	r24
 196:	84 23       	and	r24, r20
 198:	82 bb       	out	0x12, r24	; 18
 19a:	08 95       	ret

0000019c <DIO_ReadPin>:
/* @param: PinNum take the pin we need to return its value              */
/* Return: return status of the pin		                                */
/* Description: return pin status			      		                */
/************************************************************************/
uint8 DIO_ReadPin(uint8 PinNum)
{
 19c:	98 2f       	mov	r25, r24
		if((PinNum >= NUM_0) && (PinNum < NUM_8)) /*check if Pins in PORTA*/
 19e:	88 30       	cpi	r24, 0x08	; 8
 1a0:	60 f4       	brcc	.+24     	; 0x1ba <DIO_ReadPin+0x1e>
		{
			return GET_BIT(PINA,PinNum); /* Return Bit status*/
 1a2:	49 b3       	in	r20, 0x19	; 25
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	b9 01       	movw	r22, r18
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_ReadPin+0x14>
 1ac:	66 0f       	add	r22, r22
 1ae:	77 1f       	adc	r23, r23
 1b0:	8a 95       	dec	r24
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_ReadPin+0x10>
 1b4:	cb 01       	movw	r24, r22
 1b6:	84 23       	and	r24, r20
 1b8:	08 95       	ret
		}
		else if((PinNum >= NUM_8) && (PinNum < NUM_16)) /*check if Pins in PORTB*/
 1ba:	88 ef       	ldi	r24, 0xF8	; 248
 1bc:	89 0f       	add	r24, r25
 1be:	88 30       	cpi	r24, 0x08	; 8
 1c0:	60 f4       	brcc	.+24     	; 0x1da <DIO_ReadPin+0x3e>
		{
			return GET_BIT(PINB,(PinNum-NUM_8));
 1c2:	46 b3       	in	r20, 0x16	; 22
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	b9 01       	movw	r22, r18
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_ReadPin+0x34>
 1cc:	66 0f       	add	r22, r22
 1ce:	77 1f       	adc	r23, r23
 1d0:	8a 95       	dec	r24
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_ReadPin+0x30>
 1d4:	cb 01       	movw	r24, r22
 1d6:	84 23       	and	r24, r20
 1d8:	08 95       	ret
		}
		else if((PinNum >= NUM_16) && (PinNum < NUM_24)) /*check if Pins in PORTC*/
 1da:	80 ef       	ldi	r24, 0xF0	; 240
 1dc:	89 0f       	add	r24, r25
 1de:	88 30       	cpi	r24, 0x08	; 8
 1e0:	60 f4       	brcc	.+24     	; 0x1fa <DIO_ReadPin+0x5e>
		{
			return GET_BIT(PINC,(PinNum-NUM_16));
 1e2:	43 b3       	in	r20, 0x13	; 19
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	b9 01       	movw	r22, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_ReadPin+0x54>
 1ec:	66 0f       	add	r22, r22
 1ee:	77 1f       	adc	r23, r23
 1f0:	8a 95       	dec	r24
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_ReadPin+0x50>
 1f4:	cb 01       	movw	r24, r22
 1f6:	84 23       	and	r24, r20
 1f8:	08 95       	ret
		}
		else if((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
 1fa:	88 ee       	ldi	r24, 0xE8	; 232
 1fc:	89 0f       	add	r24, r25
 1fe:	88 30       	cpi	r24, 0x08	; 8
 200:	60 f4       	brcc	.+24     	; 0x21a <DIO_ReadPin+0x7e>
		{
			return GET_BIT(PIND,(PinNum-NUM_24));
 202:	40 b3       	in	r20, 0x10	; 16
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	b9 01       	movw	r22, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_ReadPin+0x74>
 20c:	66 0f       	add	r22, r22
 20e:	77 1f       	adc	r23, r23
 210:	8a 95       	dec	r24
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_ReadPin+0x70>
 214:	cb 01       	movw	r24, r22
 216:	84 23       	and	r24, r20
 218:	08 95       	ret
		}
	return NUM_0;
 21a:	80 e0       	ldi	r24, 0x00	; 0
}
 21c:	08 95       	ret

0000021e <DIO_SetPinDirection>:
/* Return: return void		                                            */
/* Description: config the pin to be input or output	                */
/************************************************************************/
void DIO_SetPinDirection(uint8 PinNum, uint8 PinValue)
{
	if((PinNum >= NUM_0) && (PinNum <NUM_8)) /*check if Pins in PORTA*/
 21e:	88 30       	cpi	r24, 0x08	; 8
 220:	e8 f4       	brcc	.+58     	; 0x25c <DIO_SetPinDirection+0x3e>
	{
		if (PinValue == NUM_1) /* Check Pin Value if OUT to set bit or IN to clear bit */
 222:	61 30       	cpi	r22, 0x01	; 1
 224:	69 f4       	brne	.+26     	; 0x240 <DIO_SetPinDirection+0x22>
		{
			SET_BIT(DDRA,(PinNum));
 226:	4a b3       	in	r20, 0x1a	; 26
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	b9 01       	movw	r22, r18
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_SetPinDirection+0x16>
 230:	66 0f       	add	r22, r22
 232:	77 1f       	adc	r23, r23
 234:	8a 95       	dec	r24
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_SetPinDirection+0x12>
 238:	cb 01       	movw	r24, r22
 23a:	84 2b       	or	r24, r20
 23c:	8a bb       	out	0x1a, r24	; 26
 23e:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,(PinNum));
 240:	4a b3       	in	r20, 0x1a	; 26
 242:	21 e0       	ldi	r18, 0x01	; 1
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	b9 01       	movw	r22, r18
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_SetPinDirection+0x30>
 24a:	66 0f       	add	r22, r22
 24c:	77 1f       	adc	r23, r23
 24e:	8a 95       	dec	r24
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_SetPinDirection+0x2c>
 252:	cb 01       	movw	r24, r22
 254:	80 95       	com	r24
 256:	84 23       	and	r24, r20
 258:	8a bb       	out	0x1a, r24	; 26
 25a:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_8) && (PinNum < NUM_16)) /*check if Pins in PORTB*/
 25c:	98 ef       	ldi	r25, 0xF8	; 248
 25e:	98 0f       	add	r25, r24
 260:	98 30       	cpi	r25, 0x08	; 8
 262:	f0 f4       	brcc	.+60     	; 0x2a0 <DIO_SetPinDirection+0x82>
	{
		if (PinValue == NUM_1)
 264:	61 30       	cpi	r22, 0x01	; 1
 266:	69 f4       	brne	.+26     	; 0x282 <DIO_SetPinDirection+0x64>
		{
			SET_BIT(DDRB,(PinNum - NUM_8));
 268:	47 b3       	in	r20, 0x17	; 23
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	b9 01       	movw	r22, r18
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_SetPinDirection+0x58>
 272:	66 0f       	add	r22, r22
 274:	77 1f       	adc	r23, r23
 276:	9a 95       	dec	r25
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_SetPinDirection+0x54>
 27a:	cb 01       	movw	r24, r22
 27c:	84 2b       	or	r24, r20
 27e:	87 bb       	out	0x17, r24	; 23
 280:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,(PinNum - NUM_8));
 282:	47 b3       	in	r20, 0x17	; 23
 284:	88 50       	subi	r24, 0x08	; 8
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	b9 01       	movw	r22, r18
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_SetPinDirection+0x74>
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	8a 95       	dec	r24
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_SetPinDirection+0x70>
 296:	cb 01       	movw	r24, r22
 298:	80 95       	com	r24
 29a:	84 23       	and	r24, r20
 29c:	87 bb       	out	0x17, r24	; 23
 29e:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_16) && (PinNum < NUM_24)) /*check if Pins in PORTC*/
 2a0:	90 ef       	ldi	r25, 0xF0	; 240
 2a2:	98 0f       	add	r25, r24
 2a4:	98 30       	cpi	r25, 0x08	; 8
 2a6:	f0 f4       	brcc	.+60     	; 0x2e4 <DIO_SetPinDirection+0xc6>
	{
		if (PinValue == NUM_1)
 2a8:	61 30       	cpi	r22, 0x01	; 1
 2aa:	69 f4       	brne	.+26     	; 0x2c6 <DIO_SetPinDirection+0xa8>
		{
			SET_BIT(DDRC,(PinNum - NUM_16));
 2ac:	44 b3       	in	r20, 0x14	; 20
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	b9 01       	movw	r22, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_SetPinDirection+0x9c>
 2b6:	66 0f       	add	r22, r22
 2b8:	77 1f       	adc	r23, r23
 2ba:	9a 95       	dec	r25
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_SetPinDirection+0x98>
 2be:	cb 01       	movw	r24, r22
 2c0:	84 2b       	or	r24, r20
 2c2:	84 bb       	out	0x14, r24	; 20
 2c4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,(PinNum - NUM_16));
 2c6:	44 b3       	in	r20, 0x14	; 20
 2c8:	80 51       	subi	r24, 0x10	; 16
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	b9 01       	movw	r22, r18
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_SetPinDirection+0xb8>
 2d2:	66 0f       	add	r22, r22
 2d4:	77 1f       	adc	r23, r23
 2d6:	8a 95       	dec	r24
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_SetPinDirection+0xb4>
 2da:	cb 01       	movw	r24, r22
 2dc:	80 95       	com	r24
 2de:	84 23       	and	r24, r20
 2e0:	84 bb       	out	0x14, r24	; 20
 2e2:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
 2e4:	98 ee       	ldi	r25, 0xE8	; 232
 2e6:	98 0f       	add	r25, r24
 2e8:	98 30       	cpi	r25, 0x08	; 8
 2ea:	e8 f4       	brcc	.+58     	; 0x326 <DIO_SetPinDirection+0x108>
	{
		if (PinValue == NUM_1)
 2ec:	61 30       	cpi	r22, 0x01	; 1
 2ee:	69 f4       	brne	.+26     	; 0x30a <DIO_SetPinDirection+0xec>
		{
			SET_BIT(DDRD,(PinNum - NUM_24));
 2f0:	41 b3       	in	r20, 0x11	; 17
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	b9 01       	movw	r22, r18
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_SetPinDirection+0xe0>
 2fa:	66 0f       	add	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	9a 95       	dec	r25
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_SetPinDirection+0xdc>
 302:	cb 01       	movw	r24, r22
 304:	84 2b       	or	r24, r20
 306:	81 bb       	out	0x11, r24	; 17
 308:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,(PinNum - NUM_24));
 30a:	41 b3       	in	r20, 0x11	; 17
 30c:	88 51       	subi	r24, 0x18	; 24
 30e:	21 e0       	ldi	r18, 0x01	; 1
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	b9 01       	movw	r22, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_SetPinDirection+0xfc>
 316:	66 0f       	add	r22, r22
 318:	77 1f       	adc	r23, r23
 31a:	8a 95       	dec	r24
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_SetPinDirection+0xf8>
 31e:	cb 01       	movw	r24, r22
 320:	80 95       	com	r24
 322:	84 23       	and	r24, r20
 324:	81 bb       	out	0x11, r24	; 17
 326:	08 95       	ret

00000328 <KeyPad_Init>:
				}
			}
		}
	}
	return NUM_0; /* if no key pressed return 0 */
}
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	85 e1       	ldi	r24, 0x15	; 21
 32c:	0e 94 0f 01 	call	0x21e	; 0x21e <DIO_SetPinDirection>
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	86 e1       	ldi	r24, 0x16	; 22
 334:	0e 94 0f 01 	call	0x21e	; 0x21e <DIO_SetPinDirection>
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	87 e1       	ldi	r24, 0x17	; 23
 33c:	0e 94 0f 01 	call	0x21e	; 0x21e <DIO_SetPinDirection>
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	82 e1       	ldi	r24, 0x12	; 18
 344:	0e 94 0f 01 	call	0x21e	; 0x21e <DIO_SetPinDirection>
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	83 e1       	ldi	r24, 0x13	; 19
 34c:	0e 94 0f 01 	call	0x21e	; 0x21e <DIO_SetPinDirection>
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	84 e1       	ldi	r24, 0x14	; 20
 354:	0e 94 0f 01 	call	0x21e	; 0x21e <DIO_SetPinDirection>
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	85 e1       	ldi	r24, 0x15	; 21
 35c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	86 e1       	ldi	r24, 0x16	; 22
 364:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	87 e1       	ldi	r24, 0x17	; 23
 36c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	82 e1       	ldi	r24, 0x12	; 18
 374:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	83 e1       	ldi	r24, 0x13	; 19
 37c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	84 e1       	ldi	r24, 0x14	; 20
 384:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 388:	08 95       	ret

0000038a <KeyPad_GetPressedOperands>:
/* @param: Void							                                */
/* @return: return number detected                                      */
/* Description: Detect pressed key and return its value                 */
/************************************************************************/
uint8 KeyPad_GetPressedOperands(void)
{
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	cd b7       	in	r28, 0x3d	; 61
 394:	de b7       	in	r29, 0x3e	; 62
 396:	29 97       	sbiw	r28, 0x09	; 9
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	f8 94       	cli
 39c:	de bf       	out	0x3e, r29	; 62
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	cd bf       	out	0x3d, r28	; 61
	uint8 Operands_Arr[COL_NUM][ROW_NUM] = {
 3a2:	89 e0       	ldi	r24, 0x09	; 9
 3a4:	e0 e6       	ldi	r30, 0x60	; 96
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	de 01       	movw	r26, r28
 3aa:	11 96       	adiw	r26, 0x01	; 1
 3ac:	01 90       	ld	r0, Z+
 3ae:	0d 92       	st	X+, r0
 3b0:	8a 95       	dec	r24
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <KeyPad_GetPressedOperands+0x22>
											{'*', '/', '='},
											{0, 0, 0}	
											};
	
	while(NUM_1){
		for (uint8 i = NUM_0; i < COL_NUM; i++)
 3b4:	00 e0       	ldi	r16, 0x00	; 0
		{
			KeyPad_Init();
 3b6:	0e 94 94 01 	call	0x328	; 0x328 <KeyPad_Init>
			DIO_WritePin((COL1 + i), LOW); /* write low on one column each loop  */
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	85 e1       	ldi	r24, 0x15	; 21
 3be:	80 0f       	add	r24, r16
 3c0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			for (uint8 j = NUM_0; j < ROW_NUM; j++)
 3c4:	10 e0       	ldi	r17, 0x00	; 0
			{
				if (!(DIO_ReadPin((ROW1 + j)))) /*detect if key pressed */
 3c6:	82 e1       	ldi	r24, 0x12	; 18
 3c8:	81 0f       	add	r24, r17
 3ca:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_ReadPin>
 3ce:	81 11       	cpse	r24, r1
 3d0:	11 c0       	rjmp	.+34     	; 0x3f4 <KeyPad_GetPressedOperands+0x6a>
				{
					uint8 result = Operands_Arr[j][i]; /* equation to get the pressed number according to the maping of keypad */
 3d2:	81 2f       	mov	r24, r17
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	fc 01       	movw	r30, r24
 3d8:	ee 0f       	add	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	e8 0f       	add	r30, r24
 3de:	f9 1f       	adc	r31, r25
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	8c 0f       	add	r24, r28
 3e6:	9d 1f       	adc	r25, r29
 3e8:	e8 0f       	add	r30, r24
 3ea:	f9 1f       	adc	r31, r25
 3ec:	e0 0f       	add	r30, r16
 3ee:	f1 1d       	adc	r31, r1
 3f0:	80 81       	ld	r24, Z
 3f2:	07 c0       	rjmp	.+14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	while(NUM_1){
		for (uint8 i = NUM_0; i < COL_NUM; i++)
		{
			KeyPad_Init();
			DIO_WritePin((COL1 + i), LOW); /* write low on one column each loop  */
			for (uint8 j = NUM_0; j < ROW_NUM; j++)
 3f4:	1f 5f       	subi	r17, 0xFF	; 255
 3f6:	13 30       	cpi	r17, 0x03	; 3
 3f8:	31 f7       	brne	.-52     	; 0x3c6 <KeyPad_GetPressedOperands+0x3c>
											{'*', '/', '='},
											{0, 0, 0}	
											};
	
	while(NUM_1){
		for (uint8 i = NUM_0; i < COL_NUM; i++)
 3fa:	0f 5f       	subi	r16, 0xFF	; 255
 3fc:	03 30       	cpi	r16, 0x03	; 3
 3fe:	d9 f6       	brne	.-74     	; 0x3b6 <KeyPad_GetPressedOperands+0x2c>
 400:	d9 cf       	rjmp	.-78     	; 0x3b4 <KeyPad_GetPressedOperands+0x2a>
				}
			}
		}
	}
	return NUM_0; /* if no key pressed return 0 */
}
 402:	29 96       	adiw	r28, 0x09	; 9
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	08 95       	ret

00000418 <LCD_SendCommand>:
		_delay_ms(TEN_MS);
	}
	LCD_SendCommand(0x80);
	LCD_GotoRowColumn(ROw, Col);
	LCD_DisplayChar(char_add);
}
 418:	cf 93       	push	r28
 41a:	c8 2f       	mov	r28, r24
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 42c:	8f e9       	ldi	r24, 0x9F	; 159
 42e:	9f e0       	ldi	r25, 0x0F	; 15
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <LCD_SendCommand+0x18>
 434:	00 c0       	rjmp	.+0      	; 0x436 <LCD_SendCommand+0x1e>
 436:	00 00       	nop
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	83 e0       	ldi	r24, 0x03	; 3
 43c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 440:	8f e9       	ldi	r24, 0x9F	; 159
 442:	9f e0       	ldi	r25, 0x0F	; 15
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <LCD_SendCommand+0x2c>
 448:	00 c0       	rjmp	.+0      	; 0x44a <LCD_SendCommand+0x32>
 44a:	00 00       	nop
 44c:	c4 fb       	bst	r28, 4
 44e:	66 27       	eor	r22, r22
 450:	60 f9       	bld	r22, 0
 452:	84 e0       	ldi	r24, 0x04	; 4
 454:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 458:	c5 fb       	bst	r28, 5
 45a:	66 27       	eor	r22, r22
 45c:	60 f9       	bld	r22, 0
 45e:	85 e0       	ldi	r24, 0x05	; 5
 460:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 464:	c6 fb       	bst	r28, 6
 466:	66 27       	eor	r22, r22
 468:	60 f9       	bld	r22, 0
 46a:	86 e0       	ldi	r24, 0x06	; 6
 46c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 470:	6c 2f       	mov	r22, r28
 472:	66 1f       	adc	r22, r22
 474:	66 27       	eor	r22, r22
 476:	66 1f       	adc	r22, r22
 478:	87 e0       	ldi	r24, 0x07	; 7
 47a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 47e:	8f e9       	ldi	r24, 0x9F	; 159
 480:	9f e0       	ldi	r25, 0x0F	; 15
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <LCD_SendCommand+0x6a>
 486:	00 c0       	rjmp	.+0      	; 0x488 <LCD_SendCommand+0x70>
 488:	00 00       	nop
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	83 e0       	ldi	r24, 0x03	; 3
 48e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 492:	8f e9       	ldi	r24, 0x9F	; 159
 494:	9f e0       	ldi	r25, 0x0F	; 15
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <LCD_SendCommand+0x7e>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <LCD_SendCommand+0x84>
 49c:	00 00       	nop
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 4a6:	8f e9       	ldi	r24, 0x9F	; 159
 4a8:	9f e0       	ldi	r25, 0x0F	; 15
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <LCD_SendCommand+0x92>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <LCD_SendCommand+0x98>
 4b0:	00 00       	nop
 4b2:	6c 2f       	mov	r22, r28
 4b4:	61 70       	andi	r22, 0x01	; 1
 4b6:	84 e0       	ldi	r24, 0x04	; 4
 4b8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 4bc:	c1 fb       	bst	r28, 1
 4be:	66 27       	eor	r22, r22
 4c0:	60 f9       	bld	r22, 0
 4c2:	85 e0       	ldi	r24, 0x05	; 5
 4c4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 4c8:	c2 fb       	bst	r28, 2
 4ca:	66 27       	eor	r22, r22
 4cc:	60 f9       	bld	r22, 0
 4ce:	86 e0       	ldi	r24, 0x06	; 6
 4d0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 4d4:	c3 fb       	bst	r28, 3
 4d6:	66 27       	eor	r22, r22
 4d8:	60 f9       	bld	r22, 0
 4da:	87 e0       	ldi	r24, 0x07	; 7
 4dc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 4e0:	8f e9       	ldi	r24, 0x9F	; 159
 4e2:	9f e0       	ldi	r25, 0x0F	; 15
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <LCD_SendCommand+0xcc>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <LCD_SendCommand+0xd2>
 4ea:	00 00       	nop
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	83 e0       	ldi	r24, 0x03	; 3
 4f0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 4f4:	8f e9       	ldi	r24, 0x9F	; 159
 4f6:	9f e0       	ldi	r25, 0x0F	; 15
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <LCD_SendCommand+0xe0>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <LCD_SendCommand+0xe6>
 4fe:	00 00       	nop
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <LCD_Init>:
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 0f 01 	call	0x21e	; 0x21e <DIO_SetPinDirection>
 50c:	61 e0       	ldi	r22, 0x01	; 1
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	0e 94 0f 01 	call	0x21e	; 0x21e <DIO_SetPinDirection>
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	83 e0       	ldi	r24, 0x03	; 3
 518:	0e 94 0f 01 	call	0x21e	; 0x21e <DIO_SetPinDirection>
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	84 e0       	ldi	r24, 0x04	; 4
 520:	0e 94 0f 01 	call	0x21e	; 0x21e <DIO_SetPinDirection>
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	85 e0       	ldi	r24, 0x05	; 5
 528:	0e 94 0f 01 	call	0x21e	; 0x21e <DIO_SetPinDirection>
 52c:	61 e0       	ldi	r22, 0x01	; 1
 52e:	86 e0       	ldi	r24, 0x06	; 6
 530:	0e 94 0f 01 	call	0x21e	; 0x21e <DIO_SetPinDirection>
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	87 e0       	ldi	r24, 0x07	; 7
 538:	0e 94 0f 01 	call	0x21e	; 0x21e <DIO_SetPinDirection>
 53c:	82 e0       	ldi	r24, 0x02	; 2
 53e:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_SendCommand>
 542:	88 e2       	ldi	r24, 0x28	; 40
 544:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_SendCommand>
 548:	8c e0       	ldi	r24, 0x0C	; 12
 54a:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_SendCommand>
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_SendCommand>
 554:	08 95       	ret

00000556 <LCD_DisplayChar>:
 556:	cf 93       	push	r28
 558:	c8 2f       	mov	r28, r24
 55a:	61 e0       	ldi	r22, 0x01	; 1
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 56a:	8f e9       	ldi	r24, 0x9F	; 159
 56c:	9f e0       	ldi	r25, 0x0F	; 15
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <LCD_DisplayChar+0x18>
 572:	00 c0       	rjmp	.+0      	; 0x574 <LCD_DisplayChar+0x1e>
 574:	00 00       	nop
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	83 e0       	ldi	r24, 0x03	; 3
 57a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 57e:	8f e9       	ldi	r24, 0x9F	; 159
 580:	9f e0       	ldi	r25, 0x0F	; 15
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <LCD_DisplayChar+0x2c>
 586:	00 c0       	rjmp	.+0      	; 0x588 <LCD_DisplayChar+0x32>
 588:	00 00       	nop
 58a:	c4 fb       	bst	r28, 4
 58c:	66 27       	eor	r22, r22
 58e:	60 f9       	bld	r22, 0
 590:	84 e0       	ldi	r24, 0x04	; 4
 592:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 596:	c5 fb       	bst	r28, 5
 598:	66 27       	eor	r22, r22
 59a:	60 f9       	bld	r22, 0
 59c:	85 e0       	ldi	r24, 0x05	; 5
 59e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 5a2:	c6 fb       	bst	r28, 6
 5a4:	66 27       	eor	r22, r22
 5a6:	60 f9       	bld	r22, 0
 5a8:	86 e0       	ldi	r24, 0x06	; 6
 5aa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 5ae:	6c 2f       	mov	r22, r28
 5b0:	66 1f       	adc	r22, r22
 5b2:	66 27       	eor	r22, r22
 5b4:	66 1f       	adc	r22, r22
 5b6:	87 e0       	ldi	r24, 0x07	; 7
 5b8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 5bc:	8f e9       	ldi	r24, 0x9F	; 159
 5be:	9f e0       	ldi	r25, 0x0F	; 15
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <LCD_DisplayChar+0x6a>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <LCD_DisplayChar+0x70>
 5c6:	00 00       	nop
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	83 e0       	ldi	r24, 0x03	; 3
 5cc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 5d0:	8f e9       	ldi	r24, 0x9F	; 159
 5d2:	9f e0       	ldi	r25, 0x0F	; 15
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <LCD_DisplayChar+0x7e>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <LCD_DisplayChar+0x84>
 5da:	00 00       	nop
 5dc:	61 e0       	ldi	r22, 0x01	; 1
 5de:	83 e0       	ldi	r24, 0x03	; 3
 5e0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 5e4:	8f e9       	ldi	r24, 0x9F	; 159
 5e6:	9f e0       	ldi	r25, 0x0F	; 15
 5e8:	01 97       	sbiw	r24, 0x01	; 1
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <LCD_DisplayChar+0x92>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <LCD_DisplayChar+0x98>
 5ee:	00 00       	nop
 5f0:	6c 2f       	mov	r22, r28
 5f2:	61 70       	andi	r22, 0x01	; 1
 5f4:	84 e0       	ldi	r24, 0x04	; 4
 5f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 5fa:	c1 fb       	bst	r28, 1
 5fc:	66 27       	eor	r22, r22
 5fe:	60 f9       	bld	r22, 0
 600:	85 e0       	ldi	r24, 0x05	; 5
 602:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 606:	c2 fb       	bst	r28, 2
 608:	66 27       	eor	r22, r22
 60a:	60 f9       	bld	r22, 0
 60c:	86 e0       	ldi	r24, 0x06	; 6
 60e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 612:	c3 fb       	bst	r28, 3
 614:	66 27       	eor	r22, r22
 616:	60 f9       	bld	r22, 0
 618:	87 e0       	ldi	r24, 0x07	; 7
 61a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 61e:	8f e9       	ldi	r24, 0x9F	; 159
 620:	9f e0       	ldi	r25, 0x0F	; 15
 622:	01 97       	sbiw	r24, 0x01	; 1
 624:	f1 f7       	brne	.-4      	; 0x622 <LCD_DisplayChar+0xcc>
 626:	00 c0       	rjmp	.+0      	; 0x628 <LCD_DisplayChar+0xd2>
 628:	00 00       	nop
 62a:	60 e0       	ldi	r22, 0x00	; 0
 62c:	83 e0       	ldi	r24, 0x03	; 3
 62e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 632:	8f e9       	ldi	r24, 0x9F	; 159
 634:	9f e0       	ldi	r25, 0x0F	; 15
 636:	01 97       	sbiw	r24, 0x01	; 1
 638:	f1 f7       	brne	.-4      	; 0x636 <LCD_DisplayChar+0xe0>
 63a:	00 c0       	rjmp	.+0      	; 0x63c <LCD_DisplayChar+0xe6>
 63c:	00 00       	nop
 63e:	cf 91       	pop	r28
 640:	08 95       	ret

00000642 <LCD_DisplayString>:
 642:	0f 93       	push	r16
 644:	1f 93       	push	r17
 646:	cf 93       	push	r28
 648:	fc 01       	movw	r30, r24
 64a:	80 81       	ld	r24, Z
 64c:	88 23       	and	r24, r24
 64e:	59 f0       	breq	.+22     	; 0x666 <LCD_DisplayString+0x24>
 650:	8f 01       	movw	r16, r30
 652:	c0 e0       	ldi	r28, 0x00	; 0
 654:	0e 94 ab 02 	call	0x556	; 0x556 <LCD_DisplayChar>
 658:	cf 5f       	subi	r28, 0xFF	; 255
 65a:	f8 01       	movw	r30, r16
 65c:	ec 0f       	add	r30, r28
 65e:	f1 1d       	adc	r31, r1
 660:	80 81       	ld	r24, Z
 662:	81 11       	cpse	r24, r1
 664:	f7 cf       	rjmp	.-18     	; 0x654 <LCD_DisplayString+0x12>
 666:	cf 91       	pop	r28
 668:	1f 91       	pop	r17
 66a:	0f 91       	pop	r16
 66c:	08 95       	ret

0000066e <LCD_intgerToString>:

/************************************************************************/
/*                                                                      */
/************************************************************************/
void LCD_intgerToString(int data)
{
 66e:	cf 93       	push	r28
 670:	df 93       	push	r29
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
 676:	60 97       	sbiw	r28, 0x10	; 16
 678:	0f b6       	in	r0, 0x3f	; 63
 67a:	f8 94       	cli
 67c:	de bf       	out	0x3e, r29	; 62
 67e:	0f be       	out	0x3f, r0	; 63
 680:	cd bf       	out	0x3d, r28	; 61
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* 10 for decimal */
 682:	4a e0       	ldi	r20, 0x0A	; 10
 684:	50 e0       	ldi	r21, 0x00	; 0
 686:	be 01       	movw	r22, r28
 688:	6f 5f       	subi	r22, 0xFF	; 255
 68a:	7f 4f       	sbci	r23, 0xFF	; 255
 68c:	0e 94 de 03 	call	0x7bc	; 0x7bc <itoa>
	LCD_DisplayString(buff);
 690:	ce 01       	movw	r24, r28
 692:	01 96       	adiw	r24, 0x01	; 1
 694:	0e 94 21 03 	call	0x642	; 0x642 <LCD_DisplayString>
}
 698:	60 96       	adiw	r28, 0x10	; 16
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	f8 94       	cli
 69e:	de bf       	out	0x3e, r29	; 62
 6a0:	0f be       	out	0x3f, r0	; 63
 6a2:	cd bf       	out	0x3d, r28	; 61
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	08 95       	ret

000006aa <main>:
#include "Includes/BCDSevSegment.h"
#include "Includes/UART.h"


int main(void)
{
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	cd b7       	in	r28, 0x3d	; 61
 6b0:	de b7       	in	r29, 0x3e	; 62
 6b2:	27 97       	sbiw	r28, 0x07	; 7
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	f8 94       	cli
 6b8:	de bf       	out	0x3e, r29	; 62
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	cd bf       	out	0x3d, r28	; 61
	
	
    LCD_Init();
 6be:	0e 94 82 02 	call	0x504	; 0x504 <LCD_Init>
	KeyPad_Init();
 6c2:	0e 94 94 01 	call	0x328	; 0x328 <KeyPad_Init>
	UART_Init();
 6c6:	0e 94 af 03 	call	0x75e	; 0x75e <UART_Init>
	UART_Transmit('A');
 6ca:	81 e4       	ldi	r24, 0x41	; 65
 6cc:	0e 94 bd 03 	call	0x77a	; 0x77a <UART_Transmit>
	uint8 str[] = "Yassin";
 6d0:	87 e0       	ldi	r24, 0x07	; 7
 6d2:	e9 e6       	ldi	r30, 0x69	; 105
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	de 01       	movw	r26, r28
 6d8:	11 96       	adiw	r26, 0x01	; 1
 6da:	01 90       	ld	r0, Z+
 6dc:	0d 92       	st	X+, r0
 6de:	8a 95       	dec	r24
 6e0:	e1 f7       	brne	.-8      	; 0x6da <main+0x30>
	uint16 num = 123;
	LCD_intgerToString(num);
 6e2:	8b e7       	ldi	r24, 0x7B	; 123
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0e 94 37 03 	call	0x66e	; 0x66e <LCD_intgerToString>
	UART_TransmitString(str,6);
 6ea:	66 e0       	ldi	r22, 0x06	; 6
 6ec:	ce 01       	movw	r24, r28
 6ee:	01 96       	adiw	r24, 0x01	; 1
 6f0:	0e 94 c5 03 	call	0x78a	; 0x78a <UART_TransmitString>
	LCD_DisplayChar('A');
 6f4:	81 e4       	ldi	r24, 0x41	; 65
 6f6:	0e 94 ab 02 	call	0x556	; 0x556 <LCD_DisplayChar>
	uint8 pressed_key=NUM_0;
    while (1) 
    {
		pressed_key = KeyPad_GetPressedOperands();
 6fa:	0e 94 c5 01 	call	0x38a	; 0x38a <KeyPad_GetPressedOperands>
		LCD_DisplayChar(pressed_key);
 6fe:	0e 94 ab 02 	call	0x556	; 0x556 <LCD_DisplayChar>
		LCD_DisplayChar(UART_receive());	
 702:	0e 94 c1 03 	call	0x782	; 0x782 <UART_receive>
 706:	0e 94 ab 02 	call	0x556	; 0x556 <LCD_DisplayChar>
 70a:	f7 cf       	rjmp	.-18     	; 0x6fa <main+0x50>

0000070c <__vector_10>:

/************************************************************************/
/* Interrupt to handle when compare match occur                        */
/************************************************************************/
ISR(TIMER0_COMP_vect)
{
 70c:	1f 92       	push	r1
 70e:	0f 92       	push	r0
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	0f 92       	push	r0
 714:	11 24       	eor	r1, r1
 716:	2f 93       	push	r18
 718:	3f 93       	push	r19
 71a:	4f 93       	push	r20
 71c:	5f 93       	push	r21
 71e:	6f 93       	push	r22
 720:	7f 93       	push	r23
 722:	8f 93       	push	r24
 724:	9f 93       	push	r25
 726:	af 93       	push	r26
 728:	bf 93       	push	r27
 72a:	ef 93       	push	r30
 72c:	ff 93       	push	r31
	if ( NULL_PTR != G_Timer0_Call_Back_Ptr ) /* chaeck if the pointer to function is not NULL_PTR*/
 72e:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 732:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 736:	30 97       	sbiw	r30, 0x00	; 0
 738:	09 f0       	breq	.+2      	; 0x73c <__vector_10+0x30>
	{
		G_Timer0_Call_Back_Ptr(); /* call the function in the scheduler using call-back */
 73a:	09 95       	icall
	}
}
 73c:	ff 91       	pop	r31
 73e:	ef 91       	pop	r30
 740:	bf 91       	pop	r27
 742:	af 91       	pop	r26
 744:	9f 91       	pop	r25
 746:	8f 91       	pop	r24
 748:	7f 91       	pop	r23
 74a:	6f 91       	pop	r22
 74c:	5f 91       	pop	r21
 74e:	4f 91       	pop	r20
 750:	3f 91       	pop	r19
 752:	2f 91       	pop	r18
 754:	0f 90       	pop	r0
 756:	0f be       	out	0x3f, r0	; 63
 758:	0f 90       	pop	r0
 75a:	1f 90       	pop	r1
 75c:	18 95       	reti

0000075e <UART_Init>:
		switch(U1.DataSize){
			case six_bit : UCSRC |= (TRUE<<UCSZ0);
			break ;
			case seven_bit : UCSRC |= (TRUE<<UCSZ1);
			break ;
			case eight_bit : UCSRC |= (TRUE<<UCSZ0) | (TRUE<<UCSZ1);
 75e:	80 b5       	in	r24, 0x20	; 32
 760:	86 60       	ori	r24, 0x06	; 6
 762:	80 bd       	out	0x20, r24	; 32
			break ;
			
		}
	/* using double speed transmission option  */
	if(ON == U1.SpeedMode){
	 UCSRA |= (TRUE<<U2X);
 764:	59 9a       	sbi	0x0b, 1	; 11
	}
	else{
		 UBRR = (F_CPU/(NUM_16 * U1.BaudRate))-TRUE;
	}
	 /* enabling receiving and transmitting bits */
	 UCSRB |= (TRUE<<RXEN) | (TRUE<<TXEN) ;
 766:	8a b1       	in	r24, 0x0a	; 10
 768:	88 61       	ori	r24, 0x18	; 24
 76a:	8a b9       	out	0x0a, r24	; 10
	 /* choosing 8-bit data frame by setting bit 0 & 1 */
	 UCSRC |= (TRUE<<URSEL) | (TRUE<<UCSZ0) | (TRUE<<UCSZ1) ;
 76c:	80 b5       	in	r24, 0x20	; 32
 76e:	86 68       	ori	r24, 0x86	; 134
 770:	80 bd       	out	0x20, r24	; 32
	/* entering baud rate */
	 UBRRH = UBRR >> eight_bit;
 772:	10 bc       	out	0x20, r1	; 32
	 UBRRL = UBRR ;
 774:	8f ec       	ldi	r24, 0xCF	; 207
 776:	89 b9       	out	0x09, r24	; 9
 778:	08 95       	ret

0000077a <UART_Transmit>:


void UART_Transmit(uint8 data)
{
	/* polling until flag is set then clear it by writing 1 */
	while(!GET_BIT(UCSRA,UDRE));
 77a:	5d 9b       	sbis	0x0b, 5	; 11
 77c:	fe cf       	rjmp	.-4      	; 0x77a <UART_Transmit>
	/* sending 1 byte through data register */
	UDR = data ;
 77e:	8c b9       	out	0x0c, r24	; 12
 780:	08 95       	ret

00000782 <UART_receive>:


uint8 UART_receive(void)
{
	/* polling until flag is set then clear it by writing 1 */
	while(!GET_BIT(UCSRA,RXC));
 782:	5f 9b       	sbis	0x0b, 7	; 11
 784:	fe cf       	rjmp	.-4      	; 0x782 <UART_receive>
	/* receiving 1 byte through data register */
	 return UDR; 
 786:	8c b1       	in	r24, 0x0c	; 12
	
}
 788:	08 95       	ret

0000078a <UART_TransmitString>:
/*Function outputs :- N/A                                                                         */
/**************************************************************************************************/


void UART_TransmitString(uint8 *String,uint8 size)
{
 78a:	0f 93       	push	r16
 78c:	1f 93       	push	r17
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
	uint8 count = FALSE; /* counting variable of pointer */
	/* sending data byte by byte till null character */
	for(count=FALSE;count<size;count++)
 792:	66 23       	and	r22, r22
 794:	71 f0       	breq	.+28     	; 0x7b2 <UART_TransmitString+0x28>
 796:	ec 01       	movw	r28, r24
 798:	61 50       	subi	r22, 0x01	; 1
 79a:	06 2f       	mov	r16, r22
 79c:	10 e0       	ldi	r17, 0x00	; 0
 79e:	0f 5f       	subi	r16, 0xFF	; 255
 7a0:	1f 4f       	sbci	r17, 0xFF	; 255
 7a2:	08 0f       	add	r16, r24
 7a4:	19 1f       	adc	r17, r25
	{
		UART_Transmit(String[count]);
 7a6:	89 91       	ld	r24, Y+
 7a8:	0e 94 bd 03 	call	0x77a	; 0x77a <UART_Transmit>

void UART_TransmitString(uint8 *String,uint8 size)
{
	uint8 count = FALSE; /* counting variable of pointer */
	/* sending data byte by byte till null character */
	for(count=FALSE;count<size;count++)
 7ac:	c0 17       	cp	r28, r16
 7ae:	d1 07       	cpc	r29, r17
 7b0:	d1 f7       	brne	.-12     	; 0x7a6 <UART_TransmitString+0x1c>
	{
		UART_Transmit(String[count]);
	}
	
}
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	1f 91       	pop	r17
 7b8:	0f 91       	pop	r16
 7ba:	08 95       	ret

000007bc <itoa>:
 7bc:	45 32       	cpi	r20, 0x25	; 37
 7be:	51 05       	cpc	r21, r1
 7c0:	20 f4       	brcc	.+8      	; 0x7ca <itoa+0xe>
 7c2:	42 30       	cpi	r20, 0x02	; 2
 7c4:	10 f0       	brcs	.+4      	; 0x7ca <itoa+0xe>
 7c6:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__itoa_ncheck>
 7ca:	fb 01       	movw	r30, r22
 7cc:	10 82       	st	Z, r1
 7ce:	cb 01       	movw	r24, r22
 7d0:	08 95       	ret

000007d2 <__itoa_ncheck>:
 7d2:	bb 27       	eor	r27, r27
 7d4:	4a 30       	cpi	r20, 0x0A	; 10
 7d6:	31 f4       	brne	.+12     	; 0x7e4 <__itoa_ncheck+0x12>
 7d8:	99 23       	and	r25, r25
 7da:	22 f4       	brpl	.+8      	; 0x7e4 <__itoa_ncheck+0x12>
 7dc:	bd e2       	ldi	r27, 0x2D	; 45
 7de:	90 95       	com	r25
 7e0:	81 95       	neg	r24
 7e2:	9f 4f       	sbci	r25, 0xFF	; 255
 7e4:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__utoa_common>

000007e8 <__utoa_ncheck>:
 7e8:	bb 27       	eor	r27, r27

000007ea <__utoa_common>:
 7ea:	fb 01       	movw	r30, r22
 7ec:	55 27       	eor	r21, r21
 7ee:	aa 27       	eor	r26, r26
 7f0:	88 0f       	add	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	aa 1f       	adc	r26, r26
 7f6:	a4 17       	cp	r26, r20
 7f8:	10 f0       	brcs	.+4      	; 0x7fe <__utoa_common+0x14>
 7fa:	a4 1b       	sub	r26, r20
 7fc:	83 95       	inc	r24
 7fe:	50 51       	subi	r21, 0x10	; 16
 800:	b9 f7       	brne	.-18     	; 0x7f0 <__utoa_common+0x6>
 802:	a0 5d       	subi	r26, 0xD0	; 208
 804:	aa 33       	cpi	r26, 0x3A	; 58
 806:	08 f0       	brcs	.+2      	; 0x80a <__utoa_common+0x20>
 808:	a9 5d       	subi	r26, 0xD9	; 217
 80a:	a1 93       	st	Z+, r26
 80c:	00 97       	sbiw	r24, 0x00	; 0
 80e:	79 f7       	brne	.-34     	; 0x7ee <__utoa_common+0x4>
 810:	b1 11       	cpse	r27, r1
 812:	b1 93       	st	Z+, r27
 814:	11 92       	st	Z+, r1
 816:	cb 01       	movw	r24, r22
 818:	0c 94 0e 04 	jmp	0x81c	; 0x81c <strrev>

0000081c <strrev>:
 81c:	dc 01       	movw	r26, r24
 81e:	fc 01       	movw	r30, r24
 820:	67 2f       	mov	r22, r23
 822:	71 91       	ld	r23, Z+
 824:	77 23       	and	r23, r23
 826:	e1 f7       	brne	.-8      	; 0x820 <strrev+0x4>
 828:	32 97       	sbiw	r30, 0x02	; 2
 82a:	04 c0       	rjmp	.+8      	; 0x834 <strrev+0x18>
 82c:	7c 91       	ld	r23, X
 82e:	6d 93       	st	X+, r22
 830:	70 83       	st	Z, r23
 832:	62 91       	ld	r22, -Z
 834:	ae 17       	cp	r26, r30
 836:	bf 07       	cpc	r27, r31
 838:	c8 f3       	brcs	.-14     	; 0x82c <strrev+0x10>
 83a:	08 95       	ret

0000083c <_exit>:
 83c:	f8 94       	cli

0000083e <__stop_program>:
 83e:	ff cf       	rjmp	.-2      	; 0x83e <__stop_program>
