
Timer0-int.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000604  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000678  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800060  00800060  00000678  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f6f  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000983  00000000  00000000  00001763  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000783  00000000  00000000  000020e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  0000286c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000528  00000000  00000000  00002a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f7  00000000  00000000  00002fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000036a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 37       	cpi	r26, 0x7A	; 122
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8a 01 	call	0x314	; 0x314 <main>
  74:	0c 94 00 03 	jmp	0x600	; 0x600 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_WritePin>:
		else if((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
		{
			return GET_BIT(PIND,(PinNum-NUM_24));
		}
	return NUM_0;
}
  7c:	88 30       	cpi	r24, 0x08	; 8
  7e:	e8 f4       	brcc	.+58     	; 0xba <DIO_WritePin+0x3e>
  80:	61 30       	cpi	r22, 0x01	; 1
  82:	69 f4       	brne	.+26     	; 0x9e <DIO_WritePin+0x22>
  84:	4b b3       	in	r20, 0x1b	; 27
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	b9 01       	movw	r22, r18
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_WritePin+0x16>
  8e:	66 0f       	add	r22, r22
  90:	77 1f       	adc	r23, r23
  92:	8a 95       	dec	r24
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_WritePin+0x12>
  96:	cb 01       	movw	r24, r22
  98:	84 2b       	or	r24, r20
  9a:	8b bb       	out	0x1b, r24	; 27
  9c:	08 95       	ret
  9e:	4b b3       	in	r20, 0x1b	; 27
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	b9 01       	movw	r22, r18
  a6:	02 c0       	rjmp	.+4      	; 0xac <DIO_WritePin+0x30>
  a8:	66 0f       	add	r22, r22
  aa:	77 1f       	adc	r23, r23
  ac:	8a 95       	dec	r24
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <DIO_WritePin+0x2c>
  b0:	cb 01       	movw	r24, r22
  b2:	80 95       	com	r24
  b4:	84 23       	and	r24, r20
  b6:	8b bb       	out	0x1b, r24	; 27
  b8:	08 95       	ret
  ba:	98 ef       	ldi	r25, 0xF8	; 248
  bc:	98 0f       	add	r25, r24
  be:	98 30       	cpi	r25, 0x08	; 8
  c0:	f0 f4       	brcc	.+60     	; 0xfe <DIO_WritePin+0x82>
  c2:	61 30       	cpi	r22, 0x01	; 1
  c4:	69 f4       	brne	.+26     	; 0xe0 <DIO_WritePin+0x64>
  c6:	48 b3       	in	r20, 0x18	; 24
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	b9 01       	movw	r22, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_WritePin+0x58>
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	9a 95       	dec	r25
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_WritePin+0x54>
  d8:	cb 01       	movw	r24, r22
  da:	84 2b       	or	r24, r20
  dc:	88 bb       	out	0x18, r24	; 24
  de:	08 95       	ret
  e0:	48 b3       	in	r20, 0x18	; 24
  e2:	88 50       	subi	r24, 0x08	; 8
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	b9 01       	movw	r22, r18
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_WritePin+0x74>
  ec:	66 0f       	add	r22, r22
  ee:	77 1f       	adc	r23, r23
  f0:	8a 95       	dec	r24
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_WritePin+0x70>
  f4:	cb 01       	movw	r24, r22
  f6:	80 95       	com	r24
  f8:	84 23       	and	r24, r20
  fa:	88 bb       	out	0x18, r24	; 24
  fc:	08 95       	ret
  fe:	90 ef       	ldi	r25, 0xF0	; 240
 100:	98 0f       	add	r25, r24
 102:	98 30       	cpi	r25, 0x08	; 8
 104:	f0 f4       	brcc	.+60     	; 0x142 <DIO_WritePin+0xc6>
 106:	61 30       	cpi	r22, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_WritePin+0xa8>
 10a:	45 b3       	in	r20, 0x15	; 21
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	b9 01       	movw	r22, r18
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_WritePin+0x9c>
 114:	66 0f       	add	r22, r22
 116:	77 1f       	adc	r23, r23
 118:	9a 95       	dec	r25
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_WritePin+0x98>
 11c:	cb 01       	movw	r24, r22
 11e:	84 2b       	or	r24, r20
 120:	85 bb       	out	0x15, r24	; 21
 122:	08 95       	ret
 124:	45 b3       	in	r20, 0x15	; 21
 126:	80 51       	subi	r24, 0x10	; 16
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	b9 01       	movw	r22, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_WritePin+0xb8>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	8a 95       	dec	r24
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_WritePin+0xb4>
 138:	cb 01       	movw	r24, r22
 13a:	80 95       	com	r24
 13c:	84 23       	and	r24, r20
 13e:	85 bb       	out	0x15, r24	; 21
 140:	08 95       	ret
 142:	98 ee       	ldi	r25, 0xE8	; 232
 144:	98 0f       	add	r25, r24
 146:	98 30       	cpi	r25, 0x08	; 8
 148:	e8 f4       	brcc	.+58     	; 0x184 <DIO_WritePin+0x108>
 14a:	61 30       	cpi	r22, 0x01	; 1
 14c:	69 f4       	brne	.+26     	; 0x168 <DIO_WritePin+0xec>
 14e:	42 b3       	in	r20, 0x12	; 18
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	b9 01       	movw	r22, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_WritePin+0xe0>
 158:	66 0f       	add	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	9a 95       	dec	r25
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_WritePin+0xdc>
 160:	cb 01       	movw	r24, r22
 162:	84 2b       	or	r24, r20
 164:	82 bb       	out	0x12, r24	; 18
 166:	08 95       	ret
 168:	42 b3       	in	r20, 0x12	; 18
 16a:	88 51       	subi	r24, 0x18	; 24
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_WritePin+0xfc>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_WritePin+0xf8>
 17c:	cb 01       	movw	r24, r22
 17e:	80 95       	com	r24
 180:	84 23       	and	r24, r20
 182:	82 bb       	out	0x12, r24	; 18
 184:	08 95       	ret

00000186 <DIO_SetPinDirection>:
/* Return: return void		                                            */
/* Description: config the pin to be input or output	                */
/************************************************************************/
void DIO_SetPinDirection(uint8 PinNum, uint8 PinValue)
{
	if((PinNum >= NUM_0) && (PinNum <NUM_8)) /*check if Pins in PORTA*/
 186:	88 30       	cpi	r24, 0x08	; 8
 188:	e8 f4       	brcc	.+58     	; 0x1c4 <DIO_SetPinDirection+0x3e>
	{
		if (PinValue == NUM_1) /* Check Pin Value if OUT to set bit or IN to clear bit */
 18a:	61 30       	cpi	r22, 0x01	; 1
 18c:	69 f4       	brne	.+26     	; 0x1a8 <DIO_SetPinDirection+0x22>
		{
			SET_BIT(DDRA,(PinNum));
 18e:	4a b3       	in	r20, 0x1a	; 26
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	b9 01       	movw	r22, r18
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_SetPinDirection+0x16>
 198:	66 0f       	add	r22, r22
 19a:	77 1f       	adc	r23, r23
 19c:	8a 95       	dec	r24
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_SetPinDirection+0x12>
 1a0:	cb 01       	movw	r24, r22
 1a2:	84 2b       	or	r24, r20
 1a4:	8a bb       	out	0x1a, r24	; 26
 1a6:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,(PinNum));
 1a8:	4a b3       	in	r20, 0x1a	; 26
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	b9 01       	movw	r22, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_SetPinDirection+0x30>
 1b2:	66 0f       	add	r22, r22
 1b4:	77 1f       	adc	r23, r23
 1b6:	8a 95       	dec	r24
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_SetPinDirection+0x2c>
 1ba:	cb 01       	movw	r24, r22
 1bc:	80 95       	com	r24
 1be:	84 23       	and	r24, r20
 1c0:	8a bb       	out	0x1a, r24	; 26
 1c2:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_8) && (PinNum < NUM_16)) /*check if Pins in PORTB*/
 1c4:	98 ef       	ldi	r25, 0xF8	; 248
 1c6:	98 0f       	add	r25, r24
 1c8:	98 30       	cpi	r25, 0x08	; 8
 1ca:	f0 f4       	brcc	.+60     	; 0x208 <DIO_SetPinDirection+0x82>
	{
		if (PinValue == NUM_1)
 1cc:	61 30       	cpi	r22, 0x01	; 1
 1ce:	69 f4       	brne	.+26     	; 0x1ea <DIO_SetPinDirection+0x64>
		{
			SET_BIT(DDRB,(PinNum - NUM_8));
 1d0:	47 b3       	in	r20, 0x17	; 23
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	b9 01       	movw	r22, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_SetPinDirection+0x58>
 1da:	66 0f       	add	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	9a 95       	dec	r25
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_SetPinDirection+0x54>
 1e2:	cb 01       	movw	r24, r22
 1e4:	84 2b       	or	r24, r20
 1e6:	87 bb       	out	0x17, r24	; 23
 1e8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,(PinNum - NUM_8));
 1ea:	47 b3       	in	r20, 0x17	; 23
 1ec:	88 50       	subi	r24, 0x08	; 8
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	b9 01       	movw	r22, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_SetPinDirection+0x74>
 1f6:	66 0f       	add	r22, r22
 1f8:	77 1f       	adc	r23, r23
 1fa:	8a 95       	dec	r24
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_SetPinDirection+0x70>
 1fe:	cb 01       	movw	r24, r22
 200:	80 95       	com	r24
 202:	84 23       	and	r24, r20
 204:	87 bb       	out	0x17, r24	; 23
 206:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_16) && (PinNum < NUM_24)) /*check if Pins in PORTC*/
 208:	90 ef       	ldi	r25, 0xF0	; 240
 20a:	98 0f       	add	r25, r24
 20c:	98 30       	cpi	r25, 0x08	; 8
 20e:	f0 f4       	brcc	.+60     	; 0x24c <DIO_SetPinDirection+0xc6>
	{
		if (PinValue == NUM_1)
 210:	61 30       	cpi	r22, 0x01	; 1
 212:	69 f4       	brne	.+26     	; 0x22e <DIO_SetPinDirection+0xa8>
		{
			SET_BIT(DDRC,(PinNum - NUM_16));
 214:	44 b3       	in	r20, 0x14	; 20
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	b9 01       	movw	r22, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_SetPinDirection+0x9c>
 21e:	66 0f       	add	r22, r22
 220:	77 1f       	adc	r23, r23
 222:	9a 95       	dec	r25
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_SetPinDirection+0x98>
 226:	cb 01       	movw	r24, r22
 228:	84 2b       	or	r24, r20
 22a:	84 bb       	out	0x14, r24	; 20
 22c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,(PinNum - NUM_16));
 22e:	44 b3       	in	r20, 0x14	; 20
 230:	80 51       	subi	r24, 0x10	; 16
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	b9 01       	movw	r22, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_SetPinDirection+0xb8>
 23a:	66 0f       	add	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	8a 95       	dec	r24
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_SetPinDirection+0xb4>
 242:	cb 01       	movw	r24, r22
 244:	80 95       	com	r24
 246:	84 23       	and	r24, r20
 248:	84 bb       	out	0x14, r24	; 20
 24a:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
 24c:	98 ee       	ldi	r25, 0xE8	; 232
 24e:	98 0f       	add	r25, r24
 250:	98 30       	cpi	r25, 0x08	; 8
 252:	e8 f4       	brcc	.+58     	; 0x28e <DIO_SetPinDirection+0x108>
	{
		if (PinValue == NUM_1)
 254:	61 30       	cpi	r22, 0x01	; 1
 256:	69 f4       	brne	.+26     	; 0x272 <DIO_SetPinDirection+0xec>
		{
			SET_BIT(DDRD,(PinNum - NUM_24));
 258:	41 b3       	in	r20, 0x11	; 17
 25a:	21 e0       	ldi	r18, 0x01	; 1
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	b9 01       	movw	r22, r18
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_SetPinDirection+0xe0>
 262:	66 0f       	add	r22, r22
 264:	77 1f       	adc	r23, r23
 266:	9a 95       	dec	r25
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_SetPinDirection+0xdc>
 26a:	cb 01       	movw	r24, r22
 26c:	84 2b       	or	r24, r20
 26e:	81 bb       	out	0x11, r24	; 17
 270:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,(PinNum - NUM_24));
 272:	41 b3       	in	r20, 0x11	; 17
 274:	88 51       	subi	r24, 0x18	; 24
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	b9 01       	movw	r22, r18
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_SetPinDirection+0xfc>
 27e:	66 0f       	add	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	8a 95       	dec	r24
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_SetPinDirection+0xf8>
 286:	cb 01       	movw	r24, r22
 288:	80 95       	com	r24
 28a:	84 23       	and	r24, r20
 28c:	81 bb       	out	0x11, r24	; 17
 28e:	08 95       	ret

00000290 <DIO_TogglePin>:
/* Return: void							                                */
/* Description: return pin status			      		                */
/************************************************************************/
void DIO_TogglePin(uint8 PinNum)
{
	if((PinNum >= NUM_0) && (PinNum < NUM_8)) /*check if Pins in PORTA*/
 290:	88 30       	cpi	r24, 0x08	; 8
 292:	68 f4       	brcc	.+26     	; 0x2ae <DIO_TogglePin+0x1e>
	{
		TOGGLE_BIT(PORTA,PinNum); /* Return Bit status*/
 294:	4b b3       	in	r20, 0x1b	; 27
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	b9 01       	movw	r22, r18
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_TogglePin+0x12>
 29e:	66 0f       	add	r22, r22
 2a0:	77 1f       	adc	r23, r23
 2a2:	8a 95       	dec	r24
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_TogglePin+0xe>
 2a6:	cb 01       	movw	r24, r22
 2a8:	84 27       	eor	r24, r20
 2aa:	8b bb       	out	0x1b, r24	; 27
 2ac:	08 95       	ret
	}
	else if((PinNum >= NUM_8) && (PinNum < NUM_16)) /*check if Pins in PORTB*/
 2ae:	98 ef       	ldi	r25, 0xF8	; 248
 2b0:	98 0f       	add	r25, r24
 2b2:	98 30       	cpi	r25, 0x08	; 8
 2b4:	68 f4       	brcc	.+26     	; 0x2d0 <DIO_TogglePin+0x40>
	{
		TOGGLE_BIT(PORTB,(PinNum-NUM_8));
 2b6:	48 b3       	in	r20, 0x18	; 24
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	b9 01       	movw	r22, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_TogglePin+0x34>
 2c0:	66 0f       	add	r22, r22
 2c2:	77 1f       	adc	r23, r23
 2c4:	9a 95       	dec	r25
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_TogglePin+0x30>
 2c8:	cb 01       	movw	r24, r22
 2ca:	84 27       	eor	r24, r20
 2cc:	88 bb       	out	0x18, r24	; 24
 2ce:	08 95       	ret
	}
	else if((PinNum >= NUM_16) && (PinNum < NUM_24)) /*check if Pins in PORTC*/
 2d0:	90 ef       	ldi	r25, 0xF0	; 240
 2d2:	98 0f       	add	r25, r24
 2d4:	98 30       	cpi	r25, 0x08	; 8
 2d6:	68 f4       	brcc	.+26     	; 0x2f2 <DIO_TogglePin+0x62>
	{
		TOGGLE_BIT(PORTC,(PinNum-NUM_16));
 2d8:	45 b3       	in	r20, 0x15	; 21
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	b9 01       	movw	r22, r18
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_TogglePin+0x56>
 2e2:	66 0f       	add	r22, r22
 2e4:	77 1f       	adc	r23, r23
 2e6:	9a 95       	dec	r25
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_TogglePin+0x52>
 2ea:	cb 01       	movw	r24, r22
 2ec:	84 27       	eor	r24, r20
 2ee:	85 bb       	out	0x15, r24	; 21
 2f0:	08 95       	ret
	}
	else if((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
 2f2:	98 ee       	ldi	r25, 0xE8	; 232
 2f4:	98 0f       	add	r25, r24
 2f6:	98 30       	cpi	r25, 0x08	; 8
 2f8:	60 f4       	brcc	.+24     	; 0x312 <DIO_TogglePin+0x82>
	{
		TOGGLE_BIT(PORTD,(PinNum-NUM_24));
 2fa:	42 b3       	in	r20, 0x12	; 18
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	b9 01       	movw	r22, r18
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_TogglePin+0x78>
 304:	66 0f       	add	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	9a 95       	dec	r25
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_TogglePin+0x74>
 30c:	cb 01       	movw	r24, r22
 30e:	84 27       	eor	r24, r20
 310:	82 bb       	out	0x12, r24	; 18
 312:	08 95       	ret

00000314 <main>:
#include "Includes/OS.h"


int main(void)
{
    DIO_SetPinDirection(LED1,OUT); /* Set direction of LED 1 */
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	8d e0       	ldi	r24, 0x0D	; 13
 318:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPinDirection>
	DIO_SetPinDirection(LED2,OUT); /* Set direction of LED 2 */
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	8e e0       	ldi	r24, 0x0E	; 14
 320:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPinDirection>
	DIO_SetPinDirection(LED3,OUT); /* Set direction of LED 3 */
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	8f e0       	ldi	r24, 0x0F	; 15
 328:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPinDirection>
	DIO_SetPinDirection(LED0,OUT); /* Set direction of LED 4 */
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	8c e0       	ldi	r24, 0x0C	; 12
 330:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPinDirection>
	/************************************************************************/
	/* Add Tasks to queue                                                   */
	/************************************************************************/
	if (Scheduler_AddTask(task1,DELAY_SECOND,NUM_2)) /* add task 1*/
 334:	42 e0       	ldi	r20, 0x02	; 2
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	60 ed       	ldi	r22, 0xD0	; 208
 33a:	77 e0       	ldi	r23, 0x07	; 7
 33c:	85 e9       	ldi	r24, 0x95	; 149
 33e:	92 e0       	ldi	r25, 0x02	; 2
 340:	0e 94 1d 02 	call	0x43a	; 0x43a <Scheduler_AddTask>
 344:	89 2b       	or	r24, r25
 346:	21 f4       	brne	.+8      	; 0x350 <main+0x3c>
	{
		
	}else
	{
		DIO_WritePin(LED3,HIGH);/* if task not added then there is an error here and led4 will blink */
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	8f e0       	ldi	r24, 0x0F	; 15
 34c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	}
	if (Scheduler_AddTask(task2,DELAY_2_SECOND,NUM_1)) /* add task 2*/
 350:	41 e0       	ldi	r20, 0x01	; 1
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	60 ea       	ldi	r22, 0xA0	; 160
 356:	7f e0       	ldi	r23, 0x0F	; 15
 358:	89 e9       	ldi	r24, 0x99	; 153
 35a:	92 e0       	ldi	r25, 0x02	; 2
 35c:	0e 94 1d 02 	call	0x43a	; 0x43a <Scheduler_AddTask>
 360:	89 2b       	or	r24, r25
 362:	21 f4       	brne	.+8      	; 0x36c <main+0x58>
	{
		
	}else
	{
		DIO_WritePin(LED3,HIGH);/* if task not added then there is an error here and led4 will blink */
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	8f e0       	ldi	r24, 0x0F	; 15
 368:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	}
	
	if (Scheduler_AddTask(task3,DELAY_3_SECOND,NUM_0)) /* add task 3*/
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	50 e0       	ldi	r21, 0x00	; 0
 370:	60 e7       	ldi	r22, 0x70	; 112
 372:	77 e1       	ldi	r23, 0x17	; 23
 374:	8d e9       	ldi	r24, 0x9D	; 157
 376:	92 e0       	ldi	r25, 0x02	; 2
 378:	0e 94 1d 02 	call	0x43a	; 0x43a <Scheduler_AddTask>
 37c:	89 2b       	or	r24, r25
 37e:	21 f4       	brne	.+8      	; 0x388 <main+0x74>
	{
		
	}else
	{
		DIO_WritePin(LED3,HIGH);/* if task not added then there is an error here and led4 will blink */
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	8f e0       	ldi	r24, 0x0F	; 15
 384:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	}
	
	if (Scheduler_AddTask(task4,DELAY_750_MS,NUM_3)) /* add task 4*/
 388:	43 e0       	ldi	r20, 0x03	; 3
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	6c ed       	ldi	r22, 0xDC	; 220
 38e:	75 e0       	ldi	r23, 0x05	; 5
 390:	81 ea       	ldi	r24, 0xA1	; 161
 392:	92 e0       	ldi	r25, 0x02	; 2
 394:	0e 94 1d 02 	call	0x43a	; 0x43a <Scheduler_AddTask>
 398:	89 2b       	or	r24, r25
 39a:	21 f4       	brne	.+8      	; 0x3a4 <main+0x90>
	{
		
	}else
	{
		DIO_WritePin(LED3,HIGH);/* if task not added then there is an error here and led4 will blink */
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	8f e0       	ldi	r24, 0x0F	; 15
 3a0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	}
	/************************************************************************/
	/* Init Scheduler                                                       */
	/************************************************************************/
	SchedulerInit();
 3a4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <SchedulerInit>
	
	/************************************************************************/
	/* Call Scheduler                                                       */
	/************************************************************************/
	SchedulerStart();
 3a8:	0e 94 0d 02 	call	0x41a	; 0x41a <SchedulerStart>
 3ac:	ff cf       	rjmp	.-2      	; 0x3ac <main+0x98>

000003ae <Timer0_NewTimerTick>:
/* Description: Function called by the Timer Driver in the MCAL layer	*/
/*				using the call back pointer								*/
/************************************************************************/
void Timer0_NewTimerTick(void)
{
	NewTickFlag = NUM_1; /* Set Flag that interrupt timer compare match OCR*/
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <NewTickFlag>
 3b4:	08 95       	ret

000003b6 <SchedulerInit>:
/* return: void,                                                        */
/* Description: called in main 										    */
/************************************************************************/
void SchedulerInit(void)
{
	Interrupts_init(); /* initialize global interrupts */
 3b6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Interrupts_init>
	TimerInit();		/* init timer */
 3ba:	0e 94 aa 02 	call	0x554	; 0x554 <TimerInit>
	/************************************************************************/
	/* Set the Call Back function call to Scheduler_New_Timer_Tick			*/
	/* this function will be called every Timer0 Compare Interrupt(ms)		*/
	/************************************************************************/ 
	Timer0_SetCallBack(Timer0_NewTimerTick);
 3be:	87 ed       	ldi	r24, 0xD7	; 215
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	0e 94 a5 02 	call	0x54a	; 0x54a <Timer0_SetCallBack>
 3c6:	08 95       	ret

000003c8 <prefilled>:
/* @param: arr_size														*/
/* return: void,                                                        */
/* Description: run tasks												*/
/************************************************************************/
void prefilled(vTask TaskArr[], uint8 arr_size)
{
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
	for (uint8 i =NUM_0; i<arr_size; i++) /* for loop to check for all tasks in the array */
 3d4:	66 23       	and	r22, r22
 3d6:	d1 f0       	breq	.+52     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3d8:	06 2f       	mov	r16, r22
 3da:	c8 2f       	mov	r28, r24
 3dc:	d9 2f       	mov	r29, r25
 3de:	10 e0       	ldi	r17, 0x00	; 0
 3e0:	7e 01       	movw	r14, r28
	{	/* if the remaining task in task is zero then do the task now and load the periodicity in remaining again */
		if (TaskArr[i].remaining_ticks == NUM_0) 
 3e2:	8c 81       	ldd	r24, Y+4	; 0x04
 3e4:	9d 81       	ldd	r25, Y+5	; 0x05
 3e6:	89 2b       	or	r24, r25
 3e8:	39 f4       	brne	.+14     	; 0x3f8 <prefilled+0x30>
		{
			TaskArr[i].task();/* call the task */
 3ea:	e8 81       	ld	r30, Y
 3ec:	f9 81       	ldd	r31, Y+1	; 0x01
 3ee:	09 95       	icall
			TaskArr[i].remaining_ticks = TaskArr[i].task_periodicity; /*load the periodicity in remaining again to do the task again */
 3f0:	8a 81       	ldd	r24, Y+2	; 0x02
 3f2:	9b 81       	ldd	r25, Y+3	; 0x03
 3f4:	9d 83       	std	Y+5, r25	; 0x05
 3f6:	8c 83       	std	Y+4, r24	; 0x04
		}
		TaskArr[i].remaining_ticks--; /* decrement the remaining ticks */
 3f8:	f7 01       	movw	r30, r14
 3fa:	84 81       	ldd	r24, Z+4	; 0x04
 3fc:	95 81       	ldd	r25, Z+5	; 0x05
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	95 83       	std	Z+5, r25	; 0x05
 402:	84 83       	std	Z+4, r24	; 0x04
/* return: void,                                                        */
/* Description: run tasks												*/
/************************************************************************/
void prefilled(vTask TaskArr[], uint8 arr_size)
{
	for (uint8 i =NUM_0; i<arr_size; i++) /* for loop to check for all tasks in the array */
 404:	1f 5f       	subi	r17, 0xFF	; 255
 406:	27 96       	adiw	r28, 0x07	; 7
 408:	01 13       	cpse	r16, r17
 40a:	ea cf       	rjmp	.-44     	; 0x3e0 <prefilled+0x18>
			TaskArr[i].task();/* call the task */
			TaskArr[i].remaining_ticks = TaskArr[i].task_periodicity; /*load the periodicity in remaining again to do the task again */
		}
		TaskArr[i].remaining_ticks--; /* decrement the remaining ticks */
	}
}
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	ff 90       	pop	r15
 416:	ef 90       	pop	r14
 418:	08 95       	ret

0000041a <SchedulerStart>:
/* return: void,														*/
/* Description: start the timer and scheduling							*/
/************************************************************************/
void SchedulerStart(void)
{
		TimerStart(OS_TICK_INTERVAL_MSEC); /* start timer */
 41a:	8c e7       	ldi	r24, 0x7C	; 124
 41c:	0e 94 c0 02 	call	0x580	; 0x580 <TimerStart>
		while(NUM_1)
		{
			if(NewTickFlag == NUM_1) /* check if flag is set */
 420:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <NewTickFlag>
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	e1 f7       	brne	.-8      	; 0x420 <SchedulerStart+0x6>
			{
				prefilled(TaskArr,TasksCount); /* call the function that do task */
 428:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <TasksCount>
 42c:	85 e6       	ldi	r24, 0x65	; 101
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <prefilled>
				NewTickFlag = NUM_0 ; /* clear the flag */
 434:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <NewTickFlag>
 438:	f3 cf       	rjmp	.-26     	; 0x420 <SchedulerStart+0x6>

0000043a <Scheduler_AddTask>:
/* @param: task_periodicity,		                                    */
/* return: true or false,                                               */
/* Description: Add task to array of pointer to tasks                   */
/************************************************************************/
uint8 Scheduler_AddTask(tasktype task, uint16 task_periodicity, uint8 task_priority)
{
 43a:	ff 92       	push	r15
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	8c 01       	movw	r16, r24
	static uint8 task_added = NUM_0; /* static local variable to maintain its value to check if a new task added */
	if (task_added < NUMBER_OF_TASKS ) /* check if added tasks is less than the max number of tasks */
 446:	f0 90 60 00 	lds	r15, 0x0060	; 0x800060 <_edata>
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	8f 15       	cp	r24, r15
 44e:	08 f4       	brcc	.+2      	; 0x452 <Scheduler_AddTask+0x18>
 450:	65 c0       	rjmp	.+202    	; 0x51c <Scheduler_AddTask+0xe2>
	{
		for (uint8 task_index = NUM_0; task_index <= TasksCount; task_index++)
 452:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <TasksCount>
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	49 c0       	rjmp	.+146    	; 0x4ec <Scheduler_AddTask+0xb2>
		{
			for(uint8 task_index_j = task_index; task_index_j <= TasksCount; task_index_j++)
 45a:	95 2f       	mov	r25, r21
			if (TaskArr[task_index_j].task_periodicity > TaskArr[task_index_j + NUM_1].task_periodicity )
 45c:	29 2f       	mov	r18, r25
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	e9 01       	movw	r28, r18
 462:	21 96       	adiw	r28, 0x01	; 1
 464:	d9 01       	movw	r26, r18
 466:	aa 0f       	add	r26, r26
 468:	bb 1f       	adc	r27, r27
 46a:	aa 0f       	add	r26, r26
 46c:	bb 1f       	adc	r27, r27
 46e:	aa 0f       	add	r26, r26
 470:	bb 1f       	adc	r27, r27
 472:	a2 1b       	sub	r26, r18
 474:	b3 0b       	sbc	r27, r19
 476:	ab 59       	subi	r26, 0x9B	; 155
 478:	bf 4f       	sbci	r27, 0xFF	; 255
 47a:	fe 01       	movw	r30, r28
 47c:	ee 0f       	add	r30, r30
 47e:	ff 1f       	adc	r31, r31
 480:	ee 0f       	add	r30, r30
 482:	ff 1f       	adc	r31, r31
 484:	ee 0f       	add	r30, r30
 486:	ff 1f       	adc	r31, r31
 488:	ec 1b       	sub	r30, r28
 48a:	fd 0b       	sbc	r31, r29
 48c:	eb 59       	subi	r30, 0x9B	; 155
 48e:	ff 4f       	sbci	r31, 0xFF	; 255
 490:	12 96       	adiw	r26, 0x02	; 2
 492:	0d 90       	ld	r0, X+
 494:	bc 91       	ld	r27, X
 496:	a0 2d       	mov	r26, r0
 498:	02 80       	ldd	r0, Z+2	; 0x02
 49a:	f3 81       	ldd	r31, Z+3	; 0x03
 49c:	e0 2d       	mov	r30, r0
 49e:	ea 17       	cp	r30, r26
 4a0:	fb 07       	cpc	r31, r27
 4a2:	e8 f4       	brcc	.+58     	; 0x4de <Scheduler_AddTask+0xa4>
			{
				uint8 Temp_taskPriority	= TaskArr[task_index_j + NUM_1].task_Priority;
 4a4:	de 01       	movw	r26, r28
 4a6:	aa 0f       	add	r26, r26
 4a8:	bb 1f       	adc	r27, r27
 4aa:	aa 0f       	add	r26, r26
 4ac:	bb 1f       	adc	r27, r27
 4ae:	aa 0f       	add	r26, r26
 4b0:	bb 1f       	adc	r27, r27
 4b2:	ac 1b       	sub	r26, r28
 4b4:	bd 0b       	sbc	r27, r29
 4b6:	ab 59       	subi	r26, 0x9B	; 155
 4b8:	bf 4f       	sbci	r27, 0xFF	; 255
 4ba:	16 96       	adiw	r26, 0x06	; 6
 4bc:	cc 91       	ld	r28, X
 4be:	16 97       	sbiw	r26, 0x06	; 6
				TaskArr[task_index_j + NUM_1].task_Priority = TaskArr[task_index_j].task_Priority;
 4c0:	f9 01       	movw	r30, r18
 4c2:	ee 0f       	add	r30, r30
 4c4:	ff 1f       	adc	r31, r31
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	ee 0f       	add	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	e2 1b       	sub	r30, r18
 4d0:	f3 0b       	sbc	r31, r19
 4d2:	eb 59       	subi	r30, 0x9B	; 155
 4d4:	ff 4f       	sbci	r31, 0xFF	; 255
 4d6:	26 81       	ldd	r18, Z+6	; 0x06
 4d8:	16 96       	adiw	r26, 0x06	; 6
 4da:	2c 93       	st	X, r18
				TaskArr[task_index_j].task_Priority = Temp_taskPriority;
 4dc:	c6 83       	std	Z+6, r28	; 0x06
	static uint8 task_added = NUM_0; /* static local variable to maintain its value to check if a new task added */
	if (task_added < NUMBER_OF_TASKS ) /* check if added tasks is less than the max number of tasks */
	{
		for (uint8 task_index = NUM_0; task_index <= TasksCount; task_index++)
		{
			for(uint8 task_index_j = task_index; task_index_j <= TasksCount; task_index_j++)
 4de:	9f 5f       	subi	r25, 0xFF	; 255
 4e0:	89 17       	cp	r24, r25
 4e2:	08 f0       	brcs	.+2      	; 0x4e6 <Scheduler_AddTask+0xac>
 4e4:	bb cf       	rjmp	.-138    	; 0x45c <Scheduler_AddTask+0x22>
uint8 Scheduler_AddTask(tasktype task, uint16 task_periodicity, uint8 task_priority)
{
	static uint8 task_added = NUM_0; /* static local variable to maintain its value to check if a new task added */
	if (task_added < NUMBER_OF_TASKS ) /* check if added tasks is less than the max number of tasks */
	{
		for (uint8 task_index = NUM_0; task_index <= TasksCount; task_index++)
 4e6:	5f 5f       	subi	r21, 0xFF	; 255
 4e8:	85 17       	cp	r24, r21
 4ea:	20 f0       	brcs	.+8      	; 0x4f4 <Scheduler_AddTask+0xba>
		{
			for(uint8 task_index_j = task_index; task_index_j <= TasksCount; task_index_j++)
 4ec:	85 17       	cp	r24, r21
 4ee:	08 f0       	brcs	.+2      	; 0x4f2 <Scheduler_AddTask+0xb8>
 4f0:	b4 cf       	rjmp	.-152    	; 0x45a <Scheduler_AddTask+0x20>
 4f2:	f9 cf       	rjmp	.-14     	; 0x4e6 <Scheduler_AddTask+0xac>
				uint8 Temp_taskPriority	= TaskArr[task_index_j + NUM_1].task_Priority;
				TaskArr[task_index_j + NUM_1].task_Priority = TaskArr[task_index_j].task_Priority;
				TaskArr[task_index_j].task_Priority = Temp_taskPriority;
			}
		}
		TaskArr[task_added].task = task; /* add task */
 4f4:	97 e0       	ldi	r25, 0x07	; 7
 4f6:	f9 9e       	mul	r15, r25
 4f8:	f0 01       	movw	r30, r0
 4fa:	11 24       	eor	r1, r1
 4fc:	eb 59       	subi	r30, 0x9B	; 155
 4fe:	ff 4f       	sbci	r31, 0xFF	; 255
 500:	11 83       	std	Z+1, r17	; 0x01
 502:	00 83       	st	Z, r16
		TaskArr[task_added].task_periodicity = task_periodicity; /* add periodicity */
 504:	73 83       	std	Z+3, r23	; 0x03
 506:	62 83       	std	Z+2, r22	; 0x02
		TaskArr[task_added].remaining_ticks  = task_periodicity; /* load the periodicity in the remaining ticks */
 508:	75 83       	std	Z+5, r23	; 0x05
 50a:	64 83       	std	Z+4, r22	; 0x04
		TaskArr[task_added].task_Priority   = task_priority; /* load the periodicity in the remaining ticks */
 50c:	46 83       	std	Z+6, r20	; 0x06
		task_added++; /* increment the task added */
 50e:	f3 94       	inc	r15
 510:	f0 92 60 00 	sts	0x0060, r15	; 0x800060 <_edata>
		TasksCount++; /*increment tasks*/
 514:	8f 5f       	subi	r24, 0xFF	; 255
 516:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <TasksCount>
	}
	else
	return FALSE; /* if there is no place for new task return false and report error */
}
 51a:	01 c0       	rjmp	.+2      	; 0x51e <Scheduler_AddTask+0xe4>
		TaskArr[task_added].task_Priority   = task_priority; /* load the periodicity in the remaining ticks */
		task_added++; /* increment the task added */
		TasksCount++; /*increment tasks*/
	}
	else
	return FALSE; /* if there is no place for new task return false and report error */
 51c:	80 e0       	ldi	r24, 0x00	; 0
}
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	ff 90       	pop	r15
 528:	08 95       	ret

0000052a <task1>:
/* return: void,                                                        */
/* Description: Toggle LED0 after half second                           */
/************************************************************************/
void task1(void)
{
	DIO_TogglePin(LED0); /* Toggle LED0 */
 52a:	8c e0       	ldi	r24, 0x0C	; 12
 52c:	0e 94 48 01 	call	0x290	; 0x290 <DIO_TogglePin>
 530:	08 95       	ret

00000532 <task2>:
/* return: void,                                                        */
/* Description: Toggle LED1 after 750 MS                                 */
/************************************************************************/
void task2(void)
{
	DIO_TogglePin(LED1); /* Toggle LED1 */
 532:	8d e0       	ldi	r24, 0x0D	; 13
 534:	0e 94 48 01 	call	0x290	; 0x290 <DIO_TogglePin>
 538:	08 95       	ret

0000053a <task3>:
/* return: void,                                                        */
/* Description: Toggle LED2 after one second                             */
/************************************************************************/
void task3(void)
{
	DIO_TogglePin(LED2);/* Toggle LED2 */
 53a:	8e e0       	ldi	r24, 0x0E	; 14
 53c:	0e 94 48 01 	call	0x290	; 0x290 <DIO_TogglePin>
 540:	08 95       	ret

00000542 <task4>:
/* return: void,                                                        */
/* Description: Toggle LED4 after one second                            */
/************************************************************************/
void task4(void)
{
		DIO_TogglePin(LED3); /* Toggle LED4 */
 542:	8f e0       	ldi	r24, 0x0F	; 15
 544:	0e 94 48 01 	call	0x290	; 0x290 <DIO_TogglePin>
 548:	08 95       	ret

0000054a <Timer0_SetCallBack>:
/* return: void,												                 */
/* Description: Points to the required function in the OS upper layer Scheduler  */
/*********************************************************************************/
void Timer0_SetCallBack(void(*Ptr2Func)(void))
{
	G_Timer0_Call_Back_Ptr = Ptr2Func; /*add the function to pointer to function */
 54a:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <G_Timer0_Call_Back_Ptr+0x1>
 54e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <G_Timer0_Call_Back_Ptr>
 552:	08 95       	ret

00000554 <TimerInit>:
void TimerInit(void)
{
	/************************************************************************/
	/* Config Timer0 in CTC mode                                            */
	/************************************************************************/
	SET_BIT(TCCR0,WGM01);
 554:	83 b7       	in	r24, 0x33	; 51
 556:	88 60       	ori	r24, 0x08	; 8
 558:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,WGM00);
 55a:	83 b7       	in	r24, 0x33	; 51
 55c:	8f 7b       	andi	r24, 0xBF	; 191
 55e:	83 bf       	out	0x33, r24	; 51
	
	
	/************************************************************************/
	/* Clear TCNT0 and set OCR0                                             */
	/************************************************************************/
	TCNT0 = TCNT0_INITIAL_VALUE;
 560:	12 be       	out	0x32, r1	; 50
	OCR0  = OCR0_VALUE;
 562:	8c e7       	ldi	r24, 0x7C	; 124
 564:	8c bf       	out	0x3c, r24	; 60
	
	/************************************************************************/
	/* Set Prescaler to 64 so we can get 1ms every 250 count in OCR0        */
	/************************************************************************/
	SET_BIT(TCCR0,CS00);
 566:	83 b7       	in	r24, 0x33	; 51
 568:	81 60       	ori	r24, 0x01	; 1
 56a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS01);
 56c:	83 b7       	in	r24, 0x33	; 51
 56e:	82 60       	ori	r24, 0x02	; 2
 570:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS02);
 572:	83 b7       	in	r24, 0x33	; 51
 574:	8b 7f       	andi	r24, 0xFB	; 251
 576:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TIMSK,OCIE0); /* enable interrupt when compare match occur */
 578:	89 b7       	in	r24, 0x39	; 57
 57a:	82 60       	ori	r24, 0x02	; 2
 57c:	89 bf       	out	0x39, r24	; 57
 57e:	08 95       	ret

00000580 <TimerStart>:
void TimerStart(uint8 OCR)
{
	/************************************************************************/
	/* Config Timer0 in CTC mode                                            */
	/************************************************************************/
	SET_BIT(TCCR0,WGM01);
 580:	93 b7       	in	r25, 0x33	; 51
 582:	98 60       	ori	r25, 0x08	; 8
 584:	93 bf       	out	0x33, r25	; 51
	CLEAR_BIT(TCCR0,WGM00);
 586:	93 b7       	in	r25, 0x33	; 51
 588:	9f 7b       	andi	r25, 0xBF	; 191
 58a:	93 bf       	out	0x33, r25	; 51
	
	
	/************************************************************************/
	/* Clear TCNT0 and set OCR0                                             */
	/************************************************************************/
	TCNT0 = TCNT0_INITIAL_VALUE;
 58c:	12 be       	out	0x32, r1	; 50
	OCR0  = OCR;
 58e:	8c bf       	out	0x3c, r24	; 60
	
	/************************************************************************/
	/* Set Prescaler to 64 so we can get 1ms every 250 count in OCR0        */
	/************************************************************************/
	SET_BIT(TCCR0,CS00);
 590:	83 b7       	in	r24, 0x33	; 51
 592:	81 60       	ori	r24, 0x01	; 1
 594:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS01);
 596:	83 b7       	in	r24, 0x33	; 51
 598:	82 60       	ori	r24, 0x02	; 2
 59a:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS02);
 59c:	83 b7       	in	r24, 0x33	; 51
 59e:	8b 7f       	andi	r24, 0xFB	; 251
 5a0:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TIMSK,OCIE0); /* enable interrupt when compare match occur */
 5a2:	89 b7       	in	r24, 0x39	; 57
 5a4:	82 60       	ori	r24, 0x02	; 2
 5a6:	89 bf       	out	0x39, r24	; 57
 5a8:	08 95       	ret

000005aa <Interrupts_init>:
/* return: void,                                                        */
/* Description: Init interrupts                                         */
/************************************************************************/
void Interrupts_init(void)
{
	sei(); /* enable global interrupt */
 5aa:	78 94       	sei
 5ac:	08 95       	ret

000005ae <__vector_10>:

/************************************************************************/
/* Interrupt to handle when compare match occur                        */
/************************************************************************/
ISR(TIMER0_COMP_vect)
{
 5ae:	1f 92       	push	r1
 5b0:	0f 92       	push	r0
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	0f 92       	push	r0
 5b6:	11 24       	eor	r1, r1
 5b8:	2f 93       	push	r18
 5ba:	3f 93       	push	r19
 5bc:	4f 93       	push	r20
 5be:	5f 93       	push	r21
 5c0:	6f 93       	push	r22
 5c2:	7f 93       	push	r23
 5c4:	8f 93       	push	r24
 5c6:	9f 93       	push	r25
 5c8:	af 93       	push	r26
 5ca:	bf 93       	push	r27
 5cc:	ef 93       	push	r30
 5ce:	ff 93       	push	r31
	if ( NULL_PTR != G_Timer0_Call_Back_Ptr ) /* chaeck if the pointer to function is not NULL_PTR*/
 5d0:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <G_Timer0_Call_Back_Ptr>
 5d4:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <G_Timer0_Call_Back_Ptr+0x1>
 5d8:	30 97       	sbiw	r30, 0x00	; 0
 5da:	09 f0       	breq	.+2      	; 0x5de <__vector_10+0x30>
	{
		G_Timer0_Call_Back_Ptr(); /* call the function in the scheduler using call-back */
 5dc:	09 95       	icall
	}
}
 5de:	ff 91       	pop	r31
 5e0:	ef 91       	pop	r30
 5e2:	bf 91       	pop	r27
 5e4:	af 91       	pop	r26
 5e6:	9f 91       	pop	r25
 5e8:	8f 91       	pop	r24
 5ea:	7f 91       	pop	r23
 5ec:	6f 91       	pop	r22
 5ee:	5f 91       	pop	r21
 5f0:	4f 91       	pop	r20
 5f2:	3f 91       	pop	r19
 5f4:	2f 91       	pop	r18
 5f6:	0f 90       	pop	r0
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	0f 90       	pop	r0
 5fc:	1f 90       	pop	r1
 5fe:	18 95       	reti

00000600 <_exit>:
 600:	f8 94       	cli

00000602 <__stop_program>:
 602:	ff cf       	rjmp	.-2      	; 0x602 <__stop_program>
