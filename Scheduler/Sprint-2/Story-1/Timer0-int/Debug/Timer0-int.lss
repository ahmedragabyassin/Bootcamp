
Timer0-int.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000430  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800060  00800060  000004a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c7e  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c2  00000000  00000000  0000128e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c6  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002218  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049a  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005db  00000000  00000000  00002882  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002e5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 37       	cpi	r26, 0x73	; 115
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  74:	0c 94 16 02 	jmp	0x42c	; 0x42c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPinDirection>:
/* Return: return void		                                            */
/* Description: config the pin to be input or output	                */
/************************************************************************/
void DIO_SetPinDirection(uint8 PinNum, uint8 PinValue)
{
	if((PinNum >= NUM_0) && (PinNum <NUM_8)) /*check if Pins in PORTA*/
  7c:	88 30       	cpi	r24, 0x08	; 8
  7e:	e8 f4       	brcc	.+58     	; 0xba <DIO_SetPinDirection+0x3e>
	{
		if (PinValue == NUM_1) /* Check Pin Value if OUT to set bit or IN to clear bit */
  80:	61 30       	cpi	r22, 0x01	; 1
  82:	69 f4       	brne	.+26     	; 0x9e <DIO_SetPinDirection+0x22>
		{
			SET_BIT(DDRA,(PinNum));
  84:	4a b3       	in	r20, 0x1a	; 26
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	b9 01       	movw	r22, r18
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_SetPinDirection+0x16>
  8e:	66 0f       	add	r22, r22
  90:	77 1f       	adc	r23, r23
  92:	8a 95       	dec	r24
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_SetPinDirection+0x12>
  96:	cb 01       	movw	r24, r22
  98:	84 2b       	or	r24, r20
  9a:	8a bb       	out	0x1a, r24	; 26
  9c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,(PinNum));
  9e:	4a b3       	in	r20, 0x1a	; 26
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	b9 01       	movw	r22, r18
  a6:	02 c0       	rjmp	.+4      	; 0xac <DIO_SetPinDirection+0x30>
  a8:	66 0f       	add	r22, r22
  aa:	77 1f       	adc	r23, r23
  ac:	8a 95       	dec	r24
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <DIO_SetPinDirection+0x2c>
  b0:	cb 01       	movw	r24, r22
  b2:	80 95       	com	r24
  b4:	84 23       	and	r24, r20
  b6:	8a bb       	out	0x1a, r24	; 26
  b8:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_8) && (PinNum < NUM_16)) /*check if Pins in PORTB*/
  ba:	98 ef       	ldi	r25, 0xF8	; 248
  bc:	98 0f       	add	r25, r24
  be:	98 30       	cpi	r25, 0x08	; 8
  c0:	f0 f4       	brcc	.+60     	; 0xfe <DIO_SetPinDirection+0x82>
	{
		if (PinValue == NUM_1)
  c2:	61 30       	cpi	r22, 0x01	; 1
  c4:	69 f4       	brne	.+26     	; 0xe0 <DIO_SetPinDirection+0x64>
		{
			SET_BIT(DDRB,(PinNum - NUM_8));
  c6:	47 b3       	in	r20, 0x17	; 23
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	b9 01       	movw	r22, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_SetPinDirection+0x58>
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	9a 95       	dec	r25
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_SetPinDirection+0x54>
  d8:	cb 01       	movw	r24, r22
  da:	84 2b       	or	r24, r20
  dc:	87 bb       	out	0x17, r24	; 23
  de:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,(PinNum - NUM_8));
  e0:	47 b3       	in	r20, 0x17	; 23
  e2:	88 50       	subi	r24, 0x08	; 8
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	b9 01       	movw	r22, r18
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_SetPinDirection+0x74>
  ec:	66 0f       	add	r22, r22
  ee:	77 1f       	adc	r23, r23
  f0:	8a 95       	dec	r24
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_SetPinDirection+0x70>
  f4:	cb 01       	movw	r24, r22
  f6:	80 95       	com	r24
  f8:	84 23       	and	r24, r20
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_16) && (PinNum < NUM_24)) /*check if Pins in PORTC*/
  fe:	90 ef       	ldi	r25, 0xF0	; 240
 100:	98 0f       	add	r25, r24
 102:	98 30       	cpi	r25, 0x08	; 8
 104:	f0 f4       	brcc	.+60     	; 0x142 <DIO_SetPinDirection+0xc6>
	{
		if (PinValue == NUM_1)
 106:	61 30       	cpi	r22, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_SetPinDirection+0xa8>
		{
			SET_BIT(DDRC,(PinNum - NUM_16));
 10a:	44 b3       	in	r20, 0x14	; 20
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	b9 01       	movw	r22, r18
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_SetPinDirection+0x9c>
 114:	66 0f       	add	r22, r22
 116:	77 1f       	adc	r23, r23
 118:	9a 95       	dec	r25
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_SetPinDirection+0x98>
 11c:	cb 01       	movw	r24, r22
 11e:	84 2b       	or	r24, r20
 120:	84 bb       	out	0x14, r24	; 20
 122:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,(PinNum - NUM_16));
 124:	44 b3       	in	r20, 0x14	; 20
 126:	80 51       	subi	r24, 0x10	; 16
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	b9 01       	movw	r22, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_SetPinDirection+0xb8>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	8a 95       	dec	r24
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_SetPinDirection+0xb4>
 138:	cb 01       	movw	r24, r22
 13a:	80 95       	com	r24
 13c:	84 23       	and	r24, r20
 13e:	84 bb       	out	0x14, r24	; 20
 140:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
 142:	98 ee       	ldi	r25, 0xE8	; 232
 144:	98 0f       	add	r25, r24
 146:	98 30       	cpi	r25, 0x08	; 8
 148:	e8 f4       	brcc	.+58     	; 0x184 <DIO_SetPinDirection+0x108>
	{
		if (PinValue == NUM_1)
 14a:	61 30       	cpi	r22, 0x01	; 1
 14c:	69 f4       	brne	.+26     	; 0x168 <DIO_SetPinDirection+0xec>
		{
			SET_BIT(DDRD,(PinNum - NUM_24));
 14e:	41 b3       	in	r20, 0x11	; 17
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	b9 01       	movw	r22, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_SetPinDirection+0xe0>
 158:	66 0f       	add	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	9a 95       	dec	r25
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_SetPinDirection+0xdc>
 160:	cb 01       	movw	r24, r22
 162:	84 2b       	or	r24, r20
 164:	81 bb       	out	0x11, r24	; 17
 166:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,(PinNum - NUM_24));
 168:	41 b3       	in	r20, 0x11	; 17
 16a:	88 51       	subi	r24, 0x18	; 24
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_SetPinDirection+0xfc>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_SetPinDirection+0xf8>
 17c:	cb 01       	movw	r24, r22
 17e:	80 95       	com	r24
 180:	84 23       	and	r24, r20
 182:	81 bb       	out	0x11, r24	; 17
 184:	08 95       	ret

00000186 <DIO_TogglePin>:
/* Return: void							                                */
/* Description: return pin status			      		                */
/************************************************************************/
void DIO_TogglePin(uint8 PinNum)
{
	if((PinNum >= NUM_0) && (PinNum < NUM_8)) /*check if Pins in PORTA*/
 186:	88 30       	cpi	r24, 0x08	; 8
 188:	68 f4       	brcc	.+26     	; 0x1a4 <DIO_TogglePin+0x1e>
	{
		TOGGLE_BIT(PORTA,PinNum); /* Return Bit status*/
 18a:	4b b3       	in	r20, 0x1b	; 27
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	b9 01       	movw	r22, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_TogglePin+0x12>
 194:	66 0f       	add	r22, r22
 196:	77 1f       	adc	r23, r23
 198:	8a 95       	dec	r24
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_TogglePin+0xe>
 19c:	cb 01       	movw	r24, r22
 19e:	84 27       	eor	r24, r20
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret
	}
	else if((PinNum >= NUM_8) && (PinNum < NUM_16)) /*check if Pins in PORTB*/
 1a4:	98 ef       	ldi	r25, 0xF8	; 248
 1a6:	98 0f       	add	r25, r24
 1a8:	98 30       	cpi	r25, 0x08	; 8
 1aa:	68 f4       	brcc	.+26     	; 0x1c6 <DIO_TogglePin+0x40>
	{
		TOGGLE_BIT(PORTB,(PinNum-NUM_8));
 1ac:	48 b3       	in	r20, 0x18	; 24
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	b9 01       	movw	r22, r18
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_TogglePin+0x34>
 1b6:	66 0f       	add	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	9a 95       	dec	r25
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_TogglePin+0x30>
 1be:	cb 01       	movw	r24, r22
 1c0:	84 27       	eor	r24, r20
 1c2:	88 bb       	out	0x18, r24	; 24
 1c4:	08 95       	ret
	}
	else if((PinNum >= NUM_16) && (PinNum < NUM_24)) /*check if Pins in PORTC*/
 1c6:	90 ef       	ldi	r25, 0xF0	; 240
 1c8:	98 0f       	add	r25, r24
 1ca:	98 30       	cpi	r25, 0x08	; 8
 1cc:	68 f4       	brcc	.+26     	; 0x1e8 <DIO_TogglePin+0x62>
	{
		TOGGLE_BIT(PORTC,(PinNum-NUM_16));
 1ce:	45 b3       	in	r20, 0x15	; 21
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	b9 01       	movw	r22, r18
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_TogglePin+0x56>
 1d8:	66 0f       	add	r22, r22
 1da:	77 1f       	adc	r23, r23
 1dc:	9a 95       	dec	r25
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_TogglePin+0x52>
 1e0:	cb 01       	movw	r24, r22
 1e2:	84 27       	eor	r24, r20
 1e4:	85 bb       	out	0x15, r24	; 21
 1e6:	08 95       	ret
	}
	else if((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
 1e8:	98 ee       	ldi	r25, 0xE8	; 232
 1ea:	98 0f       	add	r25, r24
 1ec:	98 30       	cpi	r25, 0x08	; 8
 1ee:	60 f4       	brcc	.+24     	; 0x208 <DIO_TogglePin+0x82>
	{
		TOGGLE_BIT(PORTD,(PinNum-NUM_24));
 1f0:	42 b3       	in	r20, 0x12	; 18
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	b9 01       	movw	r22, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_TogglePin+0x78>
 1fa:	66 0f       	add	r22, r22
 1fc:	77 1f       	adc	r23, r23
 1fe:	9a 95       	dec	r25
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_TogglePin+0x74>
 202:	cb 01       	movw	r24, r22
 204:	84 27       	eor	r24, r20
 206:	82 bb       	out	0x12, r24	; 18
 208:	08 95       	ret

0000020a <main>:



int main(void)
{
    DIO_SetPinDirection(LED1,OUT); /* LED 1 */
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	8d e0       	ldi	r24, 0x0D	; 13
 20e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
	DIO_SetPinDirection(LED2,OUT); /* LED 2 */
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	8e e0       	ldi	r24, 0x0E	; 14
 216:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
	DIO_SetPinDirection(LED3,OUT); /* LED 3 */
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	8f e0       	ldi	r24, 0x0F	; 15
 21e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN12,OUT);  /* button one*/
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	8c e0       	ldi	r24, 0x0C	; 12
 226:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
	
	Interrupts_init();
 22a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <Interrupts_init>
	Scheduler_AddTask(task1);
 22e:	8d e5       	ldi	r24, 0x5D	; 93
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 bd 01 	call	0x37a	; 0x37a <Scheduler_AddTask>
	Scheduler_AddTask(task2);
 236:	85 e7       	ldi	r24, 0x75	; 117
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 bd 01 	call	0x37a	; 0x37a <Scheduler_AddTask>
	Scheduler_AddTask(task3);
 23e:	8d e8       	ldi	r24, 0x8D	; 141
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 bd 01 	call	0x37a	; 0x37a <Scheduler_AddTask>
	Scheduler_AddTask(task4);
 246:	85 ea       	ldi	r24, 0xA5	; 165
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 bd 01 	call	0x37a	; 0x37a <Scheduler_AddTask>
	SchedulerInit_AndStart();
 24e:	0e 94 4a 01 	call	0x294	; 0x294 <SchedulerInit_AndStart>
 252:	ff cf       	rjmp	.-2      	; 0x252 <main+0x48>

00000254 <Timer0_NewTimerTick>:
/* Description: Function called by the Timer Driver in the MCAL layer	*/
/*				using the call back pointer								*/
/************************************************************************/
void Timer0_NewTimerTick(void)
{
	NewTickFlag = NUM_1;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <NewTickFlag>
	TasksCount++;
 25a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 264:	08 95       	ret

00000266 <prefilled>:
/* @param: arr_size														*/
/* return: void,                                                        */
/* Description: run tasks												*/
/************************************************************************/
void prefilled(tasktype TaskArr[], uint8 arr_size)
{
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
	for (uint8 i =NUM_0; i<arr_size; i++)
 26e:	66 23       	and	r22, r22
 270:	61 f0       	breq	.+24     	; 0x28a <prefilled+0x24>
 272:	d6 2f       	mov	r29, r22
 274:	08 2f       	mov	r16, r24
 276:	19 2f       	mov	r17, r25
 278:	c0 e0       	ldi	r28, 0x00	; 0
	{
		TaskArr[i]();
 27a:	d8 01       	movw	r26, r16
 27c:	ed 91       	ld	r30, X+
 27e:	fd 91       	ld	r31, X+
 280:	8d 01       	movw	r16, r26
 282:	09 95       	icall
/* return: void,                                                        */
/* Description: run tasks												*/
/************************************************************************/
void prefilled(tasktype TaskArr[], uint8 arr_size)
{
	for (uint8 i =NUM_0; i<arr_size; i++)
 284:	cf 5f       	subi	r28, 0xFF	; 255
 286:	dc 13       	cpse	r29, r28
 288:	f8 cf       	rjmp	.-16     	; 0x27a <prefilled+0x14>
	{
		TaskArr[i]();
	}
}
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <SchedulerInit_AndStart>:
/* return: void,                                                        */
/* Description: called in main 										    */
/************************************************************************/
void SchedulerInit_AndStart(void)
{
	sei(); /* enable global interrupt */
 294:	78 94       	sei
	TimerInit();
 296:	0e 94 d5 01 	call	0x3aa	; 0x3aa <TimerInit>
	/************************************************************************/
	/* Set the Call Back function call to Scheduler_New_Timer_Tick			*/
	/* this function will be called every Timer0 Compare Interrupt(ms)		*/
	/************************************************************************/ 
	Timer0_SetCallBack(Timer0_NewTimerTick);
 29a:	8a e2       	ldi	r24, 0x2A	; 42
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <Timer0_SetCallBack>
	while(NUM_1)
	{
		if(NewTickFlag == NUM_1)
 2a2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <NewTickFlag>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <SchedulerInit_AndStart+0xe>
		{
			prefilled(TaskArr,NUMBER_OF_TASKS);
 2aa:	63 e0       	ldi	r22, 0x03	; 3
 2ac:	8d e6       	ldi	r24, 0x6D	; 109
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 33 01 	call	0x266	; 0x266 <prefilled>
			NewTickFlag = NUM_0 ;
 2b4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <NewTickFlag>
 2b8:	f4 cf       	rjmp	.-24     	; 0x2a2 <SchedulerInit_AndStart+0xe>

000002ba <task1>:
/************************************************************************/
void task1(void)
{
	
	static uint16 task1_delay = NUM_0;
	if(task1_delay >= DELAY_HALF_SECOND)
 2ba:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <task1_delay.1604>
 2be:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <task1_delay.1604+0x1>
 2c2:	88 3e       	cpi	r24, 0xE8	; 232
 2c4:	93 40       	sbci	r25, 0x03	; 3
 2c6:	38 f0       	brcs	.+14     	; 0x2d6 <task1+0x1c>
	{
		DIO_TogglePin(PIN12);
 2c8:	8c e0       	ldi	r24, 0x0C	; 12
 2ca:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_TogglePin>
		task1_delay = NUM_0;
 2ce:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <task1_delay.1604+0x1>
 2d2:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <task1_delay.1604>
	}
	task1_delay++;
 2d6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <task1_delay.1604>
 2da:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <task1_delay.1604+0x1>
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <task1_delay.1604+0x1>
 2e4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <task1_delay.1604>
 2e8:	08 95       	ret

000002ea <task2>:
/* Description: Toggle LED2 after 750 MS                                 */
/************************************************************************/
void task2(void)
{
	static uint16 task2_delay = NUM_0;
	if(task2_delay >= DELAY_750_MS)
 2ea:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <task2_delay.1608>
 2ee:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <task2_delay.1608+0x1>
 2f2:	8c 3d       	cpi	r24, 0xDC	; 220
 2f4:	95 40       	sbci	r25, 0x05	; 5
 2f6:	38 f0       	brcs	.+14     	; 0x306 <task2+0x1c>
	{
		DIO_TogglePin(PIN13);
 2f8:	8d e0       	ldi	r24, 0x0D	; 13
 2fa:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_TogglePin>
		task2_delay = NUM_0;
 2fe:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <task2_delay.1608+0x1>
 302:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <task2_delay.1608>
	}
	task2_delay++;
 306:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <task2_delay.1608>
 30a:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <task2_delay.1608+0x1>
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <task2_delay.1608+0x1>
 314:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <task2_delay.1608>
 318:	08 95       	ret

0000031a <task3>:
/* Description: Toggle LED3 after one second                             */
/************************************************************************/
void task3(void)
{
	static uint16 task3_delay = NUM_0;
	if(task3_delay >= DELAY_SECOND)
 31a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <task3_delay.1612>
 31e:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <task3_delay.1612+0x1>
 322:	80 3d       	cpi	r24, 0xD0	; 208
 324:	97 40       	sbci	r25, 0x07	; 7
 326:	38 f0       	brcs	.+14     	; 0x336 <task3+0x1c>
	{
		DIO_TogglePin(PIN14);
 328:	8e e0       	ldi	r24, 0x0E	; 14
 32a:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_TogglePin>
		task3_delay = NUM_0;
 32e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <task3_delay.1612+0x1>
 332:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <task3_delay.1612>
	}
	task3_delay++;
 336:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <task3_delay.1612>
 33a:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <task3_delay.1612+0x1>
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <task3_delay.1612+0x1>
 344:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <task3_delay.1612>
 348:	08 95       	ret

0000034a <task4>:
/* Description: Toggle LED0 after one second                             */
/************************************************************************/
void task4(void)
{
	static uint16 task4_delay = NUM_0;
	if(task4_delay >= DELAY_SECOND)
 34a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <task4_delay.1616>
 34e:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <task4_delay.1616+0x1>
 352:	80 3d       	cpi	r24, 0xD0	; 208
 354:	97 40       	sbci	r25, 0x07	; 7
 356:	38 f0       	brcs	.+14     	; 0x366 <task4+0x1c>
	{
		DIO_TogglePin(PIN15);
 358:	8f e0       	ldi	r24, 0x0F	; 15
 35a:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_TogglePin>
		task4_delay = NUM_0;
 35e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <task4_delay.1616+0x1>
 362:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <task4_delay.1616>
	}
	task4_delay++;
 366:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <task4_delay.1616>
 36a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <task4_delay.1616+0x1>
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <task4_delay.1616+0x1>
 374:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <task4_delay.1616>
 378:	08 95       	ret

0000037a <Scheduler_AddTask>:
/* @param: task, pointer to function                                    */
/* return: true or false,                                               */
/* Description: Add task to array of pointer to tasks                   */
/************************************************************************/
uint8 Scheduler_AddTask(tasktype task)
{
 37a:	9c 01       	movw	r18, r24
	static uint8 task_added = NUM_0;
	if (task_added < NUMBER_OF_TASKS )
 37c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <task_added.1620>
 380:	93 30       	cpi	r25, 0x03	; 3
 382:	60 f4       	brcc	.+24     	; 0x39c <Scheduler_AddTask+0x22>
	{
		TaskArr[task_added] = task;
 384:	e9 2f       	mov	r30, r25
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	e3 59       	subi	r30, 0x93	; 147
 38e:	ff 4f       	sbci	r31, 0xFF	; 255
 390:	31 83       	std	Z+1, r19	; 0x01
 392:	20 83       	st	Z, r18
		task_added++;
 394:	9f 5f       	subi	r25, 0xFF	; 255
 396:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <task_added.1620>
	}
	else
		return FALSE;
}
 39a:	08 95       	ret
	{
		TaskArr[task_added] = task;
		task_added++;
	}
	else
		return FALSE;
 39c:	80 e0       	ldi	r24, 0x00	; 0
}
 39e:	08 95       	ret

000003a0 <Timer0_SetCallBack>:
/* return: void,												                 */
/* Description: Points to the required function in the OS upper layer Scheduler  */
/*********************************************************************************/
void Timer0_SetCallBack(void(*Ptr2Func)(void))
{
	G_Timer0_Call_Back_Ptr = Ptr2Func;
 3a0:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <G_Timer0_Call_Back_Ptr+0x1>
 3a4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <G_Timer0_Call_Back_Ptr>
 3a8:	08 95       	ret

000003aa <TimerInit>:
void TimerInit(void)
{
	/************************************************************************/
	/* Config Timer0 in CTC mode                                            */
	/************************************************************************/
	SET_BIT(TCCR0,WGM01);
 3aa:	83 b7       	in	r24, 0x33	; 51
 3ac:	88 60       	ori	r24, 0x08	; 8
 3ae:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,WGM00);
 3b0:	83 b7       	in	r24, 0x33	; 51
 3b2:	8f 7b       	andi	r24, 0xBF	; 191
 3b4:	83 bf       	out	0x33, r24	; 51
	
	
	/************************************************************************/
	/* Clear TCNT0 and set OCR0                                             */
	/************************************************************************/
	TCNT0 = TCNT0_INITIAL_VALUE;
 3b6:	12 be       	out	0x32, r1	; 50
	OCR0  = OCR0_VALUE;
 3b8:	8c e7       	ldi	r24, 0x7C	; 124
 3ba:	8c bf       	out	0x3c, r24	; 60
	
	/************************************************************************/
	/* Set Prescaler to 64 so we can get 1ms every 250 count in OCR0        */
	/************************************************************************/
	SET_BIT(TCCR0,CS00);
 3bc:	83 b7       	in	r24, 0x33	; 51
 3be:	81 60       	ori	r24, 0x01	; 1
 3c0:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS01);
 3c2:	83 b7       	in	r24, 0x33	; 51
 3c4:	82 60       	ori	r24, 0x02	; 2
 3c6:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS02);
 3c8:	83 b7       	in	r24, 0x33	; 51
 3ca:	8b 7f       	andi	r24, 0xFB	; 251
 3cc:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TIMSK,OCIE0); /* enable interrupt when compare match occur */
 3ce:	89 b7       	in	r24, 0x39	; 57
 3d0:	82 60       	ori	r24, 0x02	; 2
 3d2:	89 bf       	out	0x39, r24	; 57
 3d4:	08 95       	ret

000003d6 <Interrupts_init>:
/* return: void,                                                        */
/* Description: Init interrupts                                         */
/************************************************************************/
void Interrupts_init(void)
{
	sei(); /* enable global interrupt */
 3d6:	78 94       	sei
 3d8:	08 95       	ret

000003da <__vector_10>:

/************************************************************************/
/* Interrupt to handle when compare match occur                        */
/************************************************************************/
ISR(TIMER0_COMP_vect)
{
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	2f 93       	push	r18
 3e6:	3f 93       	push	r19
 3e8:	4f 93       	push	r20
 3ea:	5f 93       	push	r21
 3ec:	6f 93       	push	r22
 3ee:	7f 93       	push	r23
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	af 93       	push	r26
 3f6:	bf 93       	push	r27
 3f8:	ef 93       	push	r30
 3fa:	ff 93       	push	r31
	if (G_Timer0_Call_Back_Ptr != NULL_PTR)
 3fc:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <G_Timer0_Call_Back_Ptr>
 400:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <G_Timer0_Call_Back_Ptr+0x1>
 404:	30 97       	sbiw	r30, 0x00	; 0
 406:	09 f0       	breq	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{
		G_Timer0_Call_Back_Ptr(); /* call the function in the scheduler using call-back */
 408:	09 95       	icall
	}
}
 40a:	ff 91       	pop	r31
 40c:	ef 91       	pop	r30
 40e:	bf 91       	pop	r27
 410:	af 91       	pop	r26
 412:	9f 91       	pop	r25
 414:	8f 91       	pop	r24
 416:	7f 91       	pop	r23
 418:	6f 91       	pop	r22
 41a:	5f 91       	pop	r21
 41c:	4f 91       	pop	r20
 41e:	3f 91       	pop	r19
 420:	2f 91       	pop	r18
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <_exit>:
 42c:	f8 94       	cli

0000042e <__stop_program>:
 42e:	ff cf       	rjmp	.-2      	; 0x42e <__stop_program>
