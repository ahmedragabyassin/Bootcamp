
Timer0-int.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000004b4  00000548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800066  00800066  0000054e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bad  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000897  00000000  00000000  00001251  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000651  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000213c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000478  00000000  00000000  000022dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000557  00000000  00000000  00002754  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002cab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 53 01 	call	0x2a6	; 0x2a6 <main>
  8a:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:
		else if((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
		{
			return GET_BIT(PIND,(PinNum-NUM_24));
		}
	return NUM_0;
}
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	e8 f4       	brcc	.+58     	; 0xd0 <DIO_WritePin+0x3e>
  96:	61 30       	cpi	r22, 0x01	; 1
  98:	69 f4       	brne	.+26     	; 0xb4 <DIO_WritePin+0x22>
  9a:	4b b3       	in	r20, 0x1b	; 27
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	b9 01       	movw	r22, r18
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_WritePin+0x16>
  a4:	66 0f       	add	r22, r22
  a6:	77 1f       	adc	r23, r23
  a8:	8a 95       	dec	r24
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_WritePin+0x12>
  ac:	cb 01       	movw	r24, r22
  ae:	84 2b       	or	r24, r20
  b0:	8b bb       	out	0x1b, r24	; 27
  b2:	08 95       	ret
  b4:	4b b3       	in	r20, 0x1b	; 27
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	b9 01       	movw	r22, r18
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_WritePin+0x30>
  be:	66 0f       	add	r22, r22
  c0:	77 1f       	adc	r23, r23
  c2:	8a 95       	dec	r24
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_WritePin+0x2c>
  c6:	cb 01       	movw	r24, r22
  c8:	80 95       	com	r24
  ca:	84 23       	and	r24, r20
  cc:	8b bb       	out	0x1b, r24	; 27
  ce:	08 95       	ret
  d0:	98 ef       	ldi	r25, 0xF8	; 248
  d2:	98 0f       	add	r25, r24
  d4:	98 30       	cpi	r25, 0x08	; 8
  d6:	f0 f4       	brcc	.+60     	; 0x114 <DIO_WritePin+0x82>
  d8:	61 30       	cpi	r22, 0x01	; 1
  da:	69 f4       	brne	.+26     	; 0xf6 <DIO_WritePin+0x64>
  dc:	48 b3       	in	r20, 0x18	; 24
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_WritePin+0x58>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	9a 95       	dec	r25
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_WritePin+0x54>
  ee:	cb 01       	movw	r24, r22
  f0:	84 2b       	or	r24, r20
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	08 95       	ret
  f6:	48 b3       	in	r20, 0x18	; 24
  f8:	88 50       	subi	r24, 0x08	; 8
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	b9 01       	movw	r22, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_WritePin+0x74>
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	8a 95       	dec	r24
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_WritePin+0x70>
 10a:	cb 01       	movw	r24, r22
 10c:	80 95       	com	r24
 10e:	84 23       	and	r24, r20
 110:	88 bb       	out	0x18, r24	; 24
 112:	08 95       	ret
 114:	90 ef       	ldi	r25, 0xF0	; 240
 116:	98 0f       	add	r25, r24
 118:	98 30       	cpi	r25, 0x08	; 8
 11a:	f0 f4       	brcc	.+60     	; 0x158 <DIO_WritePin+0xc6>
 11c:	61 30       	cpi	r22, 0x01	; 1
 11e:	69 f4       	brne	.+26     	; 0x13a <DIO_WritePin+0xa8>
 120:	45 b3       	in	r20, 0x15	; 21
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	b9 01       	movw	r22, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_WritePin+0x9c>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	9a 95       	dec	r25
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_WritePin+0x98>
 132:	cb 01       	movw	r24, r22
 134:	84 2b       	or	r24, r20
 136:	85 bb       	out	0x15, r24	; 21
 138:	08 95       	ret
 13a:	45 b3       	in	r20, 0x15	; 21
 13c:	80 51       	subi	r24, 0x10	; 16
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	b9 01       	movw	r22, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_WritePin+0xb8>
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	8a 95       	dec	r24
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_WritePin+0xb4>
 14e:	cb 01       	movw	r24, r22
 150:	80 95       	com	r24
 152:	84 23       	and	r24, r20
 154:	85 bb       	out	0x15, r24	; 21
 156:	08 95       	ret
 158:	98 ee       	ldi	r25, 0xE8	; 232
 15a:	98 0f       	add	r25, r24
 15c:	98 30       	cpi	r25, 0x08	; 8
 15e:	e8 f4       	brcc	.+58     	; 0x19a <DIO_WritePin+0x108>
 160:	61 30       	cpi	r22, 0x01	; 1
 162:	69 f4       	brne	.+26     	; 0x17e <DIO_WritePin+0xec>
 164:	42 b3       	in	r20, 0x12	; 18
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	b9 01       	movw	r22, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_WritePin+0xe0>
 16e:	66 0f       	add	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	9a 95       	dec	r25
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_WritePin+0xdc>
 176:	cb 01       	movw	r24, r22
 178:	84 2b       	or	r24, r20
 17a:	82 bb       	out	0x12, r24	; 18
 17c:	08 95       	ret
 17e:	42 b3       	in	r20, 0x12	; 18
 180:	88 51       	subi	r24, 0x18	; 24
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	b9 01       	movw	r22, r18
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_WritePin+0xfc>
 18a:	66 0f       	add	r22, r22
 18c:	77 1f       	adc	r23, r23
 18e:	8a 95       	dec	r24
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_WritePin+0xf8>
 192:	cb 01       	movw	r24, r22
 194:	80 95       	com	r24
 196:	84 23       	and	r24, r20
 198:	82 bb       	out	0x12, r24	; 18
 19a:	08 95       	ret

0000019c <DIO_SetPinDirection>:
/* Return: return void		                                            */
/* Description: config the pin to be input or output	                */
/************************************************************************/
void DIO_SetPinDirection(uint8 PinNum, uint8 PinValue)
{
	if((PinNum >= NUM_0) && (PinNum <NUM_8)) /*check if Pins in PORTA*/
 19c:	88 30       	cpi	r24, 0x08	; 8
 19e:	e8 f4       	brcc	.+58     	; 0x1da <DIO_SetPinDirection+0x3e>
	{
		if (PinValue == NUM_1) /* Check Pin Value if OUT to set bit or IN to clear bit */
 1a0:	61 30       	cpi	r22, 0x01	; 1
 1a2:	69 f4       	brne	.+26     	; 0x1be <DIO_SetPinDirection+0x22>
		{
			SET_BIT(DDRA,(PinNum));
 1a4:	4a b3       	in	r20, 0x1a	; 26
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	b9 01       	movw	r22, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_SetPinDirection+0x16>
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	8a 95       	dec	r24
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_SetPinDirection+0x12>
 1b6:	cb 01       	movw	r24, r22
 1b8:	84 2b       	or	r24, r20
 1ba:	8a bb       	out	0x1a, r24	; 26
 1bc:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,(PinNum));
 1be:	4a b3       	in	r20, 0x1a	; 26
 1c0:	21 e0       	ldi	r18, 0x01	; 1
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	b9 01       	movw	r22, r18
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_SetPinDirection+0x30>
 1c8:	66 0f       	add	r22, r22
 1ca:	77 1f       	adc	r23, r23
 1cc:	8a 95       	dec	r24
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_SetPinDirection+0x2c>
 1d0:	cb 01       	movw	r24, r22
 1d2:	80 95       	com	r24
 1d4:	84 23       	and	r24, r20
 1d6:	8a bb       	out	0x1a, r24	; 26
 1d8:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_8) && (PinNum < NUM_16)) /*check if Pins in PORTB*/
 1da:	98 ef       	ldi	r25, 0xF8	; 248
 1dc:	98 0f       	add	r25, r24
 1de:	98 30       	cpi	r25, 0x08	; 8
 1e0:	f0 f4       	brcc	.+60     	; 0x21e <DIO_SetPinDirection+0x82>
	{
		if (PinValue == NUM_1)
 1e2:	61 30       	cpi	r22, 0x01	; 1
 1e4:	69 f4       	brne	.+26     	; 0x200 <DIO_SetPinDirection+0x64>
		{
			SET_BIT(DDRB,(PinNum - NUM_8));
 1e6:	47 b3       	in	r20, 0x17	; 23
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	b9 01       	movw	r22, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_SetPinDirection+0x58>
 1f0:	66 0f       	add	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	9a 95       	dec	r25
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_SetPinDirection+0x54>
 1f8:	cb 01       	movw	r24, r22
 1fa:	84 2b       	or	r24, r20
 1fc:	87 bb       	out	0x17, r24	; 23
 1fe:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,(PinNum - NUM_8));
 200:	47 b3       	in	r20, 0x17	; 23
 202:	88 50       	subi	r24, 0x08	; 8
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	b9 01       	movw	r22, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_SetPinDirection+0x74>
 20c:	66 0f       	add	r22, r22
 20e:	77 1f       	adc	r23, r23
 210:	8a 95       	dec	r24
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_SetPinDirection+0x70>
 214:	cb 01       	movw	r24, r22
 216:	80 95       	com	r24
 218:	84 23       	and	r24, r20
 21a:	87 bb       	out	0x17, r24	; 23
 21c:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_16) && (PinNum < NUM_24)) /*check if Pins in PORTC*/
 21e:	90 ef       	ldi	r25, 0xF0	; 240
 220:	98 0f       	add	r25, r24
 222:	98 30       	cpi	r25, 0x08	; 8
 224:	f0 f4       	brcc	.+60     	; 0x262 <DIO_SetPinDirection+0xc6>
	{
		if (PinValue == NUM_1)
 226:	61 30       	cpi	r22, 0x01	; 1
 228:	69 f4       	brne	.+26     	; 0x244 <DIO_SetPinDirection+0xa8>
		{
			SET_BIT(DDRC,(PinNum - NUM_16));
 22a:	44 b3       	in	r20, 0x14	; 20
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	b9 01       	movw	r22, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_SetPinDirection+0x9c>
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	9a 95       	dec	r25
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_SetPinDirection+0x98>
 23c:	cb 01       	movw	r24, r22
 23e:	84 2b       	or	r24, r20
 240:	84 bb       	out	0x14, r24	; 20
 242:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,(PinNum - NUM_16));
 244:	44 b3       	in	r20, 0x14	; 20
 246:	80 51       	subi	r24, 0x10	; 16
 248:	21 e0       	ldi	r18, 0x01	; 1
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	b9 01       	movw	r22, r18
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_SetPinDirection+0xb8>
 250:	66 0f       	add	r22, r22
 252:	77 1f       	adc	r23, r23
 254:	8a 95       	dec	r24
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_SetPinDirection+0xb4>
 258:	cb 01       	movw	r24, r22
 25a:	80 95       	com	r24
 25c:	84 23       	and	r24, r20
 25e:	84 bb       	out	0x14, r24	; 20
 260:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
 262:	98 ee       	ldi	r25, 0xE8	; 232
 264:	98 0f       	add	r25, r24
 266:	98 30       	cpi	r25, 0x08	; 8
 268:	e8 f4       	brcc	.+58     	; 0x2a4 <DIO_SetPinDirection+0x108>
	{
		if (PinValue == NUM_1)
 26a:	61 30       	cpi	r22, 0x01	; 1
 26c:	69 f4       	brne	.+26     	; 0x288 <DIO_SetPinDirection+0xec>
		{
			SET_BIT(DDRD,(PinNum - NUM_24));
 26e:	41 b3       	in	r20, 0x11	; 17
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	b9 01       	movw	r22, r18
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_SetPinDirection+0xe0>
 278:	66 0f       	add	r22, r22
 27a:	77 1f       	adc	r23, r23
 27c:	9a 95       	dec	r25
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_SetPinDirection+0xdc>
 280:	cb 01       	movw	r24, r22
 282:	84 2b       	or	r24, r20
 284:	81 bb       	out	0x11, r24	; 17
 286:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,(PinNum - NUM_24));
 288:	41 b3       	in	r20, 0x11	; 17
 28a:	88 51       	subi	r24, 0x18	; 24
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	b9 01       	movw	r22, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_SetPinDirection+0xfc>
 294:	66 0f       	add	r22, r22
 296:	77 1f       	adc	r23, r23
 298:	8a 95       	dec	r24
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_SetPinDirection+0xf8>
 29c:	cb 01       	movw	r24, r22
 29e:	80 95       	com	r24
 2a0:	84 23       	and	r24, r20
 2a2:	81 bb       	out	0x11, r24	; 17
 2a4:	08 95       	ret

000002a6 <main>:



int main(void)
{
    DIO_SetPinDirection(LED1,OUT); /* LED 1 */
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	8d e0       	ldi	r24, 0x0D	; 13
 2aa:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPinDirection>
	DIO_SetPinDirection(LED2,OUT); /* LED 2 */
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	8e e0       	ldi	r24, 0x0E	; 14
 2b2:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPinDirection>
	DIO_SetPinDirection(LED3,OUT); /* LED 3 */
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	8f e0       	ldi	r24, 0x0F	; 15
 2ba:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN12,OUT);  /* button one*/
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	8c e0       	ldi	r24, 0x0C	; 12
 2c2:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPinDirection>
	
	Interrupts_init();
 2c6:	0e 94 2d 02 	call	0x45a	; 0x45a <Interrupts_init>
	SchedulerInit_AndStart();
 2ca:	0e 94 ba 01 	call	0x374	; 0x374 <SchedulerInit_AndStart>
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <main+0x28>

000002d0 <Timer0_NewTimerTick>:
/* Description: Function called by the Timer Driver in the MCAL layer	*/
/*				using the call back pointer								*/
/************************************************************************/
void Timer0_NewTimerTick(void)
{
	NewTickFlag = NUM_1;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <NewTickFlag>
	TasksCount++;
 2d6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 2da:	8f 5f       	subi	r24, 0xFF	; 255
 2dc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 2e0:	08 95       	ret

000002e2 <prefilled>:
/* @param: arr_size														*/
/* return: void,                                                        */
/* Description: run tasks												*/
/************************************************************************/
void prefilled(tasktype TaskArr[], uint8 arr_size)
{
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	8c 01       	movw	r16, r24
 2ec:	d6 2f       	mov	r29, r22
	for (uint8 i =NUM_0; i<=arr_size; i++)
 2ee:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if (NewTickFlag == NUM_1)
 2f0:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <NewTickFlag>
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	a1 f5       	brne	.+104    	; 0x360 <prefilled+0x7e>
		{
			switch(TasksCount)
 2f8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 2fc:	82 30       	cpi	r24, 0x02	; 2
 2fe:	99 f0       	breq	.+38     	; 0x326 <prefilled+0x44>
 300:	83 30       	cpi	r24, 0x03	; 3
 302:	01 f1       	breq	.+64     	; 0x344 <prefilled+0x62>
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	61 f5       	brne	.+88     	; 0x360 <prefilled+0x7e>
			{
				case TASK1:
					TaskArr[i]();
 308:	ec 2f       	mov	r30, r28
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	ee 0f       	add	r30, r30
 30e:	ff 1f       	adc	r31, r31
 310:	e0 0f       	add	r30, r16
 312:	f1 1f       	adc	r31, r17
 314:	01 90       	ld	r0, Z+
 316:	f0 81       	ld	r31, Z
 318:	e0 2d       	mov	r30, r0
 31a:	09 95       	icall
					NewTickFlag = NUM_0;
 31c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <NewTickFlag>
					TasksCount = NUM_0;
 320:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
					break;
 324:	1d c0       	rjmp	.+58     	; 0x360 <prefilled+0x7e>
				case TASK2:
					TaskArr[i]();
 326:	ec 2f       	mov	r30, r28
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	e0 0f       	add	r30, r16
 330:	f1 1f       	adc	r31, r17
 332:	01 90       	ld	r0, Z+
 334:	f0 81       	ld	r31, Z
 336:	e0 2d       	mov	r30, r0
 338:	09 95       	icall
					NewTickFlag = NUM_0;
 33a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <NewTickFlag>
					TasksCount = NUM_0;
 33e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
					break;
 342:	0e c0       	rjmp	.+28     	; 0x360 <prefilled+0x7e>
				case TASK3:
					TaskArr[i]();
 344:	ec 2f       	mov	r30, r28
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	e0 0f       	add	r30, r16
 34e:	f1 1f       	adc	r31, r17
 350:	01 90       	ld	r0, Z+
 352:	f0 81       	ld	r31, Z
 354:	e0 2d       	mov	r30, r0
 356:	09 95       	icall
					NewTickFlag = NUM_0;
 358:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <NewTickFlag>
					TasksCount = NUM_0;
 35c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
/* return: void,                                                        */
/* Description: run tasks												*/
/************************************************************************/
void prefilled(tasktype TaskArr[], uint8 arr_size)
{
	for (uint8 i =NUM_0; i<=arr_size; i++)
 360:	cf 5f       	subi	r28, 0xFF	; 255
 362:	dc 17       	cp	r29, r28
 364:	28 f6       	brcc	.-118    	; 0x2f0 <prefilled+0xe>
					TasksCount = NUM_0;
					break;
			}
		}
	}
	TasksCount = NUM_0;
 366:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
}
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

00000374 <SchedulerInit_AndStart>:
/* return: void,                                                        */
/* Description: called in main 										    */
/************************************************************************/
void SchedulerInit_AndStart(void)
{
	sei(); /* enable global interrupt */
 374:	78 94       	sei
	TimerInit();
 376:	0e 94 17 02 	call	0x42e	; 0x42e <TimerInit>
	/************************************************************************/
	/* Set the Call Back function call to Scheduler_New_Timer_Tick			*/
	/* this function will be called every Timer0 Compare Interrupt(ms)		*/
	/************************************************************************/ 
	Timer0_SetCallBack(Timer0_NewTimerTick);
 37a:	88 e6       	ldi	r24, 0x68	; 104
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 12 02 	call	0x424	; 0x424 <Timer0_SetCallBack>
	while(NUM_1)
	{
		prefilled(TaskArr,NUMBER_OF_TASKS);
 382:	63 e0       	ldi	r22, 0x03	; 3
 384:	80 e6       	ldi	r24, 0x60	; 96
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 71 01 	call	0x2e2	; 0x2e2 <prefilled>
 38c:	fa cf       	rjmp	.-12     	; 0x382 <SchedulerInit_AndStart+0xe>

0000038e <task1>:
/************************************************************************/
void task1(void)
{
	
	static uint16 task1_delay = NUM_0;
	if(task1_delay >= DELAY_SECOND)
 38e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <task1_delay.1592>
 392:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <task1_delay.1592+0x1>
 396:	88 3e       	cpi	r24, 0xE8	; 232
 398:	93 40       	sbci	r25, 0x03	; 3
 39a:	40 f0       	brcs	.+16     	; 0x3ac <task1+0x1e>
	{
		DIO_WritePin(PIN12,HIGH);
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	8c e0       	ldi	r24, 0x0C	; 12
 3a0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
		task1_delay = 0;
 3a4:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <task1_delay.1592+0x1>
 3a8:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <task1_delay.1592>
	}
	task1_delay++;
 3ac:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <task1_delay.1592>
 3b0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <task1_delay.1592+0x1>
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <task1_delay.1592+0x1>
 3ba:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <task1_delay.1592>
 3be:	08 95       	ret

000003c0 <task2>:
/* Description: Blink LED2                                              */
/************************************************************************/
void task2(void)
{
	static uint16 task2_delay = NUM_0;
	if(task2_delay >= DELAY_SECOND)
 3c0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <task2_delay.1596>
 3c4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <task2_delay.1596+0x1>
 3c8:	88 3e       	cpi	r24, 0xE8	; 232
 3ca:	93 40       	sbci	r25, 0x03	; 3
 3cc:	40 f0       	brcs	.+16     	; 0x3de <task2+0x1e>
	{
		DIO_WritePin(PIN13,HIGH);
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	8d e0       	ldi	r24, 0x0D	; 13
 3d2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
		task2_delay = 0;
 3d6:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <task2_delay.1596+0x1>
 3da:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <task2_delay.1596>
	}
	task2_delay++;
 3de:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <task2_delay.1596>
 3e2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <task2_delay.1596+0x1>
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <task2_delay.1596+0x1>
 3ec:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <task2_delay.1596>
 3f0:	08 95       	ret

000003f2 <task3>:
/* Description: Blink LED3                                              */
/************************************************************************/
void task3(void)
{
	static uint16 task3_delay = NUM_0;
	if(task3_delay >= DELAY_SECOND)
 3f2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <task3_delay.1600>
 3f6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <task3_delay.1600+0x1>
 3fa:	88 3e       	cpi	r24, 0xE8	; 232
 3fc:	93 40       	sbci	r25, 0x03	; 3
 3fe:	40 f0       	brcs	.+16     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	{
		DIO_WritePin(PIN14,HIGH);
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	8e e0       	ldi	r24, 0x0E	; 14
 404:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
		task3_delay = 0;
 408:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <task3_delay.1600+0x1>
 40c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <task3_delay.1600>
	}
	task3_delay++;
 410:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <task3_delay.1600>
 414:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <task3_delay.1600+0x1>
 418:	01 96       	adiw	r24, 0x01	; 1
 41a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <task3_delay.1600+0x1>
 41e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <task3_delay.1600>
 422:	08 95       	ret

00000424 <Timer0_SetCallBack>:
/* return: void,												                 */
/* Description: Points to the required function in the OS upper layer Scheduler  */
/*********************************************************************************/
void Timer0_SetCallBack(void(*Ptr2Func)(void))
{
	G_Timer0_Call_Back_Ptr = Ptr2Func;
 424:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <G_Timer0_Call_Back_Ptr+0x1>
 428:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <G_Timer0_Call_Back_Ptr>
 42c:	08 95       	ret

0000042e <TimerInit>:
void TimerInit(void)
{
	/************************************************************************/
	/* Config Timer0 in CTC mode                                            */
	/************************************************************************/
	SET_BIT(TCCR0,WGM01);
 42e:	83 b7       	in	r24, 0x33	; 51
 430:	88 60       	ori	r24, 0x08	; 8
 432:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,WGM00);
 434:	83 b7       	in	r24, 0x33	; 51
 436:	8f 7b       	andi	r24, 0xBF	; 191
 438:	83 bf       	out	0x33, r24	; 51
	
	
	/************************************************************************/
	/* Clear TCNT0 and set OCR0                                             */
	/************************************************************************/
	TCNT0 = TCNT0_INITIAL_VALUE;
 43a:	12 be       	out	0x32, r1	; 50
	OCR0  = OCR0_VALUE;
 43c:	8c e7       	ldi	r24, 0x7C	; 124
 43e:	8c bf       	out	0x3c, r24	; 60
	
	/************************************************************************/
	/* Set Prescaler to 64 so we can get 1ms every 250 count in OCR0        */
	/************************************************************************/
	SET_BIT(TCCR0,CS00);
 440:	83 b7       	in	r24, 0x33	; 51
 442:	81 60       	ori	r24, 0x01	; 1
 444:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS01);
 446:	83 b7       	in	r24, 0x33	; 51
 448:	82 60       	ori	r24, 0x02	; 2
 44a:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS02);
 44c:	83 b7       	in	r24, 0x33	; 51
 44e:	8b 7f       	andi	r24, 0xFB	; 251
 450:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TIMSK,OCIE0); /* enable interrupt when compare match occur */
 452:	89 b7       	in	r24, 0x39	; 57
 454:	82 60       	ori	r24, 0x02	; 2
 456:	89 bf       	out	0x39, r24	; 57
 458:	08 95       	ret

0000045a <Interrupts_init>:
/* return: void,                                                        */
/* Description: Init interrupts                                         */
/************************************************************************/
void Interrupts_init(void)
{
	sei(); /* enable global interrupt */
 45a:	78 94       	sei
 45c:	08 95       	ret

0000045e <__vector_10>:

/************************************************************************/
/* Interrupt to handle when compare match occur                        */
/************************************************************************/
ISR(TIMER0_COMP_vect)
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	2f 93       	push	r18
 46a:	3f 93       	push	r19
 46c:	4f 93       	push	r20
 46e:	5f 93       	push	r21
 470:	6f 93       	push	r22
 472:	7f 93       	push	r23
 474:	8f 93       	push	r24
 476:	9f 93       	push	r25
 478:	af 93       	push	r26
 47a:	bf 93       	push	r27
 47c:	ef 93       	push	r30
 47e:	ff 93       	push	r31
	if (G_Timer0_Call_Back_Ptr != NULL_PTR)
 480:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <G_Timer0_Call_Back_Ptr>
 484:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <G_Timer0_Call_Back_Ptr+0x1>
 488:	30 97       	sbiw	r30, 0x00	; 0
 48a:	09 f0       	breq	.+2      	; 0x48e <__vector_10+0x30>
	{
		G_Timer0_Call_Back_Ptr(); /* call the function in the scheduler using call-back */
 48c:	09 95       	icall
	}
}
 48e:	ff 91       	pop	r31
 490:	ef 91       	pop	r30
 492:	bf 91       	pop	r27
 494:	af 91       	pop	r26
 496:	9f 91       	pop	r25
 498:	8f 91       	pop	r24
 49a:	7f 91       	pop	r23
 49c:	6f 91       	pop	r22
 49e:	5f 91       	pop	r21
 4a0:	4f 91       	pop	r20
 4a2:	3f 91       	pop	r19
 4a4:	2f 91       	pop	r18
 4a6:	0f 90       	pop	r0
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	0f 90       	pop	r0
 4ac:	1f 90       	pop	r1
 4ae:	18 95       	reti

000004b0 <_exit>:
 4b0:	f8 94       	cli

000004b2 <__stop_program>:
 4b2:	ff cf       	rjmp	.-2      	; 0x4b2 <__stop_program>
