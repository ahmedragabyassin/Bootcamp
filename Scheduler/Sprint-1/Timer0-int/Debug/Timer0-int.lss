
Timer0-int.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000003d0  00000464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800066  00800066  0000046a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bc8  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000897  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000650  00000000  00000000  00001a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045e  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b3  00000000  00000000  00002686  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002c39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 10 01 	call	0x220	; 0x220 <main>
  8a:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDirection>:
/* Return: return void		                                            */
/* Description: config the pin to be input or output	                */
/************************************************************************/
void DIO_SetPinDirection(uint8 PinNum, uint8 PinValue)
{
	if((PinNum >= NUM_0) && (PinNum <NUM_8)) /*check if Pins in PORTA*/
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	e8 f4       	brcc	.+58     	; 0xd0 <DIO_SetPinDirection+0x3e>
	{
		if (PinValue == NUM_1) /* Check Pin Value if OUT to set bit or IN to clear bit */
  96:	61 30       	cpi	r22, 0x01	; 1
  98:	69 f4       	brne	.+26     	; 0xb4 <DIO_SetPinDirection+0x22>
		{
			SET_BIT(DDRA,(PinNum));
  9a:	4a b3       	in	r20, 0x1a	; 26
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	b9 01       	movw	r22, r18
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDirection+0x16>
  a4:	66 0f       	add	r22, r22
  a6:	77 1f       	adc	r23, r23
  a8:	8a 95       	dec	r24
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDirection+0x12>
  ac:	cb 01       	movw	r24, r22
  ae:	84 2b       	or	r24, r20
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,(PinNum));
  b4:	4a b3       	in	r20, 0x1a	; 26
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	b9 01       	movw	r22, r18
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_SetPinDirection+0x30>
  be:	66 0f       	add	r22, r22
  c0:	77 1f       	adc	r23, r23
  c2:	8a 95       	dec	r24
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_SetPinDirection+0x2c>
  c6:	cb 01       	movw	r24, r22
  c8:	80 95       	com	r24
  ca:	84 23       	and	r24, r20
  cc:	8a bb       	out	0x1a, r24	; 26
  ce:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_8) && (PinNum < NUM_16)) /*check if Pins in PORTB*/
  d0:	98 ef       	ldi	r25, 0xF8	; 248
  d2:	98 0f       	add	r25, r24
  d4:	98 30       	cpi	r25, 0x08	; 8
  d6:	f0 f4       	brcc	.+60     	; 0x114 <DIO_SetPinDirection+0x82>
	{
		if (PinValue == NUM_1)
  d8:	61 30       	cpi	r22, 0x01	; 1
  da:	69 f4       	brne	.+26     	; 0xf6 <DIO_SetPinDirection+0x64>
		{
			SET_BIT(DDRB,(PinNum - NUM_8));
  dc:	47 b3       	in	r20, 0x17	; 23
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_SetPinDirection+0x58>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	9a 95       	dec	r25
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_SetPinDirection+0x54>
  ee:	cb 01       	movw	r24, r22
  f0:	84 2b       	or	r24, r20
  f2:	87 bb       	out	0x17, r24	; 23
  f4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,(PinNum - NUM_8));
  f6:	47 b3       	in	r20, 0x17	; 23
  f8:	88 50       	subi	r24, 0x08	; 8
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	b9 01       	movw	r22, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_SetPinDirection+0x74>
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	8a 95       	dec	r24
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_SetPinDirection+0x70>
 10a:	cb 01       	movw	r24, r22
 10c:	80 95       	com	r24
 10e:	84 23       	and	r24, r20
 110:	87 bb       	out	0x17, r24	; 23
 112:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_16) && (PinNum < NUM_24)) /*check if Pins in PORTC*/
 114:	90 ef       	ldi	r25, 0xF0	; 240
 116:	98 0f       	add	r25, r24
 118:	98 30       	cpi	r25, 0x08	; 8
 11a:	f0 f4       	brcc	.+60     	; 0x158 <DIO_SetPinDirection+0xc6>
	{
		if (PinValue == NUM_1)
 11c:	61 30       	cpi	r22, 0x01	; 1
 11e:	69 f4       	brne	.+26     	; 0x13a <DIO_SetPinDirection+0xa8>
		{
			SET_BIT(DDRC,(PinNum - NUM_16));
 120:	44 b3       	in	r20, 0x14	; 20
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	b9 01       	movw	r22, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_SetPinDirection+0x9c>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	9a 95       	dec	r25
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_SetPinDirection+0x98>
 132:	cb 01       	movw	r24, r22
 134:	84 2b       	or	r24, r20
 136:	84 bb       	out	0x14, r24	; 20
 138:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,(PinNum - NUM_16));
 13a:	44 b3       	in	r20, 0x14	; 20
 13c:	80 51       	subi	r24, 0x10	; 16
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	b9 01       	movw	r22, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_SetPinDirection+0xb8>
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	8a 95       	dec	r24
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_SetPinDirection+0xb4>
 14e:	cb 01       	movw	r24, r22
 150:	80 95       	com	r24
 152:	84 23       	and	r24, r20
 154:	84 bb       	out	0x14, r24	; 20
 156:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
 158:	98 ee       	ldi	r25, 0xE8	; 232
 15a:	98 0f       	add	r25, r24
 15c:	98 30       	cpi	r25, 0x08	; 8
 15e:	e8 f4       	brcc	.+58     	; 0x19a <DIO_SetPinDirection+0x108>
	{
		if (PinValue == NUM_1)
 160:	61 30       	cpi	r22, 0x01	; 1
 162:	69 f4       	brne	.+26     	; 0x17e <DIO_SetPinDirection+0xec>
		{
			SET_BIT(DDRD,(PinNum - NUM_24));
 164:	41 b3       	in	r20, 0x11	; 17
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	b9 01       	movw	r22, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_SetPinDirection+0xe0>
 16e:	66 0f       	add	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	9a 95       	dec	r25
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_SetPinDirection+0xdc>
 176:	cb 01       	movw	r24, r22
 178:	84 2b       	or	r24, r20
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,(PinNum - NUM_24));
 17e:	41 b3       	in	r20, 0x11	; 17
 180:	88 51       	subi	r24, 0x18	; 24
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	b9 01       	movw	r22, r18
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_SetPinDirection+0xfc>
 18a:	66 0f       	add	r22, r22
 18c:	77 1f       	adc	r23, r23
 18e:	8a 95       	dec	r24
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_SetPinDirection+0xf8>
 192:	cb 01       	movw	r24, r22
 194:	80 95       	com	r24
 196:	84 23       	and	r24, r20
 198:	81 bb       	out	0x11, r24	; 17
 19a:	08 95       	ret

0000019c <DIO_TogglePin>:
/* Return: void							                                */
/* Description: return pin status			      		                */
/************************************************************************/
void DIO_TogglePin(uint8 PinNum)
{
	if((PinNum >= NUM_0) && (PinNum < NUM_8)) /*check if Pins in PORTA*/
 19c:	88 30       	cpi	r24, 0x08	; 8
 19e:	68 f4       	brcc	.+26     	; 0x1ba <DIO_TogglePin+0x1e>
	{
		TOGGLE_BIT(PORTA,PinNum); /* Return Bit status*/
 1a0:	4b b3       	in	r20, 0x1b	; 27
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	b9 01       	movw	r22, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_TogglePin+0x12>
 1aa:	66 0f       	add	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	8a 95       	dec	r24
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_TogglePin+0xe>
 1b2:	cb 01       	movw	r24, r22
 1b4:	84 27       	eor	r24, r20
 1b6:	8b bb       	out	0x1b, r24	; 27
 1b8:	08 95       	ret
	}
	else if((PinNum >= NUM_8) && (PinNum < NUM_16)) /*check if Pins in PORTB*/
 1ba:	98 ef       	ldi	r25, 0xF8	; 248
 1bc:	98 0f       	add	r25, r24
 1be:	98 30       	cpi	r25, 0x08	; 8
 1c0:	68 f4       	brcc	.+26     	; 0x1dc <DIO_TogglePin+0x40>
	{
		TOGGLE_BIT(PORTB,(PinNum-NUM_8));
 1c2:	48 b3       	in	r20, 0x18	; 24
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	b9 01       	movw	r22, r18
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_TogglePin+0x34>
 1cc:	66 0f       	add	r22, r22
 1ce:	77 1f       	adc	r23, r23
 1d0:	9a 95       	dec	r25
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_TogglePin+0x30>
 1d4:	cb 01       	movw	r24, r22
 1d6:	84 27       	eor	r24, r20
 1d8:	88 bb       	out	0x18, r24	; 24
 1da:	08 95       	ret
	}
	else if((PinNum >= NUM_16) && (PinNum < NUM_24)) /*check if Pins in PORTC*/
 1dc:	90 ef       	ldi	r25, 0xF0	; 240
 1de:	98 0f       	add	r25, r24
 1e0:	98 30       	cpi	r25, 0x08	; 8
 1e2:	68 f4       	brcc	.+26     	; 0x1fe <DIO_TogglePin+0x62>
	{
		TOGGLE_BIT(PORTC,(PinNum-NUM_16));
 1e4:	45 b3       	in	r20, 0x15	; 21
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	b9 01       	movw	r22, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_TogglePin+0x56>
 1ee:	66 0f       	add	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	9a 95       	dec	r25
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_TogglePin+0x52>
 1f6:	cb 01       	movw	r24, r22
 1f8:	84 27       	eor	r24, r20
 1fa:	85 bb       	out	0x15, r24	; 21
 1fc:	08 95       	ret
	}
	else if((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
 1fe:	98 ee       	ldi	r25, 0xE8	; 232
 200:	98 0f       	add	r25, r24
 202:	98 30       	cpi	r25, 0x08	; 8
 204:	60 f4       	brcc	.+24     	; 0x21e <DIO_TogglePin+0x82>
	{
		TOGGLE_BIT(PORTD,(PinNum-NUM_24));
 206:	42 b3       	in	r20, 0x12	; 18
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	b9 01       	movw	r22, r18
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_TogglePin+0x78>
 210:	66 0f       	add	r22, r22
 212:	77 1f       	adc	r23, r23
 214:	9a 95       	dec	r25
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_TogglePin+0x74>
 218:	cb 01       	movw	r24, r22
 21a:	84 27       	eor	r24, r20
 21c:	82 bb       	out	0x12, r24	; 18
 21e:	08 95       	ret

00000220 <main>:



int main(void)
{
    DIO_SetPinDirection(LED1,OUT); /* LED 1 */
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	8d e0       	ldi	r24, 0x0D	; 13
 224:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(LED2,OUT); /* LED 2 */
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	8e e0       	ldi	r24, 0x0E	; 14
 22c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(LED3,OUT); /* LED 3 */
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	8f e0       	ldi	r24, 0x0F	; 15
 234:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN12,OUT);  /* button one*/
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	8c e0       	ldi	r24, 0x0C	; 12
 23c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	
	Interrupts_init();
 240:	0e 94 bb 01 	call	0x376	; 0x376 <Interrupts_init>
	SchedulerInit_AndStart();
 244:	0e 94 45 01 	call	0x28a	; 0x28a <SchedulerInit_AndStart>
 248:	ff cf       	rjmp	.-2      	; 0x248 <main+0x28>

0000024a <Timer0_NewTimerTick>:
/* Description: Function called by the Timer Driver in the MCAL layer	*/
/*				using the call back pointer								*/
/************************************************************************/
void Timer0_NewTimerTick(void)
{
	NewTickFlag = NUM_1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <NewTickFlag>
	TasksCount++;
 250:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 254:	8f 5f       	subi	r24, 0xFF	; 255
 256:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 25a:	08 95       	ret

0000025c <prefilled>:
/* @param: arr_size														*/
/* return: void,                                                        */
/* Description: run tasks												*/
/************************************************************************/
void prefilled(tasktype TaskArr[], uint8 arr_size)
{
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
	for (uint8 i =NUM_0; i<arr_size; i++)
 264:	66 23       	and	r22, r22
 266:	61 f0       	breq	.+24     	; 0x280 <prefilled+0x24>
 268:	d6 2f       	mov	r29, r22
 26a:	08 2f       	mov	r16, r24
 26c:	19 2f       	mov	r17, r25
 26e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		TaskArr[i]();
 270:	d8 01       	movw	r26, r16
 272:	ed 91       	ld	r30, X+
 274:	fd 91       	ld	r31, X+
 276:	8d 01       	movw	r16, r26
 278:	09 95       	icall
/* return: void,                                                        */
/* Description: run tasks												*/
/************************************************************************/
void prefilled(tasktype TaskArr[], uint8 arr_size)
{
	for (uint8 i =NUM_0; i<arr_size; i++)
 27a:	cf 5f       	subi	r28, 0xFF	; 255
 27c:	dc 13       	cpse	r29, r28
 27e:	f8 cf       	rjmp	.-16     	; 0x270 <prefilled+0x14>
	{
		TaskArr[i]();
	}
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	08 95       	ret

0000028a <SchedulerInit_AndStart>:
/* return: void,                                                        */
/* Description: called in main 										    */
/************************************************************************/
void SchedulerInit_AndStart(void)
{
	sei(); /* enable global interrupt */
 28a:	78 94       	sei
	TimerInit();
 28c:	0e 94 a5 01 	call	0x34a	; 0x34a <TimerInit>
	/************************************************************************/
	/* Set the Call Back function call to Scheduler_New_Timer_Tick			*/
	/* this function will be called every Timer0 Compare Interrupt(ms)		*/
	/************************************************************************/ 
	Timer0_SetCallBack(Timer0_NewTimerTick);
 290:	85 e2       	ldi	r24, 0x25	; 37
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 a0 01 	call	0x340	; 0x340 <Timer0_SetCallBack>
	while(NUM_1)
	{
		if(NewTickFlag == NUM_1)
 298:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <NewTickFlag>
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	e1 f7       	brne	.-8      	; 0x298 <SchedulerInit_AndStart+0xe>
		{
			prefilled(TaskArr,NUMBER_OF_TASKS);
 2a0:	63 e0       	ldi	r22, 0x03	; 3
 2a2:	80 e6       	ldi	r24, 0x60	; 96
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 2e 01 	call	0x25c	; 0x25c <prefilled>
			NewTickFlag = NUM_0 ;
 2aa:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <NewTickFlag>
 2ae:	f4 cf       	rjmp	.-24     	; 0x298 <SchedulerInit_AndStart+0xe>

000002b0 <task1>:
/************************************************************************/
void task1(void)
{
	
	static uint16 task1_delay = NUM_0;
	if(task1_delay >= DELAY_HALF_SECOND)
 2b0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <task1_delay.1594>
 2b4:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <task1_delay.1594+0x1>
 2b8:	88 3e       	cpi	r24, 0xE8	; 232
 2ba:	93 40       	sbci	r25, 0x03	; 3
 2bc:	38 f0       	brcs	.+14     	; 0x2cc <task1+0x1c>
	{
		DIO_TogglePin(PIN12);
 2be:	8c e0       	ldi	r24, 0x0C	; 12
 2c0:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_TogglePin>
		task1_delay = NUM_0;
 2c4:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <task1_delay.1594+0x1>
 2c8:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <task1_delay.1594>
	}
	task1_delay++;
 2cc:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <task1_delay.1594>
 2d0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <task1_delay.1594+0x1>
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <task1_delay.1594+0x1>
 2da:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <task1_delay.1594>
 2de:	08 95       	ret

000002e0 <task2>:
/* Description: Toggle LED2 after 750 MS                                 */
/************************************************************************/
void task2(void)
{
	static uint16 task2_delay = NUM_0;
	if(task2_delay >= DELAY_750_MS)
 2e0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <task2_delay.1598>
 2e4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <task2_delay.1598+0x1>
 2e8:	8c 3d       	cpi	r24, 0xDC	; 220
 2ea:	95 40       	sbci	r25, 0x05	; 5
 2ec:	38 f0       	brcs	.+14     	; 0x2fc <task2+0x1c>
	{
		DIO_TogglePin(PIN13);
 2ee:	8d e0       	ldi	r24, 0x0D	; 13
 2f0:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_TogglePin>
		task2_delay = NUM_0;
 2f4:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <task2_delay.1598+0x1>
 2f8:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <task2_delay.1598>
	}
	task2_delay++;
 2fc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <task2_delay.1598>
 300:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <task2_delay.1598+0x1>
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <task2_delay.1598+0x1>
 30a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <task2_delay.1598>
 30e:	08 95       	ret

00000310 <task3>:
/* Description: Toggle LED3 after one second                             */
/************************************************************************/
void task3(void)
{
	static uint16 task3_delay = NUM_0;
	if(task3_delay >= DELAY_SECOND)
 310:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <task3_delay.1602>
 314:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <task3_delay.1602+0x1>
 318:	80 3d       	cpi	r24, 0xD0	; 208
 31a:	97 40       	sbci	r25, 0x07	; 7
 31c:	38 f0       	brcs	.+14     	; 0x32c <task3+0x1c>
	{
		DIO_TogglePin(PIN14);
 31e:	8e e0       	ldi	r24, 0x0E	; 14
 320:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_TogglePin>
		task3_delay = NUM_0;
 324:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <task3_delay.1602+0x1>
 328:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <task3_delay.1602>
	}
	task3_delay++;
 32c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <task3_delay.1602>
 330:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <task3_delay.1602+0x1>
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <task3_delay.1602+0x1>
 33a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <task3_delay.1602>
 33e:	08 95       	ret

00000340 <Timer0_SetCallBack>:
/* return: void,												                 */
/* Description: Points to the required function in the OS upper layer Scheduler  */
/*********************************************************************************/
void Timer0_SetCallBack(void(*Ptr2Func)(void))
{
	G_Timer0_Call_Back_Ptr = Ptr2Func;
 340:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <G_Timer0_Call_Back_Ptr+0x1>
 344:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <G_Timer0_Call_Back_Ptr>
 348:	08 95       	ret

0000034a <TimerInit>:
void TimerInit(void)
{
	/************************************************************************/
	/* Config Timer0 in CTC mode                                            */
	/************************************************************************/
	SET_BIT(TCCR0,WGM01);
 34a:	83 b7       	in	r24, 0x33	; 51
 34c:	88 60       	ori	r24, 0x08	; 8
 34e:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,WGM00);
 350:	83 b7       	in	r24, 0x33	; 51
 352:	8f 7b       	andi	r24, 0xBF	; 191
 354:	83 bf       	out	0x33, r24	; 51
	
	
	/************************************************************************/
	/* Clear TCNT0 and set OCR0                                             */
	/************************************************************************/
	TCNT0 = TCNT0_INITIAL_VALUE;
 356:	12 be       	out	0x32, r1	; 50
	OCR0  = OCR0_VALUE;
 358:	8c e7       	ldi	r24, 0x7C	; 124
 35a:	8c bf       	out	0x3c, r24	; 60
	
	/************************************************************************/
	/* Set Prescaler to 64 so we can get 1ms every 250 count in OCR0        */
	/************************************************************************/
	SET_BIT(TCCR0,CS00);
 35c:	83 b7       	in	r24, 0x33	; 51
 35e:	81 60       	ori	r24, 0x01	; 1
 360:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS01);
 362:	83 b7       	in	r24, 0x33	; 51
 364:	82 60       	ori	r24, 0x02	; 2
 366:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS02);
 368:	83 b7       	in	r24, 0x33	; 51
 36a:	8b 7f       	andi	r24, 0xFB	; 251
 36c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TIMSK,OCIE0); /* enable interrupt when compare match occur */
 36e:	89 b7       	in	r24, 0x39	; 57
 370:	82 60       	ori	r24, 0x02	; 2
 372:	89 bf       	out	0x39, r24	; 57
 374:	08 95       	ret

00000376 <Interrupts_init>:
/* return: void,                                                        */
/* Description: Init interrupts                                         */
/************************************************************************/
void Interrupts_init(void)
{
	sei(); /* enable global interrupt */
 376:	78 94       	sei
 378:	08 95       	ret

0000037a <__vector_10>:

/************************************************************************/
/* Interrupt to handle when compare match occur                        */
/************************************************************************/
ISR(TIMER0_COMP_vect)
{
 37a:	1f 92       	push	r1
 37c:	0f 92       	push	r0
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	0f 92       	push	r0
 382:	11 24       	eor	r1, r1
 384:	2f 93       	push	r18
 386:	3f 93       	push	r19
 388:	4f 93       	push	r20
 38a:	5f 93       	push	r21
 38c:	6f 93       	push	r22
 38e:	7f 93       	push	r23
 390:	8f 93       	push	r24
 392:	9f 93       	push	r25
 394:	af 93       	push	r26
 396:	bf 93       	push	r27
 398:	ef 93       	push	r30
 39a:	ff 93       	push	r31
	if (G_Timer0_Call_Back_Ptr != NULL_PTR)
 39c:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <G_Timer0_Call_Back_Ptr>
 3a0:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <G_Timer0_Call_Back_Ptr+0x1>
 3a4:	30 97       	sbiw	r30, 0x00	; 0
 3a6:	09 f0       	breq	.+2      	; 0x3aa <__vector_10+0x30>
	{
		G_Timer0_Call_Back_Ptr(); /* call the function in the scheduler using call-back */
 3a8:	09 95       	icall
	}
}
 3aa:	ff 91       	pop	r31
 3ac:	ef 91       	pop	r30
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	7f 91       	pop	r23
 3b8:	6f 91       	pop	r22
 3ba:	5f 91       	pop	r21
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	0f 90       	pop	r0
 3c8:	1f 90       	pop	r1
 3ca:	18 95       	reti

000003cc <_exit>:
 3cc:	f8 94       	cli

000003ce <__stop_program>:
 3ce:	ff cf       	rjmp	.-2      	; 0x3ce <__stop_program>
