
Timer0-int.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000059c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  00000610  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f5  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dc  00000000  00000000  00001119  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005bf  00000000  00000000  000017f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b1  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000055e  00000000  00000000  0000228d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000027eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9d 01 	call	0x33a	; 0x33a <main>
  74:	0c 94 cc 02 	jmp	0x598	; 0x598 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_WritePin>:
		else if((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
		{
			return GET_BIT(PIND,(PinNum-NUM_24));
		}
	return NUM_0;
}
  7c:	88 30       	cpi	r24, 0x08	; 8
  7e:	e8 f4       	brcc	.+58     	; 0xba <DIO_WritePin+0x3e>
  80:	61 30       	cpi	r22, 0x01	; 1
  82:	69 f4       	brne	.+26     	; 0x9e <DIO_WritePin+0x22>
  84:	4b b3       	in	r20, 0x1b	; 27
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	b9 01       	movw	r22, r18
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_WritePin+0x16>
  8e:	66 0f       	add	r22, r22
  90:	77 1f       	adc	r23, r23
  92:	8a 95       	dec	r24
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_WritePin+0x12>
  96:	cb 01       	movw	r24, r22
  98:	84 2b       	or	r24, r20
  9a:	8b bb       	out	0x1b, r24	; 27
  9c:	08 95       	ret
  9e:	4b b3       	in	r20, 0x1b	; 27
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	b9 01       	movw	r22, r18
  a6:	02 c0       	rjmp	.+4      	; 0xac <DIO_WritePin+0x30>
  a8:	66 0f       	add	r22, r22
  aa:	77 1f       	adc	r23, r23
  ac:	8a 95       	dec	r24
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <DIO_WritePin+0x2c>
  b0:	cb 01       	movw	r24, r22
  b2:	80 95       	com	r24
  b4:	84 23       	and	r24, r20
  b6:	8b bb       	out	0x1b, r24	; 27
  b8:	08 95       	ret
  ba:	98 ef       	ldi	r25, 0xF8	; 248
  bc:	98 0f       	add	r25, r24
  be:	98 30       	cpi	r25, 0x08	; 8
  c0:	f0 f4       	brcc	.+60     	; 0xfe <DIO_WritePin+0x82>
  c2:	61 30       	cpi	r22, 0x01	; 1
  c4:	69 f4       	brne	.+26     	; 0xe0 <DIO_WritePin+0x64>
  c6:	48 b3       	in	r20, 0x18	; 24
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	b9 01       	movw	r22, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_WritePin+0x58>
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	9a 95       	dec	r25
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_WritePin+0x54>
  d8:	cb 01       	movw	r24, r22
  da:	84 2b       	or	r24, r20
  dc:	88 bb       	out	0x18, r24	; 24
  de:	08 95       	ret
  e0:	48 b3       	in	r20, 0x18	; 24
  e2:	88 50       	subi	r24, 0x08	; 8
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	b9 01       	movw	r22, r18
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_WritePin+0x74>
  ec:	66 0f       	add	r22, r22
  ee:	77 1f       	adc	r23, r23
  f0:	8a 95       	dec	r24
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_WritePin+0x70>
  f4:	cb 01       	movw	r24, r22
  f6:	80 95       	com	r24
  f8:	84 23       	and	r24, r20
  fa:	88 bb       	out	0x18, r24	; 24
  fc:	08 95       	ret
  fe:	90 ef       	ldi	r25, 0xF0	; 240
 100:	98 0f       	add	r25, r24
 102:	98 30       	cpi	r25, 0x08	; 8
 104:	f0 f4       	brcc	.+60     	; 0x142 <DIO_WritePin+0xc6>
 106:	61 30       	cpi	r22, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_WritePin+0xa8>
 10a:	45 b3       	in	r20, 0x15	; 21
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	b9 01       	movw	r22, r18
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_WritePin+0x9c>
 114:	66 0f       	add	r22, r22
 116:	77 1f       	adc	r23, r23
 118:	9a 95       	dec	r25
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_WritePin+0x98>
 11c:	cb 01       	movw	r24, r22
 11e:	84 2b       	or	r24, r20
 120:	85 bb       	out	0x15, r24	; 21
 122:	08 95       	ret
 124:	45 b3       	in	r20, 0x15	; 21
 126:	80 51       	subi	r24, 0x10	; 16
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	b9 01       	movw	r22, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_WritePin+0xb8>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	8a 95       	dec	r24
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_WritePin+0xb4>
 138:	cb 01       	movw	r24, r22
 13a:	80 95       	com	r24
 13c:	84 23       	and	r24, r20
 13e:	85 bb       	out	0x15, r24	; 21
 140:	08 95       	ret
 142:	98 ee       	ldi	r25, 0xE8	; 232
 144:	98 0f       	add	r25, r24
 146:	98 30       	cpi	r25, 0x08	; 8
 148:	e8 f4       	brcc	.+58     	; 0x184 <DIO_WritePin+0x108>
 14a:	61 30       	cpi	r22, 0x01	; 1
 14c:	69 f4       	brne	.+26     	; 0x168 <DIO_WritePin+0xec>
 14e:	42 b3       	in	r20, 0x12	; 18
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	b9 01       	movw	r22, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_WritePin+0xe0>
 158:	66 0f       	add	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	9a 95       	dec	r25
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_WritePin+0xdc>
 160:	cb 01       	movw	r24, r22
 162:	84 2b       	or	r24, r20
 164:	82 bb       	out	0x12, r24	; 18
 166:	08 95       	ret
 168:	42 b3       	in	r20, 0x12	; 18
 16a:	88 51       	subi	r24, 0x18	; 24
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_WritePin+0xfc>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_WritePin+0xf8>
 17c:	cb 01       	movw	r24, r22
 17e:	80 95       	com	r24
 180:	84 23       	and	r24, r20
 182:	82 bb       	out	0x12, r24	; 18
 184:	08 95       	ret

00000186 <DIO_SetPinDirection>:
/* Return: return void		                                            */
/* Description: config the pin to be input or output	                */
/************************************************************************/
void DIO_SetPinDirection(uint8 PinNum, uint8 PinValue)
{
	if((PinNum >= NUM_0) && (PinNum <NUM_8)) /*check if Pins in PORTA*/
 186:	88 30       	cpi	r24, 0x08	; 8
 188:	e8 f4       	brcc	.+58     	; 0x1c4 <DIO_SetPinDirection+0x3e>
	{
		if (PinValue == NUM_1) /* Check Pin Value if OUT to set bit or IN to clear bit */
 18a:	61 30       	cpi	r22, 0x01	; 1
 18c:	69 f4       	brne	.+26     	; 0x1a8 <DIO_SetPinDirection+0x22>
		{
			SET_BIT(DDRA,(PinNum));
 18e:	4a b3       	in	r20, 0x1a	; 26
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	b9 01       	movw	r22, r18
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_SetPinDirection+0x16>
 198:	66 0f       	add	r22, r22
 19a:	77 1f       	adc	r23, r23
 19c:	8a 95       	dec	r24
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_SetPinDirection+0x12>
 1a0:	cb 01       	movw	r24, r22
 1a2:	84 2b       	or	r24, r20
 1a4:	8a bb       	out	0x1a, r24	; 26
 1a6:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,(PinNum));
 1a8:	4a b3       	in	r20, 0x1a	; 26
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	b9 01       	movw	r22, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_SetPinDirection+0x30>
 1b2:	66 0f       	add	r22, r22
 1b4:	77 1f       	adc	r23, r23
 1b6:	8a 95       	dec	r24
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_SetPinDirection+0x2c>
 1ba:	cb 01       	movw	r24, r22
 1bc:	80 95       	com	r24
 1be:	84 23       	and	r24, r20
 1c0:	8a bb       	out	0x1a, r24	; 26
 1c2:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_8) && (PinNum < NUM_16)) /*check if Pins in PORTB*/
 1c4:	98 ef       	ldi	r25, 0xF8	; 248
 1c6:	98 0f       	add	r25, r24
 1c8:	98 30       	cpi	r25, 0x08	; 8
 1ca:	f0 f4       	brcc	.+60     	; 0x208 <DIO_SetPinDirection+0x82>
	{
		if (PinValue == NUM_1)
 1cc:	61 30       	cpi	r22, 0x01	; 1
 1ce:	69 f4       	brne	.+26     	; 0x1ea <DIO_SetPinDirection+0x64>
		{
			SET_BIT(DDRB,(PinNum - NUM_8));
 1d0:	47 b3       	in	r20, 0x17	; 23
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	b9 01       	movw	r22, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_SetPinDirection+0x58>
 1da:	66 0f       	add	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	9a 95       	dec	r25
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_SetPinDirection+0x54>
 1e2:	cb 01       	movw	r24, r22
 1e4:	84 2b       	or	r24, r20
 1e6:	87 bb       	out	0x17, r24	; 23
 1e8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,(PinNum - NUM_8));
 1ea:	47 b3       	in	r20, 0x17	; 23
 1ec:	88 50       	subi	r24, 0x08	; 8
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	b9 01       	movw	r22, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_SetPinDirection+0x74>
 1f6:	66 0f       	add	r22, r22
 1f8:	77 1f       	adc	r23, r23
 1fa:	8a 95       	dec	r24
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_SetPinDirection+0x70>
 1fe:	cb 01       	movw	r24, r22
 200:	80 95       	com	r24
 202:	84 23       	and	r24, r20
 204:	87 bb       	out	0x17, r24	; 23
 206:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_16) && (PinNum < NUM_24)) /*check if Pins in PORTC*/
 208:	90 ef       	ldi	r25, 0xF0	; 240
 20a:	98 0f       	add	r25, r24
 20c:	98 30       	cpi	r25, 0x08	; 8
 20e:	f0 f4       	brcc	.+60     	; 0x24c <DIO_SetPinDirection+0xc6>
	{
		if (PinValue == NUM_1)
 210:	61 30       	cpi	r22, 0x01	; 1
 212:	69 f4       	brne	.+26     	; 0x22e <DIO_SetPinDirection+0xa8>
		{
			SET_BIT(DDRC,(PinNum - NUM_16));
 214:	44 b3       	in	r20, 0x14	; 20
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	b9 01       	movw	r22, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_SetPinDirection+0x9c>
 21e:	66 0f       	add	r22, r22
 220:	77 1f       	adc	r23, r23
 222:	9a 95       	dec	r25
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_SetPinDirection+0x98>
 226:	cb 01       	movw	r24, r22
 228:	84 2b       	or	r24, r20
 22a:	84 bb       	out	0x14, r24	; 20
 22c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,(PinNum - NUM_16));
 22e:	44 b3       	in	r20, 0x14	; 20
 230:	80 51       	subi	r24, 0x10	; 16
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	b9 01       	movw	r22, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_SetPinDirection+0xb8>
 23a:	66 0f       	add	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	8a 95       	dec	r24
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_SetPinDirection+0xb4>
 242:	cb 01       	movw	r24, r22
 244:	80 95       	com	r24
 246:	84 23       	and	r24, r20
 248:	84 bb       	out	0x14, r24	; 20
 24a:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
 24c:	98 ee       	ldi	r25, 0xE8	; 232
 24e:	98 0f       	add	r25, r24
 250:	98 30       	cpi	r25, 0x08	; 8
 252:	e8 f4       	brcc	.+58     	; 0x28e <DIO_SetPinDirection+0x108>
	{
		if (PinValue == NUM_1)
 254:	61 30       	cpi	r22, 0x01	; 1
 256:	69 f4       	brne	.+26     	; 0x272 <DIO_SetPinDirection+0xec>
		{
			SET_BIT(DDRD,(PinNum - NUM_24));
 258:	41 b3       	in	r20, 0x11	; 17
 25a:	21 e0       	ldi	r18, 0x01	; 1
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	b9 01       	movw	r22, r18
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_SetPinDirection+0xe0>
 262:	66 0f       	add	r22, r22
 264:	77 1f       	adc	r23, r23
 266:	9a 95       	dec	r25
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_SetPinDirection+0xdc>
 26a:	cb 01       	movw	r24, r22
 26c:	84 2b       	or	r24, r20
 26e:	81 bb       	out	0x11, r24	; 17
 270:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,(PinNum - NUM_24));
 272:	41 b3       	in	r20, 0x11	; 17
 274:	88 51       	subi	r24, 0x18	; 24
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	b9 01       	movw	r22, r18
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_SetPinDirection+0xfc>
 27e:	66 0f       	add	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	8a 95       	dec	r24
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_SetPinDirection+0xf8>
 286:	cb 01       	movw	r24, r22
 288:	80 95       	com	r24
 28a:	84 23       	and	r24, r20
 28c:	81 bb       	out	0x11, r24	; 17
 28e:	08 95       	ret

00000290 <Interrupts_init>:
/* return: void,                                                        */
/* Description: Init interrupts                                         */
/************************************************************************/
void Interrupts_init(void)
{
		SET_BIT(GICR,INT2); /* enable interrupt 2 */
 290:	8b b7       	in	r24, 0x3b	; 59
 292:	80 62       	ori	r24, 0x20	; 32
 294:	8b bf       	out	0x3b, r24	; 59
		sei(); /* enable global interrupt */
 296:	78 94       	sei
 298:	08 95       	ret

0000029a <__vector_3>:

/************************************************************************/
/* Interrupt to handle if button pressed                                */
/************************************************************************/
ISR(INT2_vect)
{
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	8f 93       	push	r24
	int2++;
 2a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 2aa:	8f 5f       	subi	r24, 0xFF	; 255
 2ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
 2b0:	8f 91       	pop	r24
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__vector_10>:

/************************************************************************/
/* Interrupt to handle when compare match occur                        */
/************************************************************************/
ISR(TIMER0_COMP_vect)
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
	Gtick++;
 2d8:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <Gtick>
 2dc:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <Gtick+0x1>
 2e0:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <Gtick+0x2>
 2e4:	50 91 64 00 	lds	r21, 0x0064	; 0x800064 <Gtick+0x3>
 2e8:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Gtick+0x4>
 2ec:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <Gtick+0x5>
 2f0:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Gtick+0x6>
 2f4:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Gtick+0x7>
 2f8:	a1 e0       	ldi	r26, 0x01	; 1
 2fa:	0e 94 c0 02 	call	0x580	; 0x580 <__adddi3_s8>
 2fe:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <Gtick>
 302:	30 93 62 00 	sts	0x0062, r19	; 0x800062 <Gtick+0x1>
 306:	40 93 63 00 	sts	0x0063, r20	; 0x800063 <Gtick+0x2>
 30a:	50 93 64 00 	sts	0x0064, r21	; 0x800064 <Gtick+0x3>
 30e:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <Gtick+0x4>
 312:	70 93 66 00 	sts	0x0066, r23	; 0x800066 <Gtick+0x5>
 316:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Gtick+0x6>
 31a:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Gtick+0x7>
}
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	7f 91       	pop	r23
 326:	6f 91       	pop	r22
 328:	5f 91       	pop	r21
 32a:	4f 91       	pop	r20
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <main>:


int main(void)
{
    uint8 state = GO; /* initial state to state machine */
	DIO_SetPinDirection(LED1,OUT); /* LED 1 */
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	8d e0       	ldi	r24, 0x0D	; 13
 33e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPinDirection>
	DIO_SetPinDirection(LED2,OUT); /* LED 2 */
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	8e e0       	ldi	r24, 0x0E	; 14
 346:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPinDirection>
	DIO_SetPinDirection(LED3,OUT); /* LED 3 */
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	8f e0       	ldi	r24, 0x0F	; 15
 34e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPinDirection>
	DIO_SetPinDirection(BUTTON1,IN);  /* button one*/
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	8a e0       	ldi	r24, 0x0A	; 10
 356:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPinDirection>
	
	TimerInit();
 35a:	0e 94 aa 02 	call	0x554	; 0x554 <TimerInit>
	Interrupts_init();
 35e:	0e 94 48 01 	call	0x290	; 0x290 <Interrupts_init>



int main(void)
{
    uint8 state = GO; /* initial state to state machine */
 362:	c1 e0       	ldi	r28, 0x01	; 1
							Gtick = NUM_0;
							int2  = NUM_0;
						}
						if (Gtick >= NUM_OVERFLOWS)
						{
							state = STOP;
 364:	d2 e0       	ldi	r29, 0x02	; 2
	
	TimerInit();
	Interrupts_init();
    while (NUM_1)
    {
			switch(state)
 366:	c1 30       	cpi	r28, 0x01	; 1
 368:	09 f4       	brne	.+2      	; 0x36c <main+0x32>
 36a:	55 c0       	rjmp	.+170    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 36c:	20 f0       	brcs	.+8      	; 0x376 <main+0x3c>
 36e:	c2 30       	cpi	r28, 0x02	; 2
 370:	09 f4       	brne	.+2      	; 0x374 <main+0x3a>
 372:	a1 c0       	rjmp	.+322    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 374:	f8 cf       	rjmp	.-16     	; 0x366 <main+0x2c>
				{
					case READY:
						DIO_WritePin(LED2,HIGH);
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	8e e0       	ldi	r24, 0x0E	; 14
 37a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
						DIO_WritePin(LED1,LOW);
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	8d e0       	ldi	r24, 0x0D	; 13
 382:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
						DIO_WritePin(LED3,LOW);
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	8f e0       	ldi	r24, 0x0F	; 15
 38a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
						if (int2 > NUM_0)
 38e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 392:	88 23       	and	r24, r24
 394:	99 f0       	breq	.+38     	; 0x3bc <main+0x82>
						{
							state = STOP;
							Gtick = NUM_0;
 396:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Gtick>
 39a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Gtick+0x1>
 39e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Gtick+0x2>
 3a2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Gtick+0x3>
 3a6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Gtick+0x4>
 3aa:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Gtick+0x5>
 3ae:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Gtick+0x6>
 3b2:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <Gtick+0x7>
							int2  = NUM_0;
 3b6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
						DIO_WritePin(LED2,HIGH);
						DIO_WritePin(LED1,LOW);
						DIO_WritePin(LED3,LOW);
						if (int2 > NUM_0)
						{
							state = STOP;
 3ba:	cd 2f       	mov	r28, r29
							Gtick = NUM_0;
							int2  = NUM_0;
						}
						if (Gtick >= NUM_OVERFLOWS)
 3bc:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <Gtick>
 3c0:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <Gtick+0x1>
 3c4:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <Gtick+0x2>
 3c8:	50 91 64 00 	lds	r21, 0x0064	; 0x800064 <Gtick+0x3>
 3cc:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Gtick+0x4>
 3d0:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <Gtick+0x5>
 3d4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Gtick+0x6>
 3d8:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Gtick+0x7>
 3dc:	2f 3c       	cpi	r18, 0xCF	; 207
 3de:	37 40       	sbci	r19, 0x07	; 7
 3e0:	41 05       	cpc	r20, r1
 3e2:	51 05       	cpc	r21, r1
 3e4:	61 05       	cpc	r22, r1
 3e6:	71 05       	cpc	r23, r1
 3e8:	81 05       	cpc	r24, r1
 3ea:	91 05       	cpc	r25, r1
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <main+0xb6>
 3ee:	08 f4       	brcc	.+2      	; 0x3f2 <main+0xb8>
 3f0:	ba cf       	rjmp	.-140    	; 0x366 <main+0x2c>
						{
							state = GO;
							Gtick = NUM_0;
 3f2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Gtick>
 3f6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Gtick+0x1>
 3fa:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Gtick+0x2>
 3fe:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Gtick+0x3>
 402:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Gtick+0x4>
 406:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Gtick+0x5>
 40a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Gtick+0x6>
 40e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <Gtick+0x7>
							Gtick = NUM_0;
							int2  = NUM_0;
						}
						if (Gtick >= NUM_OVERFLOWS)
						{
							state = GO;
 412:	c1 e0       	ldi	r28, 0x01	; 1
 414:	a8 cf       	rjmp	.-176    	; 0x366 <main+0x2c>
							Gtick = NUM_0;
						}
						break;
					case GO:
						DIO_WritePin(LED1,HIGH);
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	8d e0       	ldi	r24, 0x0D	; 13
 41a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
						DIO_WritePin(LED2,LOW);
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	8e e0       	ldi	r24, 0x0E	; 14
 422:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
						DIO_WritePin(LED3,LOW);
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	8f e0       	ldi	r24, 0x0F	; 15
 42a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
						if (int2 >NUM_0)
 42e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 432:	88 23       	and	r24, r24
 434:	99 f0       	breq	.+38     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
						{
							state = STOP;
							Gtick = NUM_0;
 436:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Gtick>
 43a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Gtick+0x1>
 43e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Gtick+0x2>
 442:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Gtick+0x3>
 446:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Gtick+0x4>
 44a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Gtick+0x5>
 44e:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Gtick+0x6>
 452:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <Gtick+0x7>
							int2  = NUM_0;
 456:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
						DIO_WritePin(LED1,HIGH);
						DIO_WritePin(LED2,LOW);
						DIO_WritePin(LED3,LOW);
						if (int2 >NUM_0)
						{
							state = STOP;
 45a:	cd 2f       	mov	r28, r29
							Gtick = NUM_0;
							int2  = NUM_0;
						}
						if (Gtick >= NUM_OVERFLOWS)
 45c:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <Gtick>
 460:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <Gtick+0x1>
 464:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <Gtick+0x2>
 468:	50 91 64 00 	lds	r21, 0x0064	; 0x800064 <Gtick+0x3>
 46c:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Gtick+0x4>
 470:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <Gtick+0x5>
 474:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Gtick+0x6>
 478:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Gtick+0x7>
 47c:	2f 3c       	cpi	r18, 0xCF	; 207
 47e:	37 40       	sbci	r19, 0x07	; 7
 480:	41 05       	cpc	r20, r1
 482:	51 05       	cpc	r21, r1
 484:	61 05       	cpc	r22, r1
 486:	71 05       	cpc	r23, r1
 488:	81 05       	cpc	r24, r1
 48a:	91 05       	cpc	r25, r1
 48c:	09 f0       	breq	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 48e:	08 f4       	brcc	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 490:	6a cf       	rjmp	.-300    	; 0x366 <main+0x2c>
						{
							state = STOP;
							Gtick = NUM_0;
 492:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Gtick>
 496:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Gtick+0x1>
 49a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Gtick+0x2>
 49e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Gtick+0x3>
 4a2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Gtick+0x4>
 4a6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Gtick+0x5>
 4aa:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Gtick+0x6>
 4ae:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <Gtick+0x7>
							Gtick = NUM_0;
							int2  = NUM_0;
						}
						if (Gtick >= NUM_OVERFLOWS)
						{
							state = STOP;
 4b2:	cd 2f       	mov	r28, r29
 4b4:	58 cf       	rjmp	.-336    	; 0x366 <main+0x2c>
							Gtick = NUM_0;
						}
						break;
					case STOP:
						DIO_WritePin(LED3,HIGH);
 4b6:	61 e0       	ldi	r22, 0x01	; 1
 4b8:	8f e0       	ldi	r24, 0x0F	; 15
 4ba:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
						DIO_WritePin(LED1,LOW);
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	8d e0       	ldi	r24, 0x0D	; 13
 4c2:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
						DIO_WritePin(LED2,LOW);
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	8e e0       	ldi	r24, 0x0E	; 14
 4ca:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
						if (int2 > NUM_0)
 4ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 4d2:	88 23       	and	r24, r24
 4d4:	91 f0       	breq	.+36     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
						{
							state = STOP;
							Gtick = NUM_0;
 4d6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Gtick>
 4da:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Gtick+0x1>
 4de:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Gtick+0x2>
 4e2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Gtick+0x3>
 4e6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Gtick+0x4>
 4ea:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Gtick+0x5>
 4ee:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Gtick+0x6>
 4f2:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <Gtick+0x7>
							int2  = NUM_0;
 4f6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
						}
						if (Gtick >= NUM_OVERFLOWS)
 4fa:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <Gtick>
 4fe:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <Gtick+0x1>
 502:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <Gtick+0x2>
 506:	50 91 64 00 	lds	r21, 0x0064	; 0x800064 <Gtick+0x3>
 50a:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Gtick+0x4>
 50e:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <Gtick+0x5>
 512:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Gtick+0x6>
 516:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Gtick+0x7>
 51a:	2f 3c       	cpi	r18, 0xCF	; 207
 51c:	37 40       	sbci	r19, 0x07	; 7
 51e:	41 05       	cpc	r20, r1
 520:	51 05       	cpc	r21, r1
 522:	61 05       	cpc	r22, r1
 524:	71 05       	cpc	r23, r1
 526:	81 05       	cpc	r24, r1
 528:	91 05       	cpc	r25, r1
 52a:	09 f0       	breq	.+2      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 52c:	08 f4       	brcc	.+2      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 52e:	1b cf       	rjmp	.-458    	; 0x366 <main+0x2c>
						{
							state = READY;
							Gtick = NUM_0;
 530:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Gtick>
 534:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Gtick+0x1>
 538:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Gtick+0x2>
 53c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Gtick+0x3>
 540:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Gtick+0x4>
 544:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Gtick+0x5>
 548:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Gtick+0x6>
 54c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <Gtick+0x7>
							Gtick = NUM_0;
							int2  = NUM_0;
						}
						if (Gtick >= NUM_OVERFLOWS)
						{
							state = READY;
 550:	c0 e0       	ldi	r28, 0x00	; 0
 552:	09 cf       	rjmp	.-494    	; 0x366 <main+0x2c>

00000554 <TimerInit>:
void TimerInit(void)
{
	/************************************************************************/
	/* Config Timer0 in CTC mode                                            */
	/************************************************************************/
	SET_BIT(TCCR0,WGM01);
 554:	83 b7       	in	r24, 0x33	; 51
 556:	88 60       	ori	r24, 0x08	; 8
 558:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,WGM00);
 55a:	83 b7       	in	r24, 0x33	; 51
 55c:	8f 7b       	andi	r24, 0xBF	; 191
 55e:	83 bf       	out	0x33, r24	; 51
	
	
	/************************************************************************/
	/* Clear TCNT0 and set OCR0                                             */
	/************************************************************************/
	TCNT0 = TCNT0_INITIAL_VALUE;
 560:	12 be       	out	0x32, r1	; 50
	OCR0  = OCR0_VALUE;
 562:	8c e7       	ldi	r24, 0x7C	; 124
 564:	8c bf       	out	0x3c, r24	; 60
	
	/************************************************************************/
	/* Set Prescaler to 64 so we can get 1ms every 250 count in OCR0        */
	/************************************************************************/
	SET_BIT(TCCR0,CS00);
 566:	83 b7       	in	r24, 0x33	; 51
 568:	81 60       	ori	r24, 0x01	; 1
 56a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS01);
 56c:	83 b7       	in	r24, 0x33	; 51
 56e:	82 60       	ori	r24, 0x02	; 2
 570:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS02);
 572:	83 b7       	in	r24, 0x33	; 51
 574:	8b 7f       	andi	r24, 0xFB	; 251
 576:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TIMSK,OCIE0); /* enable interrupt when compare match occur */
 578:	89 b7       	in	r24, 0x39	; 57
 57a:	82 60       	ori	r24, 0x02	; 2
 57c:	89 bf       	out	0x39, r24	; 57
 57e:	08 95       	ret

00000580 <__adddi3_s8>:
 580:	00 24       	eor	r0, r0
 582:	a7 fd       	sbrc	r26, 7
 584:	00 94       	com	r0
 586:	2a 0f       	add	r18, r26
 588:	30 1d       	adc	r19, r0
 58a:	40 1d       	adc	r20, r0
 58c:	50 1d       	adc	r21, r0
 58e:	60 1d       	adc	r22, r0
 590:	70 1d       	adc	r23, r0
 592:	80 1d       	adc	r24, r0
 594:	90 1d       	adc	r25, r0
 596:	08 95       	ret

00000598 <_exit>:
 598:	f8 94       	cli

0000059a <__stop_program>:
 59a:	ff cf       	rjmp	.-2      	; 0x59a <__stop_program>
