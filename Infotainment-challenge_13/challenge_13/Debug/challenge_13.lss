
challenge_13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000584  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016ce  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088d  00000000  00000000  00001e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000976  00000000  00000000  0000269f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f4  00000000  00000000  00003018  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e1  00000000  00000000  0000320c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e2a  00000000  00000000  000036ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00004517  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a4 02 	call	0x548	; 0x548 <main>
  7a:	0c 94 c0 02 	jmp	0x580	; 0x580 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <BCDSevSegment_Enable>:
/************************************************************************/
void BCDSevSegment_Disable(uint8 PinNum)
{
	DIO_SetPinDirection(PinNum,OUT);
	DIO_WritePin(PinNum,LOW);
}
  82:	cf 93       	push	r28
  84:	c8 2f       	mov	r28, r24
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	8c 2f       	mov	r24, r28
  90:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
  94:	cf 91       	pop	r28
  96:	08 95       	ret

00000098 <BCDSevSegment_DisplayNo>:
/* @param: PinNum take the pin to be configured                         */
/* Return: return void		                                            */
/* Description: Display number on seven segment			                */
/************************************************************************/
void BCDSevSegment_DisplayNo(uint8 Num)
{
  98:	cf 93       	push	r28
  9a:	c8 2f       	mov	r28, r24
	DIO_WritePin(SEGMENT_A,(GET_BIT(Num,SEG_BIT0)>>SEG_BIT0)); /* Write status of bit0 on SEGMENT_A */
  9c:	68 2f       	mov	r22, r24
  9e:	61 70       	andi	r22, 0x01	; 1
  a0:	88 e0       	ldi	r24, 0x08	; 8
  a2:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
	DIO_WritePin(SEGMENT_B,(GET_BIT(Num,SEG_BIT1)>>SEG_BIT1)); /* Write status of bit1 on SEGMENT_B */
  a6:	c1 fb       	bst	r28, 1
  a8:	66 27       	eor	r22, r22
  aa:	60 f9       	bld	r22, 0
  ac:	89 e0       	ldi	r24, 0x09	; 9
  ae:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
	DIO_WritePin(SEGMENT_C,(GET_BIT(Num,SEG_BIT2)>>SEG_BIT2)); /* Write status of bit2 on SEGMENT_C */
  b2:	c2 fb       	bst	r28, 2
  b4:	66 27       	eor	r22, r22
  b6:	60 f9       	bld	r22, 0
  b8:	8a e0       	ldi	r24, 0x0A	; 10
  ba:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
	DIO_WritePin(SEGMENT_D,(GET_BIT(Num,SEG_BIT3)>>SEG_BIT3)); /* Write status of bit3 on SEGMENT_D */
  be:	c3 fb       	bst	r28, 3
  c0:	66 27       	eor	r22, r22
  c2:	60 f9       	bld	r22, 0
  c4:	8b e0       	ldi	r24, 0x0B	; 11
  c6:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
}
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <DIO_WritePin>:
/* Return: return void		                                            */
/* Description: config the pin to be high or low		                */
/************************************************************************/
void DIO_WritePin(uint8 PinNum, uint8 PinValue)
{
	if((PinNum >= NUM_0) && (PinNum < NUM_8))/*check if Pins in PORTA*/
  ce:	88 30       	cpi	r24, 0x08	; 8
  d0:	e8 f4       	brcc	.+58     	; 0x10c <DIO_WritePin+0x3e>
	{
		if (PinValue == NUM_1) /* Check Pin Value if high to set bit or low to clear bit */
  d2:	61 30       	cpi	r22, 0x01	; 1
  d4:	69 f4       	brne	.+26     	; 0xf0 <DIO_WritePin+0x22>
		{
			SET_BIT(PORTA,PinNum);
  d6:	4b b3       	in	r20, 0x1b	; 27
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	b9 01       	movw	r22, r18
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_WritePin+0x16>
  e0:	66 0f       	add	r22, r22
  e2:	77 1f       	adc	r23, r23
  e4:	8a 95       	dec	r24
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_WritePin+0x12>
  e8:	cb 01       	movw	r24, r22
  ea:	84 2b       	or	r24, r20
  ec:	8b bb       	out	0x1b, r24	; 27
  ee:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,PinNum);
  f0:	4b b3       	in	r20, 0x1b	; 27
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	b9 01       	movw	r22, r18
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_WritePin+0x30>
  fa:	66 0f       	add	r22, r22
  fc:	77 1f       	adc	r23, r23
  fe:	8a 95       	dec	r24
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_WritePin+0x2c>
 102:	cb 01       	movw	r24, r22
 104:	80 95       	com	r24
 106:	84 23       	and	r24, r20
 108:	8b bb       	out	0x1b, r24	; 27
 10a:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_8) && (PinNum < NUM_16)) /*check if Pins in PORTB*/
 10c:	98 ef       	ldi	r25, 0xF8	; 248
 10e:	98 0f       	add	r25, r24
 110:	98 30       	cpi	r25, 0x08	; 8
 112:	f0 f4       	brcc	.+60     	; 0x150 <DIO_WritePin+0x82>
	{
		if (PinValue == NUM_1) /* Check Pin Value if high to set bit or low to clear bit */
 114:	61 30       	cpi	r22, 0x01	; 1
 116:	69 f4       	brne	.+26     	; 0x132 <DIO_WritePin+0x64>
		{
			SET_BIT(PORTB,(PinNum - NUM_8));
 118:	48 b3       	in	r20, 0x18	; 24
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	b9 01       	movw	r22, r18
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_WritePin+0x58>
 122:	66 0f       	add	r22, r22
 124:	77 1f       	adc	r23, r23
 126:	9a 95       	dec	r25
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_WritePin+0x54>
 12a:	cb 01       	movw	r24, r22
 12c:	84 2b       	or	r24, r20
 12e:	88 bb       	out	0x18, r24	; 24
 130:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,(PinNum - NUM_8));
 132:	48 b3       	in	r20, 0x18	; 24
 134:	88 50       	subi	r24, 0x08	; 8
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	b9 01       	movw	r22, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_WritePin+0x74>
 13e:	66 0f       	add	r22, r22
 140:	77 1f       	adc	r23, r23
 142:	8a 95       	dec	r24
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_WritePin+0x70>
 146:	cb 01       	movw	r24, r22
 148:	80 95       	com	r24
 14a:	84 23       	and	r24, r20
 14c:	88 bb       	out	0x18, r24	; 24
 14e:	08 95       	ret
		}
	}
	else if((PinNum >= NUM_16) && (PinNum < NUM_24)) /*check if Pins in PORTC*/
 150:	90 ef       	ldi	r25, 0xF0	; 240
 152:	98 0f       	add	r25, r24
 154:	98 30       	cpi	r25, 0x08	; 8
 156:	f0 f4       	brcc	.+60     	; 0x194 <DIO_WritePin+0xc6>
	{
		if(PinValue == NUM_1) /* Check Pin Value if high to set bit or low to clear bit */
 158:	61 30       	cpi	r22, 0x01	; 1
 15a:	69 f4       	brne	.+26     	; 0x176 <DIO_WritePin+0xa8>
		{
			SET_BIT(PORTC,(PinNum-NUM_16));
 15c:	45 b3       	in	r20, 0x15	; 21
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	b9 01       	movw	r22, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_WritePin+0x9c>
 166:	66 0f       	add	r22, r22
 168:	77 1f       	adc	r23, r23
 16a:	9a 95       	dec	r25
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_WritePin+0x98>
 16e:	cb 01       	movw	r24, r22
 170:	84 2b       	or	r24, r20
 172:	85 bb       	out	0x15, r24	; 21
 174:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,(PinNum-NUM_16));
 176:	45 b3       	in	r20, 0x15	; 21
 178:	80 51       	subi	r24, 0x10	; 16
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	b9 01       	movw	r22, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_WritePin+0xb8>
 182:	66 0f       	add	r22, r22
 184:	77 1f       	adc	r23, r23
 186:	8a 95       	dec	r24
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_WritePin+0xb4>
 18a:	cb 01       	movw	r24, r22
 18c:	80 95       	com	r24
 18e:	84 23       	and	r24, r20
 190:	85 bb       	out	0x15, r24	; 21
 192:	08 95       	ret
		}
	}
	else if((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
 194:	98 ee       	ldi	r25, 0xE8	; 232
 196:	98 0f       	add	r25, r24
 198:	98 30       	cpi	r25, 0x08	; 8
 19a:	e8 f4       	brcc	.+58     	; 0x1d6 <DIO_WritePin+0x108>
	{
		if (PinValue == NUM_1) /* Check Pin Value if high to set bit or low to clear bit */
 19c:	61 30       	cpi	r22, 0x01	; 1
 19e:	69 f4       	brne	.+26     	; 0x1ba <DIO_WritePin+0xec>
		{
			SET_BIT(PORTD,(PinNum-NUM_24));
 1a0:	42 b3       	in	r20, 0x12	; 18
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	b9 01       	movw	r22, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_WritePin+0xe0>
 1aa:	66 0f       	add	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	9a 95       	dec	r25
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_WritePin+0xdc>
 1b2:	cb 01       	movw	r24, r22
 1b4:	84 2b       	or	r24, r20
 1b6:	82 bb       	out	0x12, r24	; 18
 1b8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,(PinNum-NUM_24));
 1ba:	42 b3       	in	r20, 0x12	; 18
 1bc:	88 51       	subi	r24, 0x18	; 24
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	b9 01       	movw	r22, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_WritePin+0xfc>
 1c6:	66 0f       	add	r22, r22
 1c8:	77 1f       	adc	r23, r23
 1ca:	8a 95       	dec	r24
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_WritePin+0xf8>
 1ce:	cb 01       	movw	r24, r22
 1d0:	80 95       	com	r24
 1d2:	84 23       	and	r24, r20
 1d4:	82 bb       	out	0x12, r24	; 18
 1d6:	08 95       	ret

000001d8 <DIO_ReadPin>:
/* @param: PinNum take the pin we need to return its value              */
/* Return: return status of the pin		                                */
/* Description: return pin status			      		                */
/************************************************************************/
uint8 DIO_ReadPin(uint8 PinNum)
{
 1d8:	98 2f       	mov	r25, r24
		if((PinNum >= NUM_0) && (PinNum < NUM_8)) /*check if Pins in PORTA*/
 1da:	88 30       	cpi	r24, 0x08	; 8
 1dc:	60 f4       	brcc	.+24     	; 0x1f6 <DIO_ReadPin+0x1e>
		{
			return GET_BIT(PINA,PinNum); /* Return Bit status*/
 1de:	49 b3       	in	r20, 0x19	; 25
 1e0:	21 e0       	ldi	r18, 0x01	; 1
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	b9 01       	movw	r22, r18
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_ReadPin+0x14>
 1e8:	66 0f       	add	r22, r22
 1ea:	77 1f       	adc	r23, r23
 1ec:	8a 95       	dec	r24
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_ReadPin+0x10>
 1f0:	cb 01       	movw	r24, r22
 1f2:	84 23       	and	r24, r20
 1f4:	08 95       	ret
		}
		else if((PinNum >= NUM_8) && (PinNum < NUM_16)) /*check if Pins in PORTB*/
 1f6:	88 ef       	ldi	r24, 0xF8	; 248
 1f8:	89 0f       	add	r24, r25
 1fa:	88 30       	cpi	r24, 0x08	; 8
 1fc:	60 f4       	brcc	.+24     	; 0x216 <DIO_ReadPin+0x3e>
		{
			return GET_BIT(PINB,(PinNum-NUM_8));
 1fe:	46 b3       	in	r20, 0x16	; 22
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	b9 01       	movw	r22, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_ReadPin+0x34>
 208:	66 0f       	add	r22, r22
 20a:	77 1f       	adc	r23, r23
 20c:	8a 95       	dec	r24
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_ReadPin+0x30>
 210:	cb 01       	movw	r24, r22
 212:	84 23       	and	r24, r20
 214:	08 95       	ret
		}
		else if((PinNum >= NUM_16) && (PinNum < NUM_24)) /*check if Pins in PORTC*/
 216:	80 ef       	ldi	r24, 0xF0	; 240
 218:	89 0f       	add	r24, r25
 21a:	88 30       	cpi	r24, 0x08	; 8
 21c:	60 f4       	brcc	.+24     	; 0x236 <DIO_ReadPin+0x5e>
		{
			return GET_BIT(PINC,(PinNum-NUM_16));
 21e:	43 b3       	in	r20, 0x13	; 19
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	b9 01       	movw	r22, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_ReadPin+0x54>
 228:	66 0f       	add	r22, r22
 22a:	77 1f       	adc	r23, r23
 22c:	8a 95       	dec	r24
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_ReadPin+0x50>
 230:	cb 01       	movw	r24, r22
 232:	84 23       	and	r24, r20
 234:	08 95       	ret
		}
		else if((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
 236:	88 ee       	ldi	r24, 0xE8	; 232
 238:	89 0f       	add	r24, r25
 23a:	88 30       	cpi	r24, 0x08	; 8
 23c:	60 f4       	brcc	.+24     	; 0x256 <DIO_ReadPin+0x7e>
		{
			return GET_BIT(PIND,(PinNum-NUM_24));
 23e:	40 b3       	in	r20, 0x10	; 16
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	b9 01       	movw	r22, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_ReadPin+0x74>
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	8a 95       	dec	r24
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_ReadPin+0x70>
 250:	cb 01       	movw	r24, r22
 252:	84 23       	and	r24, r20
 254:	08 95       	ret
		}
	return NUM_0;
 256:	80 e0       	ldi	r24, 0x00	; 0
}
 258:	08 95       	ret

0000025a <DIO_SetPinDirection>:
/* Return: return void		                                            */
/* Description: config the pin to be input or output	                */
/************************************************************************/
void DIO_SetPinDirection(uint8 PinNum, uint8 PinValue)
{
	if((PinNum >= NUM_0) && (PinNum <NUM_8)) /*check if Pins in PORTA*/
 25a:	88 30       	cpi	r24, 0x08	; 8
 25c:	e8 f4       	brcc	.+58     	; 0x298 <DIO_SetPinDirection+0x3e>
	{
		if (PinValue == NUM_1) /* Check Pin Value if OUT to set bit or IN to clear bit */
 25e:	61 30       	cpi	r22, 0x01	; 1
 260:	69 f4       	brne	.+26     	; 0x27c <DIO_SetPinDirection+0x22>
		{
			SET_BIT(DDRA,(PinNum));
 262:	4a b3       	in	r20, 0x1a	; 26
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	b9 01       	movw	r22, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_SetPinDirection+0x16>
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	8a 95       	dec	r24
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_SetPinDirection+0x12>
 274:	cb 01       	movw	r24, r22
 276:	84 2b       	or	r24, r20
 278:	8a bb       	out	0x1a, r24	; 26
 27a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,(PinNum));
 27c:	4a b3       	in	r20, 0x1a	; 26
 27e:	21 e0       	ldi	r18, 0x01	; 1
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	b9 01       	movw	r22, r18
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_SetPinDirection+0x30>
 286:	66 0f       	add	r22, r22
 288:	77 1f       	adc	r23, r23
 28a:	8a 95       	dec	r24
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_SetPinDirection+0x2c>
 28e:	cb 01       	movw	r24, r22
 290:	80 95       	com	r24
 292:	84 23       	and	r24, r20
 294:	8a bb       	out	0x1a, r24	; 26
 296:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_8) && (PinNum < NUM_16)) /*check if Pins in PORTB*/
 298:	98 ef       	ldi	r25, 0xF8	; 248
 29a:	98 0f       	add	r25, r24
 29c:	98 30       	cpi	r25, 0x08	; 8
 29e:	f0 f4       	brcc	.+60     	; 0x2dc <DIO_SetPinDirection+0x82>
	{
		if (PinValue == NUM_1)
 2a0:	61 30       	cpi	r22, 0x01	; 1
 2a2:	69 f4       	brne	.+26     	; 0x2be <DIO_SetPinDirection+0x64>
		{
			SET_BIT(DDRB,(PinNum - NUM_8));
 2a4:	47 b3       	in	r20, 0x17	; 23
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	b9 01       	movw	r22, r18
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_SetPinDirection+0x58>
 2ae:	66 0f       	add	r22, r22
 2b0:	77 1f       	adc	r23, r23
 2b2:	9a 95       	dec	r25
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_SetPinDirection+0x54>
 2b6:	cb 01       	movw	r24, r22
 2b8:	84 2b       	or	r24, r20
 2ba:	87 bb       	out	0x17, r24	; 23
 2bc:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,(PinNum - NUM_8));
 2be:	47 b3       	in	r20, 0x17	; 23
 2c0:	88 50       	subi	r24, 0x08	; 8
 2c2:	21 e0       	ldi	r18, 0x01	; 1
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	b9 01       	movw	r22, r18
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_SetPinDirection+0x74>
 2ca:	66 0f       	add	r22, r22
 2cc:	77 1f       	adc	r23, r23
 2ce:	8a 95       	dec	r24
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_SetPinDirection+0x70>
 2d2:	cb 01       	movw	r24, r22
 2d4:	80 95       	com	r24
 2d6:	84 23       	and	r24, r20
 2d8:	87 bb       	out	0x17, r24	; 23
 2da:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_16) && (PinNum < NUM_24)) /*check if Pins in PORTC*/
 2dc:	90 ef       	ldi	r25, 0xF0	; 240
 2de:	98 0f       	add	r25, r24
 2e0:	98 30       	cpi	r25, 0x08	; 8
 2e2:	f0 f4       	brcc	.+60     	; 0x320 <DIO_SetPinDirection+0xc6>
	{
		if (PinValue == NUM_1)
 2e4:	61 30       	cpi	r22, 0x01	; 1
 2e6:	69 f4       	brne	.+26     	; 0x302 <DIO_SetPinDirection+0xa8>
		{
			SET_BIT(DDRC,(PinNum - NUM_16));
 2e8:	44 b3       	in	r20, 0x14	; 20
 2ea:	21 e0       	ldi	r18, 0x01	; 1
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	b9 01       	movw	r22, r18
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_SetPinDirection+0x9c>
 2f2:	66 0f       	add	r22, r22
 2f4:	77 1f       	adc	r23, r23
 2f6:	9a 95       	dec	r25
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_SetPinDirection+0x98>
 2fa:	cb 01       	movw	r24, r22
 2fc:	84 2b       	or	r24, r20
 2fe:	84 bb       	out	0x14, r24	; 20
 300:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,(PinNum - NUM_16));
 302:	44 b3       	in	r20, 0x14	; 20
 304:	80 51       	subi	r24, 0x10	; 16
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	b9 01       	movw	r22, r18
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_SetPinDirection+0xb8>
 30e:	66 0f       	add	r22, r22
 310:	77 1f       	adc	r23, r23
 312:	8a 95       	dec	r24
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_SetPinDirection+0xb4>
 316:	cb 01       	movw	r24, r22
 318:	80 95       	com	r24
 31a:	84 23       	and	r24, r20
 31c:	84 bb       	out	0x14, r24	; 20
 31e:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
 320:	98 ee       	ldi	r25, 0xE8	; 232
 322:	98 0f       	add	r25, r24
 324:	98 30       	cpi	r25, 0x08	; 8
 326:	e8 f4       	brcc	.+58     	; 0x362 <DIO_SetPinDirection+0x108>
	{
		if (PinValue == NUM_1)
 328:	61 30       	cpi	r22, 0x01	; 1
 32a:	69 f4       	brne	.+26     	; 0x346 <DIO_SetPinDirection+0xec>
		{
			SET_BIT(DDRD,(PinNum - NUM_24));
 32c:	41 b3       	in	r20, 0x11	; 17
 32e:	21 e0       	ldi	r18, 0x01	; 1
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	b9 01       	movw	r22, r18
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_SetPinDirection+0xe0>
 336:	66 0f       	add	r22, r22
 338:	77 1f       	adc	r23, r23
 33a:	9a 95       	dec	r25
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_SetPinDirection+0xdc>
 33e:	cb 01       	movw	r24, r22
 340:	84 2b       	or	r24, r20
 342:	81 bb       	out	0x11, r24	; 17
 344:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,(PinNum - NUM_24));
 346:	41 b3       	in	r20, 0x11	; 17
 348:	88 51       	subi	r24, 0x18	; 24
 34a:	21 e0       	ldi	r18, 0x01	; 1
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	b9 01       	movw	r22, r18
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_SetPinDirection+0xfc>
 352:	66 0f       	add	r22, r22
 354:	77 1f       	adc	r23, r23
 356:	8a 95       	dec	r24
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_SetPinDirection+0xf8>
 35a:	cb 01       	movw	r24, r22
 35c:	80 95       	com	r24
 35e:	84 23       	and	r24, r20
 360:	81 bb       	out	0x11, r24	; 17
 362:	08 95       	ret

00000364 <KeyPad_Init>:
void KeyPad_Init(void)
{
	/************************************************************************/
	/* Set Columns Direction                                                */
	/************************************************************************/
	DIO_SetPinDirection(COL1,OUT);
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	85 e1       	ldi	r24, 0x15	; 21
 368:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
	DIO_SetPinDirection(COL2,OUT);
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	86 e1       	ldi	r24, 0x16	; 22
 370:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
	DIO_SetPinDirection(COL3,OUT);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	87 e1       	ldi	r24, 0x17	; 23
 378:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
	/************************************************************************/
	/* SET Rows Direction                                                   */
	/************************************************************************/
	DIO_SetPinDirection(ROW1,IN);
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	82 e1       	ldi	r24, 0x12	; 18
 380:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
	DIO_SetPinDirection(ROW2,IN);
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	83 e1       	ldi	r24, 0x13	; 19
 388:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
	DIO_SetPinDirection(ROW3,IN);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	84 e1       	ldi	r24, 0x14	; 20
 390:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
	/************************************************************************/
	/* Write initial value on columns                                       */
	/************************************************************************/
	DIO_WritePin(COL1,HIGH);
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	85 e1       	ldi	r24, 0x15	; 21
 398:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
	DIO_WritePin(COL2,HIGH);
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	86 e1       	ldi	r24, 0x16	; 22
 3a0:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
	DIO_WritePin(COL3,HIGH);
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	87 e1       	ldi	r24, 0x17	; 23
 3a8:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
	/************************************************************************/
	/* Activate Pull-up resistor on Rows                                    */
	/************************************************************************/
	DIO_WritePin(ROW1,HIGH);
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	82 e1       	ldi	r24, 0x12	; 18
 3b0:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
	DIO_WritePin(ROW2,HIGH);
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	83 e1       	ldi	r24, 0x13	; 19
 3b8:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
	DIO_WritePin(ROW3,HIGH);
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	84 e1       	ldi	r24, 0x14	; 20
 3c0:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
 3c4:	08 95       	ret

000003c6 <KeyPad_GetPressedKey>:
/* @param: Void							                                */
/* @return: return number detected                                      */
/* Description: Detect pressed key and return its value                 */
/************************************************************************/
uint8 KeyPad_GetPressedKey(void)
{
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
	while(NUM_1){
		for (uint8 i = NUM_0; i < COL_NUM; i++)
 3ca:	d0 e0       	ldi	r29, 0x00	; 0
		{
			KeyPad_Init();
 3cc:	0e 94 b2 01 	call	0x364	; 0x364 <KeyPad_Init>
			DIO_WritePin((COL1 + i), LOW); /* write low on one column each loop  */
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	85 e1       	ldi	r24, 0x15	; 21
 3d4:	8d 0f       	add	r24, r29
 3d6:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
			for (uint8 j = NUM_0; j < ROW_NUM; j++)
 3da:	c0 e0       	ldi	r28, 0x00	; 0
			{
				if (!(DIO_ReadPin((ROW1 + j)))) /*detect if key pressed */
 3dc:	82 e1       	ldi	r24, 0x12	; 18
 3de:	8c 0f       	add	r24, r28
 3e0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_ReadPin>
 3e4:	81 11       	cpse	r24, r1
 3e6:	07 c0       	rjmp	.+14     	; 0x3f6 <KeyPad_GetPressedKey+0x30>
 3e8:	8c 2f       	mov	r24, r28
 3ea:	88 0f       	add	r24, r24
 3ec:	c8 0f       	add	r28, r24
 3ee:	df 5f       	subi	r29, 0xFF	; 255
 3f0:	8c 2f       	mov	r24, r28
 3f2:	8d 0f       	add	r24, r29
 3f4:	07 c0       	rjmp	.+14     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	while(NUM_1){
		for (uint8 i = NUM_0; i < COL_NUM; i++)
		{
			KeyPad_Init();
			DIO_WritePin((COL1 + i), LOW); /* write low on one column each loop  */
			for (uint8 j = NUM_0; j < ROW_NUM; j++)
 3f6:	cf 5f       	subi	r28, 0xFF	; 255
 3f8:	c3 30       	cpi	r28, 0x03	; 3
 3fa:	81 f7       	brne	.-32     	; 0x3dc <KeyPad_GetPressedKey+0x16>
/* Description: Detect pressed key and return its value                 */
/************************************************************************/
uint8 KeyPad_GetPressedKey(void)
{
	while(NUM_1){
		for (uint8 i = NUM_0; i < COL_NUM; i++)
 3fc:	df 5f       	subi	r29, 0xFF	; 255
 3fe:	d3 30       	cpi	r29, 0x03	; 3
 400:	29 f7       	brne	.-54     	; 0x3cc <KeyPad_GetPressedKey+0x6>
 402:	e3 cf       	rjmp	.-58     	; 0x3ca <KeyPad_GetPressedKey+0x4>
				}
			}
		}
	}
	return NUM_0; /* if no key pressed return 0 */
}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <LCD_SendCommand>:
/* @param: command, command to be sent to LCD                           */
/* return: void													        */
/* Description: function take hexa command                              */
/************************************************************************/
void LCD_SendCommand(uint8 Command)
{
 40a:	cf 93       	push	r28
 40c:	c8 2f       	mov	r28, r24
	/*Config Control Reg*/
	DIO_WritePin(LCD_RS,LOW); /* RS set to low to send command*/
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
	DIO_WritePin(LCD_RW,LOW); /* RW set to write */
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41e:	8f e9       	ldi	r24, 0x9F	; 159
 420:	9f e0       	ldi	r25, 0x0F	; 15
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <LCD_SendCommand+0x18>
 426:	00 c0       	rjmp	.+0      	; 0x428 <LCD_SendCommand+0x1e>
 428:	00 00       	nop
	_delay_ms(ONE_MS);
	DIO_WritePin(LCD_E,HIGH); /* Set EN pin to high */
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	83 e0       	ldi	r24, 0x03	; 3
 42e:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
 432:	8f e9       	ldi	r24, 0x9F	; 159
 434:	9f e0       	ldi	r25, 0x0F	; 15
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <LCD_SendCommand+0x2c>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <LCD_SendCommand+0x32>
 43c:	00 00       	nop
	_delay_ms(ONE_MS);
	/* Send Command Most significant bit first */
	DIO_WritePin(LCD_D4,(GET_BIT(Command,LCD_BIT4)>>LCD_BIT4));
 43e:	c4 fb       	bst	r28, 4
 440:	66 27       	eor	r22, r22
 442:	60 f9       	bld	r22, 0
 444:	84 e0       	ldi	r24, 0x04	; 4
 446:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
	DIO_WritePin(LCD_D5,(GET_BIT(Command,LCD_BIT5)>>LCD_BIT5));
 44a:	c5 fb       	bst	r28, 5
 44c:	66 27       	eor	r22, r22
 44e:	60 f9       	bld	r22, 0
 450:	85 e0       	ldi	r24, 0x05	; 5
 452:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
	DIO_WritePin(LCD_D6,(GET_BIT(Command,LCD_BIT6)>>LCD_BIT6));
 456:	c6 fb       	bst	r28, 6
 458:	66 27       	eor	r22, r22
 45a:	60 f9       	bld	r22, 0
 45c:	86 e0       	ldi	r24, 0x06	; 6
 45e:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
	DIO_WritePin(LCD_D7,(GET_BIT(Command,LCD_BIT7)>>LCD_BIT7));
 462:	6c 2f       	mov	r22, r28
 464:	66 1f       	adc	r22, r22
 466:	66 27       	eor	r22, r22
 468:	66 1f       	adc	r22, r22
 46a:	87 e0       	ldi	r24, 0x07	; 7
 46c:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
 470:	8f e9       	ldi	r24, 0x9F	; 159
 472:	9f e0       	ldi	r25, 0x0F	; 15
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <LCD_SendCommand+0x6a>
 478:	00 c0       	rjmp	.+0      	; 0x47a <LCD_SendCommand+0x70>
 47a:	00 00       	nop
	_delay_ms(ONE_MS);
	DIO_WritePin(LCD_E,LOW); /* latch data by writing low on EN pin */
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
 484:	8f e9       	ldi	r24, 0x9F	; 159
 486:	9f e0       	ldi	r25, 0x0F	; 15
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <LCD_SendCommand+0x7e>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <LCD_SendCommand+0x84>
 48e:	00 00       	nop
	_delay_ms(ONE_MS);
	DIO_WritePin(LCD_E,HIGH);/* set EN pin */ 
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	83 e0       	ldi	r24, 0x03	; 3
 494:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
 498:	8f e9       	ldi	r24, 0x9F	; 159
 49a:	9f e0       	ldi	r25, 0x0F	; 15
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <LCD_SendCommand+0x92>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <LCD_SendCommand+0x98>
 4a2:	00 00       	nop
	_delay_ms(ONE_MS);
	/*Send Least Significant bit */
	DIO_WritePin(LCD_D4,(GET_BIT(Command,LCD_BIT0)>>LCD_BIT0));
 4a4:	6c 2f       	mov	r22, r28
 4a6:	61 70       	andi	r22, 0x01	; 1
 4a8:	84 e0       	ldi	r24, 0x04	; 4
 4aa:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
	DIO_WritePin(LCD_D5,(GET_BIT(Command,LCD_BIT1)>>LCD_BIT1));
 4ae:	c1 fb       	bst	r28, 1
 4b0:	66 27       	eor	r22, r22
 4b2:	60 f9       	bld	r22, 0
 4b4:	85 e0       	ldi	r24, 0x05	; 5
 4b6:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
	DIO_WritePin(LCD_D6,(GET_BIT(Command,LCD_BIT2)>>LCD_BIT2));
 4ba:	c2 fb       	bst	r28, 2
 4bc:	66 27       	eor	r22, r22
 4be:	60 f9       	bld	r22, 0
 4c0:	86 e0       	ldi	r24, 0x06	; 6
 4c2:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
	DIO_WritePin(LCD_D7,(GET_BIT(Command,LCD_BIT3)>>LCD_BIT3));
 4c6:	c3 fb       	bst	r28, 3
 4c8:	66 27       	eor	r22, r22
 4ca:	60 f9       	bld	r22, 0
 4cc:	87 e0       	ldi	r24, 0x07	; 7
 4ce:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
 4d2:	8f e9       	ldi	r24, 0x9F	; 159
 4d4:	9f e0       	ldi	r25, 0x0F	; 15
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <LCD_SendCommand+0xcc>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <LCD_SendCommand+0xd2>
 4dc:	00 00       	nop
	_delay_ms(ONE_MS);
	DIO_WritePin(LCD_E,LOW);
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	83 e0       	ldi	r24, 0x03	; 3
 4e2:	0e 94 67 00 	call	0xce	; 0xce <DIO_WritePin>
 4e6:	8f e9       	ldi	r24, 0x9F	; 159
 4e8:	9f e0       	ldi	r25, 0x0F	; 15
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_SendCommand+0xe0>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_SendCommand+0xe6>
 4f0:	00 00       	nop
	_delay_ms(ONE_MS);
	
}
 4f2:	cf 91       	pop	r28
 4f4:	08 95       	ret

000004f6 <LCD_Init>:
/* Description: function Initialize LCD		                            */
/************************************************************************/
void LCD_Init(void)
{
	/* Config Control Pins and set thir direction*/
	DIO_SetPinDirection(PIN1,OUT);
 4f6:	61 e0       	ldi	r22, 0x01	; 1
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN2,OUT);
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	82 e0       	ldi	r24, 0x02	; 2
 502:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN3,OUT);
 506:	61 e0       	ldi	r22, 0x01	; 1
 508:	83 e0       	ldi	r24, 0x03	; 3
 50a:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
	/*config data pins direction */
	DIO_SetPinDirection(PIN4,OUT);
 50e:	61 e0       	ldi	r22, 0x01	; 1
 510:	84 e0       	ldi	r24, 0x04	; 4
 512:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN5,OUT);
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	85 e0       	ldi	r24, 0x05	; 5
 51a:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN6,OUT);
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	86 e0       	ldi	r24, 0x06	; 6
 522:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN7,OUT);
 526:	61 e0       	ldi	r22, 0x01	; 1
 528:	87 e0       	ldi	r24, 0x07	; 7
 52a:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
	
	
	/* Initialize LCD in Four bits Mode and two lines */
	LCD_SendCommand(LCD_FOUR_BIT_TWO_LINE_MODE);
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_SendCommand>
	LCD_SendCommand(LCD_FOUR_BIT_DATA_MODE);
 534:	88 e2       	ldi	r24, 0x28	; 40
 536:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_SendCommand>
	/* Clear LCD and set cursor at the beginning */
	LCD_SendCommand(LCD_CURSOR_OFF);
 53a:	8c e0       	ldi	r24, 0x0C	; 12
 53c:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_SendCommand>
	LCD_SendCommand(LCD_CLEAR);
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_SendCommand>
 546:	08 95       	ret

00000548 <main>:
	#endif
	/************************************************************************/
	/* test LCD driver                                                      */
	/************************************************************************/
	#if ENABLE_CODE
	LCD_Init();
 548:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_Init>
	
	/************************************************************************/
	/* Test Seven Segment and Keypad Drivers                                */
	/************************************************************************/
	#if ENABLE_CODE
	DIO_SetPinDirection(SEGMENT_A,OUT);
 54c:	61 e0       	ldi	r22, 0x01	; 1
 54e:	88 e0       	ldi	r24, 0x08	; 8
 550:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
	DIO_SetPinDirection(SEGMENT_B,OUT);
 554:	61 e0       	ldi	r22, 0x01	; 1
 556:	89 e0       	ldi	r24, 0x09	; 9
 558:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
	DIO_SetPinDirection(SEGMENT_C,OUT);
 55c:	61 e0       	ldi	r22, 0x01	; 1
 55e:	8a e0       	ldi	r24, 0x0A	; 10
 560:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
	DIO_SetPinDirection(SEGMENT_D,OUT);
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	8b e0       	ldi	r24, 0x0B	; 11
 568:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_SetPinDirection>
	KeyPad_Init();
 56c:	0e 94 b2 01 	call	0x364	; 0x364 <KeyPad_Init>
	uint8 pressed_key = NUM_0;
	#endif
    while (NUM_1) 
    {
		
		BCDSevSegment_Enable(SEG1_EN);
 570:	8a e1       	ldi	r24, 0x1A	; 26
 572:	0e 94 41 00 	call	0x82	; 0x82 <BCDSevSegment_Enable>
		pressed_key = KeyPad_GetPressedKey();
 576:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <KeyPad_GetPressedKey>
		BCDSevSegment_DisplayNo(pressed_key);
 57a:	0e 94 4c 00 	call	0x98	; 0x98 <BCDSevSegment_DisplayNo>
 57e:	f8 cf       	rjmp	.-16     	; 0x570 <main+0x28>

00000580 <_exit>:
 580:	f8 94       	cli

00000582 <__stop_program>:
 582:	ff cf       	rjmp	.-2      	; 0x582 <__stop_program>
