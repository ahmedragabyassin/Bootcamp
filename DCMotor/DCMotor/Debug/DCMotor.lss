
DCMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000064c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  0000064c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dd2  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000874  00000000  00000000  00001562  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000845  00000000  00000000  00001dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  0000261c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000482  00000000  00000000  000027a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b2  00000000  00000000  00002c22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000034d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3c 02 	call	0x478	; 0x478 <main>
  74:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DC_Motor_Init>:
/* @param: MotorDirPinB, direction pin B                                */
/* return : void			                                            */
/* Description:set motor pins direction by writing IN or OUT on pins    */
/************************************************************************/
void DC_Motor_Init(uint8 MotorEnablePin,uint8 MotorDirPinA,uint8 MotorDirPinB)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	d6 2f       	mov	r29, r22
  82:	c4 2f       	mov	r28, r20
	DIO_SetPinDirection(MotorEnablePin,OUT);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_SetPinDirection>
	DIO_SetPinDirection(MotorDirPinA,OUT);
  8a:	61 e0       	ldi	r22, 0x01	; 1
  8c:	8d 2f       	mov	r24, r29
  8e:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_SetPinDirection>
	DIO_SetPinDirection(MotorDirPinB,OUT);
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	8c 2f       	mov	r24, r28
  96:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_SetPinDirection>
	
}
  9a:	df 91       	pop	r29
  9c:	cf 91       	pop	r28
  9e:	08 95       	ret

000000a0 <DC_MotorMove>:
/* @param: Dir, direction to move forward or backward					*/
/* return : void			                                            */
/* Description:set motor direction to move forward or backward			*/
/************************************************************************/
void DC_MotorMove(uint8 MotorEnablePin,uint8 DIR_A,uint8 DIR_B, uint8 Dir)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	c6 2f       	mov	r28, r22
  a6:	d4 2f       	mov	r29, r20
	switch (Dir)
  a8:	21 30       	cpi	r18, 0x01	; 1
  aa:	29 f1       	breq	.+74     	; 0xf6 <DC_MotorMove+0x56>
  ac:	20 f0       	brcs	.+8      	; 0xb6 <DC_MotorMove+0x16>
  ae:	22 30       	cpi	r18, 0x02	; 2
  b0:	09 f4       	brne	.+2      	; 0xb4 <DC_MotorMove+0x14>
  b2:	41 c0       	rjmp	.+130    	; 0x136 <DC_MotorMove+0x96>
  b4:	43 c0       	rjmp	.+134    	; 0x13c <DC_MotorMove+0x9c>
	{
		case MOTOR_FORWARD:
			if (DIO_ReadPin(DIR_A) == LOW && DIO_ReadPin(DIR_B) == HIGH ) /* check if the previous was backward make it stop first then reverse */
  b6:	86 2f       	mov	r24, r22
  b8:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_ReadPin>
  bc:	81 11       	cpse	r24, r1
  be:	12 c0       	rjmp	.+36     	; 0xe4 <DC_MotorMove+0x44>
  c0:	8d 2f       	mov	r24, r29
  c2:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_ReadPin>
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	69 f4       	brne	.+26     	; 0xe4 <DC_MotorMove+0x44>
			{
				DIO_WritePin(DIR_B,LOW);
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	8d 2f       	mov	r24, r29
  ce:	0e 94 a1 00 	call	0x142	; 0x142 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	81 ee       	ldi	r24, 0xE1	; 225
  d6:	94 e0       	ldi	r25, 0x04	; 4
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <DC_MotorMove+0x38>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <DC_MotorMove+0x42>
  e2:	00 00       	nop
				_delay_ms(100); /* delay to slow down the motor */
			}
			DIO_WritePin(DIR_A,HIGH);
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	8c 2f       	mov	r24, r28
  e8:	0e 94 a1 00 	call	0x142	; 0x142 <DIO_WritePin>
			DIO_WritePin(DIR_B,LOW);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	8d 2f       	mov	r24, r29
  f0:	0e 94 a1 00 	call	0x142	; 0x142 <DIO_WritePin>
			break;
  f4:	23 c0       	rjmp	.+70     	; 0x13c <DC_MotorMove+0x9c>
		case MOTOR_BACKWARD:
			if (DIO_ReadPin(DIR_B) == LOW && DIO_ReadPin(DIR_A) == HIGH ) /* check if the previous was forward make it stop first then reverse */
  f6:	84 2f       	mov	r24, r20
  f8:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_ReadPin>
  fc:	81 11       	cpse	r24, r1
  fe:	12 c0       	rjmp	.+36     	; 0x124 <DC_MotorMove+0x84>
 100:	8c 2f       	mov	r24, r28
 102:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_ReadPin>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DC_MotorMove+0x84>
			{
				DIO_WritePin(DIR_A,LOW);
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	8c 2f       	mov	r24, r28
 10e:	0e 94 a1 00 	call	0x142	; 0x142 <DIO_WritePin>
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	81 ee       	ldi	r24, 0xE1	; 225
 116:	94 e0       	ldi	r25, 0x04	; 4
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <DC_MotorMove+0x78>
 120:	00 c0       	rjmp	.+0      	; 0x122 <DC_MotorMove+0x82>
 122:	00 00       	nop
				_delay_ms(100); /* delay to slow down the motor */
			}
			DIO_WritePin(DIR_B,HIGH);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	8d 2f       	mov	r24, r29
 128:	0e 94 a1 00 	call	0x142	; 0x142 <DIO_WritePin>
			DIO_WritePin(DIR_A,LOW);
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	8c 2f       	mov	r24, r28
 130:	0e 94 a1 00 	call	0x142	; 0x142 <DIO_WritePin>
			break;
 134:	03 c0       	rjmp	.+6      	; 0x13c <DC_MotorMove+0x9c>
		case MOTOR_STOP:
			DIO_WritePin(MotorEnablePin,LOW);/* stop the motor by writing low on the enable pin */
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	0e 94 a1 00 	call	0x142	; 0x142 <DIO_WritePin>
			break;
	}
	
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <DIO_WritePin>:
/* Return: return void		                                            */
/* Description: config the pin to be high or low		                */
/************************************************************************/
void DIO_WritePin(uint8 PinNum, uint8 PinValue)
{
	if((PinNum >= NUM_0) && (PinNum < NUM_8))/*check if Pins in PORTA*/
 142:	88 30       	cpi	r24, 0x08	; 8
 144:	e8 f4       	brcc	.+58     	; 0x180 <DIO_WritePin+0x3e>
	{
		if (PinValue == NUM_1) /* Check Pin Value if high to set bit or low to clear bit */
 146:	61 30       	cpi	r22, 0x01	; 1
 148:	69 f4       	brne	.+26     	; 0x164 <DIO_WritePin+0x22>
		{
			SET_BIT(PORTA,PinNum);
 14a:	4b b3       	in	r20, 0x1b	; 27
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	b9 01       	movw	r22, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_WritePin+0x16>
 154:	66 0f       	add	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	8a 95       	dec	r24
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_WritePin+0x12>
 15c:	cb 01       	movw	r24, r22
 15e:	84 2b       	or	r24, r20
 160:	8b bb       	out	0x1b, r24	; 27
 162:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,PinNum);
 164:	4b b3       	in	r20, 0x1b	; 27
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	b9 01       	movw	r22, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_WritePin+0x30>
 16e:	66 0f       	add	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	8a 95       	dec	r24
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_WritePin+0x2c>
 176:	cb 01       	movw	r24, r22
 178:	80 95       	com	r24
 17a:	84 23       	and	r24, r20
 17c:	8b bb       	out	0x1b, r24	; 27
 17e:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_8) && (PinNum < NUM_16)) /*check if Pins in PORTB*/
 180:	98 ef       	ldi	r25, 0xF8	; 248
 182:	98 0f       	add	r25, r24
 184:	98 30       	cpi	r25, 0x08	; 8
 186:	f0 f4       	brcc	.+60     	; 0x1c4 <DIO_WritePin+0x82>
	{
		if (PinValue == NUM_1) /* Check Pin Value if high to set bit or low to clear bit */
 188:	61 30       	cpi	r22, 0x01	; 1
 18a:	69 f4       	brne	.+26     	; 0x1a6 <DIO_WritePin+0x64>
		{
			SET_BIT(PORTB,(PinNum - NUM_8));
 18c:	48 b3       	in	r20, 0x18	; 24
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	b9 01       	movw	r22, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_WritePin+0x58>
 196:	66 0f       	add	r22, r22
 198:	77 1f       	adc	r23, r23
 19a:	9a 95       	dec	r25
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_WritePin+0x54>
 19e:	cb 01       	movw	r24, r22
 1a0:	84 2b       	or	r24, r20
 1a2:	88 bb       	out	0x18, r24	; 24
 1a4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,(PinNum - NUM_8));
 1a6:	48 b3       	in	r20, 0x18	; 24
 1a8:	88 50       	subi	r24, 0x08	; 8
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	b9 01       	movw	r22, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_WritePin+0x74>
 1b2:	66 0f       	add	r22, r22
 1b4:	77 1f       	adc	r23, r23
 1b6:	8a 95       	dec	r24
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_WritePin+0x70>
 1ba:	cb 01       	movw	r24, r22
 1bc:	80 95       	com	r24
 1be:	84 23       	and	r24, r20
 1c0:	88 bb       	out	0x18, r24	; 24
 1c2:	08 95       	ret
		}
	}
	else if((PinNum >= NUM_16) && (PinNum < NUM_24)) /*check if Pins in PORTC*/
 1c4:	90 ef       	ldi	r25, 0xF0	; 240
 1c6:	98 0f       	add	r25, r24
 1c8:	98 30       	cpi	r25, 0x08	; 8
 1ca:	f0 f4       	brcc	.+60     	; 0x208 <DIO_WritePin+0xc6>
	{
		if(PinValue == NUM_1) /* Check Pin Value if high to set bit or low to clear bit */
 1cc:	61 30       	cpi	r22, 0x01	; 1
 1ce:	69 f4       	brne	.+26     	; 0x1ea <DIO_WritePin+0xa8>
		{
			SET_BIT(PORTC,(PinNum-NUM_16));
 1d0:	45 b3       	in	r20, 0x15	; 21
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	b9 01       	movw	r22, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_WritePin+0x9c>
 1da:	66 0f       	add	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	9a 95       	dec	r25
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_WritePin+0x98>
 1e2:	cb 01       	movw	r24, r22
 1e4:	84 2b       	or	r24, r20
 1e6:	85 bb       	out	0x15, r24	; 21
 1e8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,(PinNum-NUM_16));
 1ea:	45 b3       	in	r20, 0x15	; 21
 1ec:	80 51       	subi	r24, 0x10	; 16
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	b9 01       	movw	r22, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_WritePin+0xb8>
 1f6:	66 0f       	add	r22, r22
 1f8:	77 1f       	adc	r23, r23
 1fa:	8a 95       	dec	r24
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_WritePin+0xb4>
 1fe:	cb 01       	movw	r24, r22
 200:	80 95       	com	r24
 202:	84 23       	and	r24, r20
 204:	85 bb       	out	0x15, r24	; 21
 206:	08 95       	ret
		}
	}
	else if((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
 208:	98 ee       	ldi	r25, 0xE8	; 232
 20a:	98 0f       	add	r25, r24
 20c:	98 30       	cpi	r25, 0x08	; 8
 20e:	e8 f4       	brcc	.+58     	; 0x24a <DIO_WritePin+0x108>
	{
		if (PinValue == NUM_1) /* Check Pin Value if high to set bit or low to clear bit */
 210:	61 30       	cpi	r22, 0x01	; 1
 212:	69 f4       	brne	.+26     	; 0x22e <DIO_WritePin+0xec>
		{
			SET_BIT(PORTD,(PinNum-NUM_24));
 214:	42 b3       	in	r20, 0x12	; 18
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	b9 01       	movw	r22, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_WritePin+0xe0>
 21e:	66 0f       	add	r22, r22
 220:	77 1f       	adc	r23, r23
 222:	9a 95       	dec	r25
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_WritePin+0xdc>
 226:	cb 01       	movw	r24, r22
 228:	84 2b       	or	r24, r20
 22a:	82 bb       	out	0x12, r24	; 18
 22c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,(PinNum-NUM_24));
 22e:	42 b3       	in	r20, 0x12	; 18
 230:	88 51       	subi	r24, 0x18	; 24
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	b9 01       	movw	r22, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_WritePin+0xfc>
 23a:	66 0f       	add	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	8a 95       	dec	r24
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_WritePin+0xf8>
 242:	cb 01       	movw	r24, r22
 244:	80 95       	com	r24
 246:	84 23       	and	r24, r20
 248:	82 bb       	out	0x12, r24	; 18
 24a:	08 95       	ret

0000024c <DIO_ReadPin>:
/* @param: PinNum take the pin we need to return its value              */
/* Return: return status of the pin		                                */
/* Description: return pin status			      		                */
/************************************************************************/
uint8 DIO_ReadPin(uint8 PinNum)
{
 24c:	98 2f       	mov	r25, r24
		if((PinNum >= NUM_0) && (PinNum < NUM_8)) /*check if Pins in PORTA*/
 24e:	88 30       	cpi	r24, 0x08	; 8
 250:	60 f4       	brcc	.+24     	; 0x26a <DIO_ReadPin+0x1e>
		{
			return GET_BIT(PINA,PinNum); /* Return Bit status*/
 252:	49 b3       	in	r20, 0x19	; 25
 254:	21 e0       	ldi	r18, 0x01	; 1
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	b9 01       	movw	r22, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_ReadPin+0x14>
 25c:	66 0f       	add	r22, r22
 25e:	77 1f       	adc	r23, r23
 260:	8a 95       	dec	r24
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_ReadPin+0x10>
 264:	cb 01       	movw	r24, r22
 266:	84 23       	and	r24, r20
 268:	08 95       	ret
		}
		else if((PinNum >= NUM_8) && (PinNum < NUM_16)) /*check if Pins in PORTB*/
 26a:	88 ef       	ldi	r24, 0xF8	; 248
 26c:	89 0f       	add	r24, r25
 26e:	88 30       	cpi	r24, 0x08	; 8
 270:	60 f4       	brcc	.+24     	; 0x28a <DIO_ReadPin+0x3e>
		{
			return GET_BIT(PINB,(PinNum-NUM_8));
 272:	46 b3       	in	r20, 0x16	; 22
 274:	21 e0       	ldi	r18, 0x01	; 1
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	b9 01       	movw	r22, r18
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_ReadPin+0x34>
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	8a 95       	dec	r24
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_ReadPin+0x30>
 284:	cb 01       	movw	r24, r22
 286:	84 23       	and	r24, r20
 288:	08 95       	ret
		}
		else if((PinNum >= NUM_16) && (PinNum < NUM_24)) /*check if Pins in PORTC*/
 28a:	80 ef       	ldi	r24, 0xF0	; 240
 28c:	89 0f       	add	r24, r25
 28e:	88 30       	cpi	r24, 0x08	; 8
 290:	60 f4       	brcc	.+24     	; 0x2aa <DIO_ReadPin+0x5e>
		{
			return GET_BIT(PINC,(PinNum-NUM_16));
 292:	43 b3       	in	r20, 0x13	; 19
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	b9 01       	movw	r22, r18
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_ReadPin+0x54>
 29c:	66 0f       	add	r22, r22
 29e:	77 1f       	adc	r23, r23
 2a0:	8a 95       	dec	r24
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_ReadPin+0x50>
 2a4:	cb 01       	movw	r24, r22
 2a6:	84 23       	and	r24, r20
 2a8:	08 95       	ret
		}
		else if((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
 2aa:	88 ee       	ldi	r24, 0xE8	; 232
 2ac:	89 0f       	add	r24, r25
 2ae:	88 30       	cpi	r24, 0x08	; 8
 2b0:	60 f4       	brcc	.+24     	; 0x2ca <DIO_ReadPin+0x7e>
		{
			return GET_BIT(PIND,(PinNum-NUM_24));
 2b2:	40 b3       	in	r20, 0x10	; 16
 2b4:	21 e0       	ldi	r18, 0x01	; 1
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	b9 01       	movw	r22, r18
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_ReadPin+0x74>
 2bc:	66 0f       	add	r22, r22
 2be:	77 1f       	adc	r23, r23
 2c0:	8a 95       	dec	r24
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_ReadPin+0x70>
 2c4:	cb 01       	movw	r24, r22
 2c6:	84 23       	and	r24, r20
 2c8:	08 95       	ret
		}
	return NUM_0;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
}
 2cc:	08 95       	ret

000002ce <DIO_SetPinDirection>:
/* Return: return void		                                            */
/* Description: config the pin to be input or output	                */
/************************************************************************/
void DIO_SetPinDirection(uint8 PinNum, uint8 PinValue)
{
	if((PinNum >= NUM_0) && (PinNum <NUM_8)) /*check if Pins in PORTA*/
 2ce:	88 30       	cpi	r24, 0x08	; 8
 2d0:	e8 f4       	brcc	.+58     	; 0x30c <DIO_SetPinDirection+0x3e>
	{
		if (PinValue == NUM_1) /* Check Pin Value if OUT to set bit or IN to clear bit */
 2d2:	61 30       	cpi	r22, 0x01	; 1
 2d4:	69 f4       	brne	.+26     	; 0x2f0 <DIO_SetPinDirection+0x22>
		{
			SET_BIT(DDRA,(PinNum));
 2d6:	4a b3       	in	r20, 0x1a	; 26
 2d8:	21 e0       	ldi	r18, 0x01	; 1
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	b9 01       	movw	r22, r18
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_SetPinDirection+0x16>
 2e0:	66 0f       	add	r22, r22
 2e2:	77 1f       	adc	r23, r23
 2e4:	8a 95       	dec	r24
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_SetPinDirection+0x12>
 2e8:	cb 01       	movw	r24, r22
 2ea:	84 2b       	or	r24, r20
 2ec:	8a bb       	out	0x1a, r24	; 26
 2ee:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,(PinNum));
 2f0:	4a b3       	in	r20, 0x1a	; 26
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	b9 01       	movw	r22, r18
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_SetPinDirection+0x30>
 2fa:	66 0f       	add	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	8a 95       	dec	r24
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_SetPinDirection+0x2c>
 302:	cb 01       	movw	r24, r22
 304:	80 95       	com	r24
 306:	84 23       	and	r24, r20
 308:	8a bb       	out	0x1a, r24	; 26
 30a:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_8) && (PinNum < NUM_16)) /*check if Pins in PORTB*/
 30c:	98 ef       	ldi	r25, 0xF8	; 248
 30e:	98 0f       	add	r25, r24
 310:	98 30       	cpi	r25, 0x08	; 8
 312:	f0 f4       	brcc	.+60     	; 0x350 <DIO_SetPinDirection+0x82>
	{
		if (PinValue == NUM_1)
 314:	61 30       	cpi	r22, 0x01	; 1
 316:	69 f4       	brne	.+26     	; 0x332 <DIO_SetPinDirection+0x64>
		{
			SET_BIT(DDRB,(PinNum - NUM_8));
 318:	47 b3       	in	r20, 0x17	; 23
 31a:	21 e0       	ldi	r18, 0x01	; 1
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	b9 01       	movw	r22, r18
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_SetPinDirection+0x58>
 322:	66 0f       	add	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	9a 95       	dec	r25
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_SetPinDirection+0x54>
 32a:	cb 01       	movw	r24, r22
 32c:	84 2b       	or	r24, r20
 32e:	87 bb       	out	0x17, r24	; 23
 330:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,(PinNum - NUM_8));
 332:	47 b3       	in	r20, 0x17	; 23
 334:	88 50       	subi	r24, 0x08	; 8
 336:	21 e0       	ldi	r18, 0x01	; 1
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	b9 01       	movw	r22, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_SetPinDirection+0x74>
 33e:	66 0f       	add	r22, r22
 340:	77 1f       	adc	r23, r23
 342:	8a 95       	dec	r24
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_SetPinDirection+0x70>
 346:	cb 01       	movw	r24, r22
 348:	80 95       	com	r24
 34a:	84 23       	and	r24, r20
 34c:	87 bb       	out	0x17, r24	; 23
 34e:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_16) && (PinNum < NUM_24)) /*check if Pins in PORTC*/
 350:	90 ef       	ldi	r25, 0xF0	; 240
 352:	98 0f       	add	r25, r24
 354:	98 30       	cpi	r25, 0x08	; 8
 356:	f0 f4       	brcc	.+60     	; 0x394 <DIO_SetPinDirection+0xc6>
	{
		if (PinValue == NUM_1)
 358:	61 30       	cpi	r22, 0x01	; 1
 35a:	69 f4       	brne	.+26     	; 0x376 <DIO_SetPinDirection+0xa8>
		{
			SET_BIT(DDRC,(PinNum - NUM_16));
 35c:	44 b3       	in	r20, 0x14	; 20
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	b9 01       	movw	r22, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_SetPinDirection+0x9c>
 366:	66 0f       	add	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	9a 95       	dec	r25
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_SetPinDirection+0x98>
 36e:	cb 01       	movw	r24, r22
 370:	84 2b       	or	r24, r20
 372:	84 bb       	out	0x14, r24	; 20
 374:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,(PinNum - NUM_16));
 376:	44 b3       	in	r20, 0x14	; 20
 378:	80 51       	subi	r24, 0x10	; 16
 37a:	21 e0       	ldi	r18, 0x01	; 1
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	b9 01       	movw	r22, r18
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_SetPinDirection+0xb8>
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	8a 95       	dec	r24
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_SetPinDirection+0xb4>
 38a:	cb 01       	movw	r24, r22
 38c:	80 95       	com	r24
 38e:	84 23       	and	r24, r20
 390:	84 bb       	out	0x14, r24	; 20
 392:	08 95       	ret
		}
	}
	else if ((PinNum >= NUM_24) && (PinNum < NUM_32)) /*check if Pins in PORTD*/
 394:	98 ee       	ldi	r25, 0xE8	; 232
 396:	98 0f       	add	r25, r24
 398:	98 30       	cpi	r25, 0x08	; 8
 39a:	e8 f4       	brcc	.+58     	; 0x3d6 <DIO_SetPinDirection+0x108>
	{
		if (PinValue == NUM_1)
 39c:	61 30       	cpi	r22, 0x01	; 1
 39e:	69 f4       	brne	.+26     	; 0x3ba <DIO_SetPinDirection+0xec>
		{
			SET_BIT(DDRD,(PinNum - NUM_24));
 3a0:	41 b3       	in	r20, 0x11	; 17
 3a2:	21 e0       	ldi	r18, 0x01	; 1
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	b9 01       	movw	r22, r18
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_SetPinDirection+0xe0>
 3aa:	66 0f       	add	r22, r22
 3ac:	77 1f       	adc	r23, r23
 3ae:	9a 95       	dec	r25
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_SetPinDirection+0xdc>
 3b2:	cb 01       	movw	r24, r22
 3b4:	84 2b       	or	r24, r20
 3b6:	81 bb       	out	0x11, r24	; 17
 3b8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,(PinNum - NUM_24));
 3ba:	41 b3       	in	r20, 0x11	; 17
 3bc:	88 51       	subi	r24, 0x18	; 24
 3be:	21 e0       	ldi	r18, 0x01	; 1
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	b9 01       	movw	r22, r18
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_SetPinDirection+0xfc>
 3c6:	66 0f       	add	r22, r22
 3c8:	77 1f       	adc	r23, r23
 3ca:	8a 95       	dec	r24
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_SetPinDirection+0xf8>
 3ce:	cb 01       	movw	r24, r22
 3d0:	80 95       	com	r24
 3d2:	84 23       	and	r24, r20
 3d4:	81 bb       	out	0x11, r24	; 17
 3d6:	08 95       	ret

000003d8 <__vector_3>:

/************************************************************************/
/* Interrupt to handle if button pressed                                */
/************************************************************************/
ISR(INT2_vect)
{
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	8f 93       	push	r24
	int2++;
 3e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 3e8:	8f 5f       	subi	r24, 0xFF	; 255
 3ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
 3ee:	8f 91       	pop	r24
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <__vector_10>:

/************************************************************************/
/* Interrupt to handle when compare match occur                        */
/************************************************************************/
ISR(TIMER0_COMP_vect)
{
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	2f 93       	push	r18
 406:	3f 93       	push	r19
 408:	4f 93       	push	r20
 40a:	5f 93       	push	r21
 40c:	6f 93       	push	r22
 40e:	7f 93       	push	r23
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
 414:	af 93       	push	r26
	Gtick++;
 416:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <Gtick>
 41a:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <Gtick+0x1>
 41e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <Gtick+0x2>
 422:	50 91 64 00 	lds	r21, 0x0064	; 0x800064 <Gtick+0x3>
 426:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Gtick+0x4>
 42a:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <Gtick+0x5>
 42e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Gtick+0x6>
 432:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Gtick+0x7>
 436:	a1 e0       	ldi	r26, 0x01	; 1
 438:	0e 94 ca 02 	call	0x594	; 0x594 <__adddi3_s8>
 43c:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <Gtick>
 440:	30 93 62 00 	sts	0x0062, r19	; 0x800062 <Gtick+0x1>
 444:	40 93 63 00 	sts	0x0063, r20	; 0x800063 <Gtick+0x2>
 448:	50 93 64 00 	sts	0x0064, r21	; 0x800064 <Gtick+0x3>
 44c:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <Gtick+0x4>
 450:	70 93 66 00 	sts	0x0066, r23	; 0x800066 <Gtick+0x5>
 454:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Gtick+0x6>
 458:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Gtick+0x7>
}
 45c:	af 91       	pop	r26
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	7f 91       	pop	r23
 464:	6f 91       	pop	r22
 466:	5f 91       	pop	r21
 468:	4f 91       	pop	r20
 46a:	3f 91       	pop	r19
 46c:	2f 91       	pop	r18
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <main>:
	
	#if ENABLE_CODE
	/************************************************************************/
	/* Initialize timer 1 in PWM and initialize motors in direction         */
	/************************************************************************/
    TimerOneInit(DUTY_25);
 478:	89 e1       	ldi	r24, 0x19	; 25
 47a:	0e 94 83 02 	call	0x506	; 0x506 <TimerOneInit>
 47e:	2f ef       	ldi	r18, 0xFF	; 255
 480:	83 ed       	ldi	r24, 0xD3	; 211
 482:	90 e3       	ldi	r25, 0x30	; 48
 484:	21 50       	subi	r18, 0x01	; 1
 486:	80 40       	sbci	r24, 0x00	; 0
 488:	90 40       	sbci	r25, 0x00	; 0
 48a:	e1 f7       	brne	.-8      	; 0x484 <main+0xc>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <main+0x16>
 48e:	00 00       	nop
	_delay_ms(ONE_1000_MS);
	/* Motor 1 */
	DC_Motor_Init(MOTOR1_ENABLE,MOTOR1_DIRECTION_A,MOTOR1_DIRECTION_B);
 490:	4b e1       	ldi	r20, 0x1B	; 27
 492:	6a e1       	ldi	r22, 0x1A	; 26
 494:	8c e1       	ldi	r24, 0x1C	; 28
 496:	0e 94 3e 00 	call	0x7c	; 0x7c <DC_Motor_Init>
	DC_MotorMove(MOTOR1_ENABLE,MOTOR1_DIRECTION_A,MOTOR1_DIRECTION_B,MOTOR_BACKWARD);
 49a:	21 e0       	ldi	r18, 0x01	; 1
 49c:	4b e1       	ldi	r20, 0x1B	; 27
 49e:	6a e1       	ldi	r22, 0x1A	; 26
 4a0:	8c e1       	ldi	r24, 0x1C	; 28
 4a2:	0e 94 50 00 	call	0xa0	; 0xa0 <DC_MotorMove>
	/* motor 2*/
	DC_Motor_Init(MOTOR2_ENABLE,MOTOR2_DIRECTION_A,MOTOR2_DIRECTION_B);
 4a6:	4f e1       	ldi	r20, 0x1F	; 31
 4a8:	6e e1       	ldi	r22, 0x1E	; 30
 4aa:	8d e1       	ldi	r24, 0x1D	; 29
 4ac:	0e 94 3e 00 	call	0x7c	; 0x7c <DC_Motor_Init>
	DC_MotorMove(MOTOR2_ENABLE,MOTOR2_DIRECTION_A,MOTOR2_DIRECTION_B,MOTOR_FORWARD);
 4b0:	20 e0       	ldi	r18, 0x00	; 0
 4b2:	4f e1       	ldi	r20, 0x1F	; 31
 4b4:	6e e1       	ldi	r22, 0x1E	; 30
 4b6:	8d e1       	ldi	r24, 0x1D	; 29
 4b8:	0e 94 50 00 	call	0xa0	; 0xa0 <DC_MotorMove>
	TimerOneInit(DUTY_50);
 4bc:	82 e3       	ldi	r24, 0x32	; 50
 4be:	0e 94 83 02 	call	0x506	; 0x506 <TimerOneInit>
 4c2:	2f ef       	ldi	r18, 0xFF	; 255
 4c4:	83 ed       	ldi	r24, 0xD3	; 211
 4c6:	90 e3       	ldi	r25, 0x30	; 48
 4c8:	21 50       	subi	r18, 0x01	; 1
 4ca:	80 40       	sbci	r24, 0x00	; 0
 4cc:	90 40       	sbci	r25, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <main+0x50>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <main+0x5a>
 4d2:	00 00       	nop
	_delay_ms(ONE_1000_MS);
	TimerOneInit(DUTY_75);
 4d4:	8b e4       	ldi	r24, 0x4B	; 75
 4d6:	0e 94 83 02 	call	0x506	; 0x506 <TimerOneInit>
 4da:	2f ef       	ldi	r18, 0xFF	; 255
 4dc:	83 ed       	ldi	r24, 0xD3	; 211
 4de:	90 e3       	ldi	r25, 0x30	; 48
 4e0:	21 50       	subi	r18, 0x01	; 1
 4e2:	80 40       	sbci	r24, 0x00	; 0
 4e4:	90 40       	sbci	r25, 0x00	; 0
 4e6:	e1 f7       	brne	.-8      	; 0x4e0 <main+0x68>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <main+0x72>
 4ea:	00 00       	nop
	_delay_ms(ONE_1000_MS);
	TimerOneInit(DUTY_100);
 4ec:	84 e6       	ldi	r24, 0x64	; 100
 4ee:	0e 94 83 02 	call	0x506	; 0x506 <TimerOneInit>
 4f2:	2f ef       	ldi	r18, 0xFF	; 255
 4f4:	83 ed       	ldi	r24, 0xD3	; 211
 4f6:	90 e3       	ldi	r25, 0x30	; 48
 4f8:	21 50       	subi	r18, 0x01	; 1
 4fa:	80 40       	sbci	r24, 0x00	; 0
 4fc:	90 40       	sbci	r25, 0x00	; 0
 4fe:	e1 f7       	brne	.-8      	; 0x4f8 <main+0x80>
 500:	00 c0       	rjmp	.+0      	; 0x502 <main+0x8a>
 502:	00 00       	nop
 504:	ff cf       	rjmp	.-2      	; 0x504 <main+0x8c>

00000506 <TimerOneInit>:
/* Description: initialize timer 		                                */
/************************************************************************/
void TimerOneInit(uint8 DutyCycle)
{
	
	uint16 OCR_value = (MAX_VALUE - ((DutyCycle * (MAX_VALUE + 1 ) ))/NUM_100);
 506:	21 ed       	ldi	r18, 0xD1	; 209
 508:	37 e0       	ldi	r19, 0x07	; 7
 50a:	48 2f       	mov	r20, r24
 50c:	42 9f       	mul	r20, r18
 50e:	c0 01       	movw	r24, r0
 510:	43 9f       	mul	r20, r19
 512:	90 0d       	add	r25, r0
 514:	11 24       	eor	r1, r1
 516:	64 e6       	ldi	r22, 0x64	; 100
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 51e:	80 ed       	ldi	r24, 0xD0	; 208
 520:	97 e0       	ldi	r25, 0x07	; 7
 522:	86 1b       	sub	r24, r22
 524:	97 0b       	sbc	r25, r23
	/************************************************************************/
	/* initialize registers                                                 */
	/************************************************************************/
	TCNT1H = NUM_0;
 526:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = NUM_0;
 528:	1c bc       	out	0x2c, r1	; 44
	
	OCR1AH = (OCR_value>>SHIFT_EIGHT); /* set ocr1 to 1000 */
 52a:	9b bd       	out	0x2b, r25	; 43
	OCR1AL = OCR_value;
 52c:	8a bd       	out	0x2a, r24	; 42
	
	OCR1BH = (OCR_value>>SHIFT_EIGHT); /* set ocr1 to 1000 */
 52e:	99 bd       	out	0x29, r25	; 41
	OCR1BL = OCR_value;
 530:	88 bd       	out	0x28, r24	; 40
	
	ICR1L = MAX_VALUE;
 532:	80 ed       	ldi	r24, 0xD0	; 208
 534:	86 bd       	out	0x26, r24	; 38
	ICR1H = (MAX_VALUE>>SHIFT_EIGHT);
 536:	87 e0       	ldi	r24, 0x07	; 7
 538:	87 bd       	out	0x27, r24	; 39
	
	/************************************************************************/
	/* Config Timer1 in PWM phase correct mode                              */
	/************************************************************************/
	SET_BIT(TCCR1A,COM1A1);
 53a:	8f b5       	in	r24, 0x2f	; 47
 53c:	80 68       	ori	r24, 0x80	; 128
 53e:	8f bd       	out	0x2f, r24	; 47
	//SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1B1);
 540:	8f b5       	in	r24, 0x2f	; 47
 542:	80 62       	ori	r24, 0x20	; 32
 544:	8f bd       	out	0x2f, r24	; 47
	//SET_BIT(TCCR1A,COM1B0);
	
	CLEAR_BIT(TCCR1A,FOC1A);
 546:	8f b5       	in	r24, 0x2f	; 47
 548:	87 7f       	andi	r24, 0xF7	; 247
 54a:	8f bd       	out	0x2f, r24	; 47
	CLEAR_BIT(TCCR1A,FOC1B);
 54c:	8f b5       	in	r24, 0x2f	; 47
 54e:	8b 7f       	andi	r24, 0xFB	; 251
 550:	8f bd       	out	0x2f, r24	; 47
	
	SET_BIT(TCCR1A,WGM11);
 552:	8f b5       	in	r24, 0x2f	; 47
 554:	82 60       	ori	r24, 0x02	; 2
 556:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,WGM13);
 558:	8e b5       	in	r24, 0x2e	; 46
 55a:	80 61       	ori	r24, 0x10	; 16
 55c:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,CS10);
 55e:	8e b5       	in	r24, 0x2e	; 46
 560:	81 60       	ori	r24, 0x01	; 1
 562:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TCCR1A,WGM10);
 564:	8f b5       	in	r24, 0x2f	; 47
 566:	8e 7f       	andi	r24, 0xFE	; 254
 568:	8f bd       	out	0x2f, r24	; 47
 56a:	08 95       	ret

0000056c <__divmodhi4>:
 56c:	97 fb       	bst	r25, 7
 56e:	07 2e       	mov	r0, r23
 570:	16 f4       	brtc	.+4      	; 0x576 <__divmodhi4+0xa>
 572:	00 94       	com	r0
 574:	07 d0       	rcall	.+14     	; 0x584 <__divmodhi4_neg1>
 576:	77 fd       	sbrc	r23, 7
 578:	09 d0       	rcall	.+18     	; 0x58c <__divmodhi4_neg2>
 57a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__udivmodhi4>
 57e:	07 fc       	sbrc	r0, 7
 580:	05 d0       	rcall	.+10     	; 0x58c <__divmodhi4_neg2>
 582:	3e f4       	brtc	.+14     	; 0x592 <__divmodhi4_exit>

00000584 <__divmodhi4_neg1>:
 584:	90 95       	com	r25
 586:	81 95       	neg	r24
 588:	9f 4f       	sbci	r25, 0xFF	; 255
 58a:	08 95       	ret

0000058c <__divmodhi4_neg2>:
 58c:	70 95       	com	r23
 58e:	61 95       	neg	r22
 590:	7f 4f       	sbci	r23, 0xFF	; 255

00000592 <__divmodhi4_exit>:
 592:	08 95       	ret

00000594 <__adddi3_s8>:
 594:	00 24       	eor	r0, r0
 596:	a7 fd       	sbrc	r26, 7
 598:	00 94       	com	r0
 59a:	2a 0f       	add	r18, r26
 59c:	30 1d       	adc	r19, r0
 59e:	40 1d       	adc	r20, r0
 5a0:	50 1d       	adc	r21, r0
 5a2:	60 1d       	adc	r22, r0
 5a4:	70 1d       	adc	r23, r0
 5a6:	80 1d       	adc	r24, r0
 5a8:	90 1d       	adc	r25, r0
 5aa:	08 95       	ret

000005ac <__udivmodhi4>:
 5ac:	aa 1b       	sub	r26, r26
 5ae:	bb 1b       	sub	r27, r27
 5b0:	51 e1       	ldi	r21, 0x11	; 17
 5b2:	07 c0       	rjmp	.+14     	; 0x5c2 <__udivmodhi4_ep>

000005b4 <__udivmodhi4_loop>:
 5b4:	aa 1f       	adc	r26, r26
 5b6:	bb 1f       	adc	r27, r27
 5b8:	a6 17       	cp	r26, r22
 5ba:	b7 07       	cpc	r27, r23
 5bc:	10 f0       	brcs	.+4      	; 0x5c2 <__udivmodhi4_ep>
 5be:	a6 1b       	sub	r26, r22
 5c0:	b7 0b       	sbc	r27, r23

000005c2 <__udivmodhi4_ep>:
 5c2:	88 1f       	adc	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	5a 95       	dec	r21
 5c8:	a9 f7       	brne	.-22     	; 0x5b4 <__udivmodhi4_loop>
 5ca:	80 95       	com	r24
 5cc:	90 95       	com	r25
 5ce:	bc 01       	movw	r22, r24
 5d0:	cd 01       	movw	r24, r26
 5d2:	08 95       	ret

000005d4 <_exit>:
 5d4:	f8 94       	cli

000005d6 <__stop_program>:
 5d6:	ff cf       	rjmp	.-2      	; 0x5d6 <__stop_program>
